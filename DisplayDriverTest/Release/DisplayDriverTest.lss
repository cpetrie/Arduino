
DisplayDriverTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  0000190a  0000199e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000190a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  008001be  008001be  00001a5c  2**0
                  ALLOC
  3 .debug_aranges 000007e8  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000015ed  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000091ba  00000000  00000000  00003831  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001dbc  00000000  00000000  0000c9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d8a  00000000  00000000  0000e7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e30  00000000  00000000  00012534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023b2  00000000  00000000  00013364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004dba  00000000  00000000  00015716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b0  00000000  00000000  0001a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
}
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__dtors_end>
 */

#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
#ifdef _SF_PUNC4
prog_uint32_t PROGMEM_ _punc4[] = {
	0x024242 /*{*/, 0x066666 /*|*/, 0x042424 /*}*/, 0x000db0 /*~*/};
#endif

uint32_t resolve(uint32_t& data) { return pgm_read_dword(&data); }
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_16>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_18>
      4c:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_19>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

00000068 <_punc2>:
      68:	66 60 06 00 24 60 06 00 63 6c 03 00 f0 f0 00 00     f`..$`..cl......
      78:	6c 63 0c 00 06 92 06 00 56 93 06 00                 lc......V...

00000084 <_punc3>:
      84:	46 44 06 00 21 46 08 00 26 22 06 00 00 90 06 00     FD..!F..&"......
      94:	0f 00 00 00 00 62 0c 00                             .....b..

0000009c <_punc4>:
      9c:	42 42 02 00 66 66 06 00 24 24 04 00 b0 0d 00 00     BB..ff..$$......

000000ac <_ZL6_digit>:
      ac:	d6 b9 06 00 27 62 02 00 8f 17 0e 00 1f 17 0f 00     ....'b..........
      bc:	11 9f 09 00 1f 8e 0f 00 9f 8f 07 00 24 12 0f 00     ............$...
      cc:	9f 96 0f 00 11 9f 0f 00                             ........

000000d4 <_ZL10_alphaBold>:
      d4:	dd df 06 00 de df 0e 00 d6 dc 06 00 de dd 0e 00     ................
      e4:	cf ce 0f 00 cc ce 0f 00 d7 cf 07 00 dd df 0d 00     ................
      f4:	6f 66 0f 00 bf 33 0f 00 dd de 0d 00 cf cc 0c 00     of...3..........
     104:	99 ff 09 00 b9 df 09 00 d6 dd 06 00 cc df 0e 00     ................
     114:	a7 99 06 00 ed dd 0e 00 1e cf 07 00 66 66 0f 00     ............ff..
     124:	d6 dd 0d 00 52 dd 0d 00 f6 99 09 00 69 96 09 00     ....R.......i...
     134:	2c 97 09 00 cf 36 0f 00                             ,....6..

0000013c <_ZL6_alpha>:
     13c:	99 9f 06 00 9e 9f 0e 00 96 98 06 00 9e 99 0e 00     ................
     14c:	8f 8e 0f 00 88 8e 0f 00 97 8b 07 00 99 9f 09 00     ................
     15c:	4f 44 0f 00 ae 22 0f 00 a9 ac 09 00 8f 88 08 00     OD..."..........
     16c:	99 ff 09 00 b9 df 09 00 96 99 06 00 88 9f 0e 00     ................
     17c:	a7 99 06 00 e9 99 0e 00 1e 8f 07 00 44 44 0f 00     ............DD..
     18c:	96 99 09 00 52 99 09 00 f6 99 09 00 69 96 09 00     ....R.......i...
     19c:	2c 97 09 00 4f 12 0f 00                             ,...O...

000001a4 <_ZL6_punc1>:
     1a4:	00 00 00 00 02 66 06 00 00 55 05 00 f5 f5 05 00     .....f...U......
     1b4:	5e af 07 00 4d 26 0b 00 bd 5e 07 00 00 24 06 00     ^...M&...^...$..
     1c4:	42 44 02 00 24 22 04 00 a0 a4 00 00 40 4e 00 00     BD..$"......@N..
     1d4:	24 06 00 00 00 0f 00 00 66 00 00 00 48 26 01 00     $.......f...H&..

000001e4 <_ZL10_errBitmap>:
     1e4:	5a 5a 0a 00                                         ZZ..

000001e8 <__ctors_start>:
     1e8:	ef 06       	cpc	r14, r31
     1ea:	5b 0a       	sbc	r5, r27

000001ec <__ctors_end>:
     1ec:	e8 06       	cpc	r14, r24

000001ee <__dtors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d4 e0       	ldi	r29, 0x04	; 4
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	ea e0       	ldi	r30, 0x0A	; 10
     202:	f9 e1       	ldi	r31, 0x19	; 25
     204:	02 c0       	rjmp	.+4      	; 0x20a <.do_copy_data_start>

00000206 <.do_copy_data_loop>:
     206:	05 90       	lpm	r0, Z+
     208:	0d 92       	st	X+, r0

0000020a <.do_copy_data_start>:
     20a:	ae 3b       	cpi	r26, 0xBE	; 190
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <.do_copy_data_loop>

00000210 <__do_clear_bss>:
     210:	13 e0       	ldi	r17, 0x03	; 3
     212:	ae eb       	ldi	r26, 0xBE	; 190
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	ad 30       	cpi	r26, 0x0D	; 13
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>

00000220 <__do_global_ctors>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	cc ee       	ldi	r28, 0xEC	; 236
     224:	d1 e0       	ldi	r29, 0x01	; 1
     226:	04 c0       	rjmp	.+8      	; 0x230 <.do_global_ctors_start>

00000228 <.do_global_ctors_loop>:
     228:	22 97       	sbiw	r28, 0x02	; 2
     22a:	fe 01       	movw	r30, r28
     22c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__tablejump__>

00000230 <.do_global_ctors_start>:
     230:	c8 3e       	cpi	r28, 0xE8	; 232
     232:	d1 07       	cpc	r29, r17
     234:	c9 f7       	brne	.-14     	; 0x228 <.do_global_ctors_loop>
     236:	0e 94 32 0b 	call	0x1664	; 0x1664 <main>
     23a:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__do_global_dtors>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <malloc>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	bc 01       	movw	r22, r24
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	91 05       	cpc	r25, r1
     24c:	10 f4       	brcc	.+4      	; 0x252 <malloc+0x10>
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	a0 91 0b 03 	lds	r26, 0x030B
     256:	b0 91 0c 03 	lds	r27, 0x030C
     25a:	ed 01       	movw	r28, r26
     25c:	e0 e0       	ldi	r30, 0x00	; 0
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	21 c0       	rjmp	.+66     	; 0x2a8 <malloc+0x66>
     266:	88 81       	ld	r24, Y
     268:	99 81       	ldd	r25, Y+1	; 0x01
     26a:	86 17       	cp	r24, r22
     26c:	97 07       	cpc	r25, r23
     26e:	69 f4       	brne	.+26     	; 0x28a <malloc+0x48>
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	9b 81       	ldd	r25, Y+3	; 0x03
     274:	30 97       	sbiw	r30, 0x00	; 0
     276:	19 f0       	breq	.+6      	; 0x27e <malloc+0x3c>
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	04 c0       	rjmp	.+8      	; 0x286 <malloc+0x44>
     27e:	90 93 0c 03 	sts	0x030C, r25
     282:	80 93 0b 03 	sts	0x030B, r24
     286:	fe 01       	movw	r30, r28
     288:	34 c0       	rjmp	.+104    	; 0x2f2 <malloc+0xb0>
     28a:	68 17       	cp	r22, r24
     28c:	79 07       	cpc	r23, r25
     28e:	38 f4       	brcc	.+14     	; 0x29e <malloc+0x5c>
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	19 f0       	breq	.+6      	; 0x29c <malloc+0x5a>
     296:	84 17       	cp	r24, r20
     298:	95 07       	cpc	r25, r21
     29a:	08 f4       	brcc	.+2      	; 0x29e <malloc+0x5c>
     29c:	ac 01       	movw	r20, r24
     29e:	fe 01       	movw	r30, r28
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	9b 81       	ldd	r25, Y+3	; 0x03
     2a4:	9c 01       	movw	r18, r24
     2a6:	e9 01       	movw	r28, r18
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	e9 f6       	brne	.-70     	; 0x266 <malloc+0x24>
     2ac:	41 15       	cp	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	a9 f1       	breq	.+106    	; 0x31c <malloc+0xda>
     2b2:	ca 01       	movw	r24, r20
     2b4:	86 1b       	sub	r24, r22
     2b6:	97 0b       	sbc	r25, r23
     2b8:	04 97       	sbiw	r24, 0x04	; 4
     2ba:	08 f4       	brcc	.+2      	; 0x2be <malloc+0x7c>
     2bc:	ba 01       	movw	r22, r20
     2be:	e0 e0       	ldi	r30, 0x00	; 0
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	2a c0       	rjmp	.+84     	; 0x318 <malloc+0xd6>
     2c4:	8d 91       	ld	r24, X+
     2c6:	9c 91       	ld	r25, X
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	84 17       	cp	r24, r20
     2cc:	95 07       	cpc	r25, r21
     2ce:	f9 f4       	brne	.+62     	; 0x30e <malloc+0xcc>
     2d0:	64 17       	cp	r22, r20
     2d2:	75 07       	cpc	r23, r21
     2d4:	81 f4       	brne	.+32     	; 0x2f6 <malloc+0xb4>
     2d6:	12 96       	adiw	r26, 0x02	; 2
     2d8:	8d 91       	ld	r24, X+
     2da:	9c 91       	ld	r25, X
     2dc:	13 97       	sbiw	r26, 0x03	; 3
     2de:	30 97       	sbiw	r30, 0x00	; 0
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <malloc+0xa6>
     2e2:	93 83       	std	Z+3, r25	; 0x03
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <malloc+0xae>
     2e8:	90 93 0c 03 	sts	0x030C, r25
     2ec:	80 93 0b 03 	sts	0x030B, r24
     2f0:	fd 01       	movw	r30, r26
     2f2:	32 96       	adiw	r30, 0x02	; 2
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <malloc+0x14c>
     2f6:	ca 01       	movw	r24, r20
     2f8:	86 1b       	sub	r24, r22
     2fa:	97 0b       	sbc	r25, r23
     2fc:	fd 01       	movw	r30, r26
     2fe:	e8 0f       	add	r30, r24
     300:	f9 1f       	adc	r31, r25
     302:	61 93       	st	Z+, r22
     304:	71 93       	st	Z+, r23
     306:	02 97       	sbiw	r24, 0x02	; 2
     308:	8d 93       	st	X+, r24
     30a:	9c 93       	st	X, r25
     30c:	40 c0       	rjmp	.+128    	; 0x38e <malloc+0x14c>
     30e:	fd 01       	movw	r30, r26
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	9c 01       	movw	r18, r24
     316:	d9 01       	movw	r26, r18
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	a1 f6       	brne	.-88     	; 0x2c4 <malloc+0x82>
     31c:	80 91 09 03 	lds	r24, 0x0309
     320:	90 91 0a 03 	lds	r25, 0x030A
     324:	89 2b       	or	r24, r25
     326:	41 f4       	brne	.+16     	; 0x338 <malloc+0xf6>
     328:	80 91 10 01 	lds	r24, 0x0110
     32c:	90 91 11 01 	lds	r25, 0x0111
     330:	90 93 0a 03 	sts	0x030A, r25
     334:	80 93 09 03 	sts	0x0309, r24
     338:	40 91 12 01 	lds	r20, 0x0112
     33c:	50 91 13 01 	lds	r21, 0x0113
     340:	41 15       	cp	r20, r1
     342:	51 05       	cpc	r21, r1
     344:	41 f4       	brne	.+16     	; 0x356 <malloc+0x114>
     346:	4d b7       	in	r20, 0x3d	; 61
     348:	5e b7       	in	r21, 0x3e	; 62
     34a:	80 91 0e 01 	lds	r24, 0x010E
     34e:	90 91 0f 01 	lds	r25, 0x010F
     352:	48 1b       	sub	r20, r24
     354:	59 0b       	sbc	r21, r25
     356:	20 91 09 03 	lds	r18, 0x0309
     35a:	30 91 0a 03 	lds	r19, 0x030A
     35e:	ca 01       	movw	r24, r20
     360:	82 1b       	sub	r24, r18
     362:	93 0b       	sbc	r25, r19
     364:	86 17       	cp	r24, r22
     366:	97 07       	cpc	r25, r23
     368:	80 f0       	brcs	.+32     	; 0x38a <malloc+0x148>
     36a:	ab 01       	movw	r20, r22
     36c:	4e 5f       	subi	r20, 0xFE	; 254
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	84 17       	cp	r24, r20
     372:	95 07       	cpc	r25, r21
     374:	50 f0       	brcs	.+20     	; 0x38a <malloc+0x148>
     376:	42 0f       	add	r20, r18
     378:	53 1f       	adc	r21, r19
     37a:	50 93 0a 03 	sts	0x030A, r21
     37e:	40 93 09 03 	sts	0x0309, r20
     382:	f9 01       	movw	r30, r18
     384:	61 93       	st	Z+, r22
     386:	71 93       	st	Z+, r23
     388:	02 c0       	rjmp	.+4      	; 0x38e <malloc+0x14c>
     38a:	e0 e0       	ldi	r30, 0x00	; 0
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	cf 01       	movw	r24, r30
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <free>:
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	09 f4       	brne	.+2      	; 0x3a0 <free+0xa>
     39e:	50 c0       	rjmp	.+160    	; 0x440 <free+0xaa>
     3a0:	ec 01       	movw	r28, r24
     3a2:	22 97       	sbiw	r28, 0x02	; 2
     3a4:	1b 82       	std	Y+3, r1	; 0x03
     3a6:	1a 82       	std	Y+2, r1	; 0x02
     3a8:	a0 91 0b 03 	lds	r26, 0x030B
     3ac:	b0 91 0c 03 	lds	r27, 0x030C
     3b0:	10 97       	sbiw	r26, 0x00	; 0
     3b2:	09 f1       	breq	.+66     	; 0x3f6 <free+0x60>
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	ac 17       	cp	r26, r28
     3ba:	bd 07       	cpc	r27, r29
     3bc:	08 f1       	brcs	.+66     	; 0x400 <free+0x6a>
     3be:	bb 83       	std	Y+3, r27	; 0x03
     3c0:	aa 83       	std	Y+2, r26	; 0x02
     3c2:	fe 01       	movw	r30, r28
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	ae 17       	cp	r26, r30
     3ce:	bf 07       	cpc	r27, r31
     3d0:	79 f4       	brne	.+30     	; 0x3f0 <free+0x5a>
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	28 0f       	add	r18, r24
     3da:	39 1f       	adc	r19, r25
     3dc:	2e 5f       	subi	r18, 0xFE	; 254
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	39 83       	std	Y+1, r19	; 0x01
     3e2:	28 83       	st	Y, r18
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	8d 91       	ld	r24, X+
     3e8:	9c 91       	ld	r25, X
     3ea:	13 97       	sbiw	r26, 0x03	; 3
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
     3f0:	41 15       	cp	r20, r1
     3f2:	51 05       	cpc	r21, r1
     3f4:	71 f4       	brne	.+28     	; 0x412 <free+0x7c>
     3f6:	d0 93 0c 03 	sts	0x030C, r29
     3fa:	c0 93 0b 03 	sts	0x030B, r28
     3fe:	20 c0       	rjmp	.+64     	; 0x440 <free+0xaa>
     400:	12 96       	adiw	r26, 0x02	; 2
     402:	8d 91       	ld	r24, X+
     404:	9c 91       	ld	r25, X
     406:	13 97       	sbiw	r26, 0x03	; 3
     408:	ad 01       	movw	r20, r26
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	11 f0       	breq	.+4      	; 0x412 <free+0x7c>
     40e:	dc 01       	movw	r26, r24
     410:	d3 cf       	rjmp	.-90     	; 0x3b8 <free+0x22>
     412:	fa 01       	movw	r30, r20
     414:	d3 83       	std	Z+3, r29	; 0x03
     416:	c2 83       	std	Z+2, r28	; 0x02
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	e2 0f       	add	r30, r18
     41e:	f3 1f       	adc	r31, r19
     420:	ce 17       	cp	r28, r30
     422:	df 07       	cpc	r29, r31
     424:	69 f4       	brne	.+26     	; 0x440 <free+0xaa>
     426:	88 81       	ld	r24, Y
     428:	99 81       	ldd	r25, Y+1	; 0x01
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
     42e:	2e 5f       	subi	r18, 0xFE	; 254
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	fa 01       	movw	r30, r20
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <memset>:
     446:	dc 01       	movw	r26, r24
     448:	01 c0       	rjmp	.+2      	; 0x44c <memset+0x6>
     44a:	6d 93       	st	X+, r22
     44c:	41 50       	subi	r20, 0x01	; 1
     44e:	50 40       	sbci	r21, 0x00	; 0
     450:	e0 f7       	brcc	.-8      	; 0x44a <memset+0x4>
     452:	08 95       	ret

00000454 <_ZN7Display6BufferD1Ev>:
namespace Display {

class Buffer {
public:
	Buffer(){};
	virtual ~Buffer(){};
     454:	fc 01       	movw	r30, r24
     456:	88 e1       	ldi	r24, 0x18	; 24
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret

00000460 <_ZN7Display6BufferD0Ev>:
     460:	fc 01       	movw	r30, r24
     462:	88 e1       	ldi	r24, 0x18	; 24
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	80 83       	st	Z, r24
     46a:	cf 01       	movw	r24, r30
     46c:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZdlPv>
     470:	08 95       	ret

00000472 <_ZN7Display6Buffer12_printSerialEcc>:

/**
 * Prints out the buffer to the serial port.  Note that the
 *  serial port must be opened before using this function.
 */
void Buffer::_printSerial(char ones, char zeros) {
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	7c 01       	movw	r14, r24
     48c:	86 2e       	mov	r8, r22
     48e:	94 2e       	mov	r9, r20
	int height = getHeight();
     490:	dc 01       	movw	r26, r24
     492:	ed 91       	ld	r30, X+
     494:	fc 91       	ld	r31, X
     496:	04 8c       	ldd	r0, Z+28	; 0x1c
     498:	f5 8d       	ldd	r31, Z+29	; 0x1d
     49a:	e0 2d       	mov	r30, r0
     49c:	09 95       	icall
     49e:	5c 01       	movw	r10, r24
	int width = getWidth();
     4a0:	d7 01       	movw	r26, r14
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	02 8c       	ldd	r0, Z+26	; 0x1a
     4a8:	f3 8d       	ldd	r31, Z+27	; 0x1b
     4aa:	e0 2d       	mov	r30, r0
     4ac:	c7 01       	movw	r24, r14
     4ae:	09 95       	icall
     4b0:	6c 01       	movw	r12, r24
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <_ZN7Display6Buffer12_printSerialEcc+0x84>

		// Loop across the bits
		for (int w = 0; w < width; w++) {

			// Get the bit
			Color color = getBit(w, h);
     4b8:	d7 01       	movw	r26, r14
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	04 88       	ldd	r0, Z+20	; 0x14
     4c0:	f5 89       	ldd	r31, Z+21	; 0x15
     4c2:	e0 2d       	mov	r30, r0
     4c4:	c7 01       	movw	r24, r14
     4c6:	be 01       	movw	r22, r28
     4c8:	a8 01       	movw	r20, r16
     4ca:	09 95       	icall

			// Print the bit
			char bitChar = (color == WHITE) ? ones : zeros;
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <_ZN7Display6Buffer12_printSerialEcc+0x62>
     4d0:	69 2d       	mov	r22, r9
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <_ZN7Display6Buffer12_printSerialEcc+0x64>
     4d4:	68 2d       	mov	r22, r8
			Serial.print(bitChar);
     4d6:	8e ed       	ldi	r24, 0xDE	; 222
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <_ZN5Print5printEc>

	// Loop over the height
	for (int h = 0; h < height; h++) {

		// Loop across the bits
		for (int w = 0; w < width; w++) {
     4de:	21 96       	adiw	r28, 0x01	; 1
     4e0:	cc 15       	cp	r28, r12
     4e2:	dd 05       	cpc	r29, r13
     4e4:	4c f3       	brlt	.-46     	; 0x4b8 <_ZN7Display6Buffer12_printSerialEcc+0x46>
			char bitChar = (color == WHITE) ? ones : zeros;
			Serial.print(bitChar);
		}

		// Print an end-line for each row
		Serial.println("");
     4e6:	8e ed       	ldi	r24, 0xDE	; 222
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN5Print7printlnEPKc>
void Buffer::_printSerial(char ones, char zeros) {
	int height = getHeight();
	int width = getWidth();

	// Loop over the height
	for (int h = 0; h < height; h++) {
     4f2:	0f 5f       	subi	r16, 0xFF	; 255
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	0a 15       	cp	r16, r10
     4f8:	1b 05       	cpc	r17, r11
     4fa:	1c f4       	brge	.+6      	; 0x502 <__stack+0x3>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	ef cf       	rjmp	.-34     	; 0x4e0 <_ZN7Display6Buffer12_printSerialEcc+0x6e>
		}

		// Print an end-line for each row
		Serial.println("");
	}
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	08 95       	ret

0000051c <_ZN7Display8Buffer2DD1Ev>:
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
     51c:	fc 01       	movw	r30, r24
     51e:	88 e1       	ldi	r24, 0x18	; 24
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	91 83       	std	Z+1, r25	; 0x01
     524:	80 83       	st	Z, r24
}
     526:	08 95       	ret

00000528 <_ZN7Display8Buffer2D5clearEv>:

void Buffer2D::clear() {
     528:	fc 01       	movw	r30, r24
	clear(_color);
     52a:	a0 81       	ld	r26, Z
     52c:	b1 81       	ldd	r27, Z+1	; 0x01
     52e:	62 85       	ldd	r22, Z+10	; 0x0a
     530:	73 85       	ldd	r23, Z+11	; 0x0b
     532:	16 96       	adiw	r26, 0x06	; 6
     534:	2d 91       	ld	r18, X+
     536:	3c 91       	ld	r19, X
     538:	17 97       	sbiw	r26, 0x07	; 7
     53a:	f9 01       	movw	r30, r18
     53c:	09 95       	icall
}
     53e:	08 95       	ret

00000540 <_ZN7Display8Buffer2D5clearENS_5ColorE>:

void Buffer2D::clear(Color color) {
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	7c 01       	movw	r14, r24
     552:	6b 01       	movw	r12, r22
     554:	c0 e0       	ldi	r28, 0x00	; 0
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	12 c0       	rjmp	.+36     	; 0x57e <_ZN7Display8Buffer2D5clearENS_5ColorE+0x3e>

	for (int y = 0; y < _height; y++)
		_fastHLine(0, y, _width, color);
     55a:	d7 01       	movw	r26, r14
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	11 97       	sbiw	r26, 0x01	; 1
     562:	12 96       	adiw	r26, 0x02	; 2
     564:	2d 91       	ld	r18, X+
     566:	3c 91       	ld	r19, X
     568:	13 97       	sbiw	r26, 0x03	; 3
     56a:	06 8c       	ldd	r0, Z+30	; 0x1e
     56c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     56e:	e0 2d       	mov	r30, r0
     570:	c7 01       	movw	r24, r14
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	ae 01       	movw	r20, r28
     578:	86 01       	movw	r16, r12
     57a:	09 95       	icall
	clear(_color);
}

void Buffer2D::clear(Color color) {

	for (int y = 0; y < _height; y++)
     57c:	21 96       	adiw	r28, 0x01	; 1
     57e:	f7 01       	movw	r30, r14
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	c8 17       	cp	r28, r24
     586:	d9 07       	cpc	r29, r25
     588:	44 f3       	brlt	.-48     	; 0x55a <_ZN7Display8Buffer2D5clearENS_5ColorE+0x1a>
		_fastHLine(0, y, _width, color);
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <_ZN7Display8Buffer2DC1EiiiPh>:
 *  \param height The height of image buffer in pixels
 *  \param pitchBytes The number of bytes provided for each row.
 *  	This must be at least floor( (width + 7)/8 ) bytes
 *  \param buff pointer to the display buffer array
 */
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	fc 01       	movw	r30, r24
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
     5a2:	8e e3       	ldi	r24, 0x3E	; 62
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	73 83       	std	Z+3, r23	; 0x03
     5ac:	62 83       	std	Z+2, r22	; 0x02
     5ae:	55 83       	std	Z+5, r21	; 0x05
     5b0:	44 83       	std	Z+4, r20	; 0x04
     5b2:	37 83       	std	Z+7, r19	; 0x07
     5b4:	26 83       	std	Z+6, r18	; 0x06
     5b6:	11 87       	std	Z+9, r17	; 0x09
     5b8:	00 87       	std	Z+8, r16	; 0x08
     5ba:	13 86       	std	Z+11, r1	; 0x0b
     5bc:	12 86       	std	Z+10, r1	; 0x0a
	clear(_color);
     5be:	cf 01       	movw	r24, r30
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display8Buffer2D5clearENS_5ColorE>
}
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <_ZN7Display8Buffer2D9clearRectERNS_4RectE>:

	for (int y = 0; y < _height; y++)
		_fastHLine(0, y, _width, color);
}

void Buffer2D::clearRect(Rect& rect) {
     5ce:	fc 01       	movw	r30, r24
	clearRect(rect, _color);
     5d0:	a0 81       	ld	r26, Z
     5d2:	b1 81       	ldd	r27, Z+1	; 0x01
     5d4:	42 85       	ldd	r20, Z+10	; 0x0a
     5d6:	53 85       	ldd	r21, Z+11	; 0x0b
     5d8:	50 96       	adiw	r26, 0x10	; 16
     5da:	2d 91       	ld	r18, X+
     5dc:	3c 91       	ld	r19, X
     5de:	51 97       	sbiw	r26, 0x11	; 17
     5e0:	f9 01       	movw	r30, r18
     5e2:	09 95       	icall
}
     5e4:	08 95       	ret

000005e6 <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE>:

void Buffer2D::clearRect(Rect& rect, Color color) {
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	5c 01       	movw	r10, r24
     600:	7b 01       	movw	r14, r22
     602:	4a 01       	movw	r8, r20
	int lastRow = rect.y0 + rect.height;
     604:	db 01       	movw	r26, r22
     606:	12 96       	adiw	r26, 0x02	; 2
     608:	cd 91       	ld	r28, X+
     60a:	dc 91       	ld	r29, X
     60c:	13 97       	sbiw	r26, 0x03	; 3
     60e:	16 96       	adiw	r26, 0x06	; 6
     610:	cd 90       	ld	r12, X+
     612:	dc 90       	ld	r13, X
     614:	17 97       	sbiw	r26, 0x07	; 7
     616:	cc 0e       	add	r12, r28
     618:	dd 1e       	adc	r13, r29
     61a:	13 c0       	rjmp	.+38     	; 0x642 <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE+0x5c>

	// Note: fastHLine will handle input error conditions
	for (int row = rect.y0; row < lastRow; row++)
		_fastHLine(rect.x0, row, rect.width, color);
     61c:	d5 01       	movw	r26, r10
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	d7 01       	movw	r26, r14
     624:	6d 91       	ld	r22, X+
     626:	7c 91       	ld	r23, X
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	14 96       	adiw	r26, 0x04	; 4
     62c:	2d 91       	ld	r18, X+
     62e:	3c 91       	ld	r19, X
     630:	15 97       	sbiw	r26, 0x05	; 5
     632:	06 8c       	ldd	r0, Z+30	; 0x1e
     634:	f7 8d       	ldd	r31, Z+31	; 0x1f
     636:	e0 2d       	mov	r30, r0
     638:	c5 01       	movw	r24, r10
     63a:	ae 01       	movw	r20, r28
     63c:	84 01       	movw	r16, r8
     63e:	09 95       	icall

void Buffer2D::clearRect(Rect& rect, Color color) {
	int lastRow = rect.y0 + rect.height;

	// Note: fastHLine will handle input error conditions
	for (int row = rect.y0; row < lastRow; row++)
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	cc 15       	cp	r28, r12
     644:	dd 05       	cpc	r29, r13
     646:	54 f3       	brlt	.-44     	; 0x61c <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE+0x36>
		_fastHLine(rect.x0, row, rect.width, color);
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	08 95       	ret

00000662 <_ZN7Display8Buffer2D8clearRawEv>:

void Buffer2D::clearRaw() {
     662:	fc 01       	movw	r30, r24
	clearRaw(_color);
     664:	a0 81       	ld	r26, Z
     666:	b1 81       	ldd	r27, Z+1	; 0x01
     668:	62 85       	ldd	r22, Z+10	; 0x0a
     66a:	73 85       	ldd	r23, Z+11	; 0x0b
     66c:	98 96       	adiw	r26, 0x28	; 40
     66e:	2d 91       	ld	r18, X+
     670:	3c 91       	ld	r19, X
     672:	99 97       	sbiw	r26, 0x29	; 41
     674:	f9 01       	movw	r30, r18
     676:	09 95       	icall
}
     678:	08 95       	ret

0000067a <_ZN7Display8Buffer2D7setByteEjhj>:

void Buffer2D::fillRaw(uint8_t pattern) {
	memset(_buff, pattern, getSize());
}

void Buffer2D::setByte(unsigned int byteIndex, uint8_t data, unsigned int yIndex) {
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	f4 2e       	mov	r15, r20
	int i = byteIndex * (yIndex + 1);
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	26 9f       	mul	r18, r22
     68e:	80 01       	movw	r16, r0
     690:	27 9f       	mul	r18, r23
     692:	10 0d       	add	r17, r0
     694:	36 9f       	mul	r19, r22
     696:	10 0d       	add	r17, r0
     698:	11 24       	eor	r1, r1

	// Set data, if not over end of buffer
	if (i < getSize())
     69a:	e8 81       	ld	r30, Y
     69c:	f9 81       	ldd	r31, Y+1	; 0x01
     69e:	06 a4       	ldd	r0, Z+46	; 0x2e
     6a0:	f7 a5       	ldd	r31, Z+47	; 0x2f
     6a2:	e0 2d       	mov	r30, r0
     6a4:	09 95       	icall
     6a6:	08 17       	cp	r16, r24
     6a8:	19 07       	cpc	r17, r25
     6aa:	2c f4       	brge	.+10     	; 0x6b6 <_ZN7Display8Buffer2D7setByteEjhj+0x3c>
		_buff[i] = data;
     6ac:	e8 85       	ldd	r30, Y+8	; 0x08
     6ae:	f9 85       	ldd	r31, Y+9	; 0x09
     6b0:	e0 0f       	add	r30, r16
     6b2:	f1 1f       	adc	r31, r17
     6b4:	f0 82       	st	Z, r15
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	08 95       	ret

000006c2 <_ZN7Display8Buffer2D7getByteEjj>:

uint8_t Buffer2D::getByte(unsigned int byteIndex, unsigned int yIndex) {
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ec 01       	movw	r28, r24
	int i = byteIndex * (yIndex + 1);
     6cc:	4f 5f       	subi	r20, 0xFF	; 255
     6ce:	5f 4f       	sbci	r21, 0xFF	; 255
     6d0:	46 9f       	mul	r20, r22
     6d2:	80 01       	movw	r16, r0
     6d4:	47 9f       	mul	r20, r23
     6d6:	10 0d       	add	r17, r0
     6d8:	56 9f       	mul	r21, r22
     6da:	10 0d       	add	r17, r0
     6dc:	11 24       	eor	r1, r1
	uint8_t retVal(0);

	// Set data, if not over end of buffer
	if (i < getSize())
     6de:	e8 81       	ld	r30, Y
     6e0:	f9 81       	ldd	r31, Y+1	; 0x01
     6e2:	06 a4       	ldd	r0, Z+46	; 0x2e
     6e4:	f7 a5       	ldd	r31, Z+47	; 0x2f
     6e6:	e0 2d       	mov	r30, r0
     6e8:	09 95       	icall
     6ea:	08 17       	cp	r16, r24
     6ec:	19 07       	cpc	r17, r25
     6ee:	14 f0       	brlt	.+4      	; 0x6f4 <_ZN7Display8Buffer2D7getByteEjj+0x32>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <_ZN7Display8Buffer2D7getByteEjj+0x3c>
		retVal = _buff[i];
     6f4:	e8 85       	ldd	r30, Y+8	; 0x08
     6f6:	f9 85       	ldd	r31, Y+9	; 0x09
     6f8:	e0 0f       	add	r30, r16
     6fa:	f1 1f       	adc	r31, r17
     6fc:	80 81       	ld	r24, Z

	return retVal;
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <_ZN7Display8Buffer2D11printSerialEcc>:

void Buffer2D::printSerial(char ones, char zeros) {
     708:	dc 01       	movw	r26, r24
	_printSerial(ones, zeros);
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	00 a0       	ldd	r0, Z+32	; 0x20
     710:	f1 a1       	ldd	r31, Z+33	; 0x21
     712:	e0 2d       	mov	r30, r0
     714:	09 95       	icall
}
     716:	08 95       	ret

00000718 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE>:

void Buffer2D::setBit(int x, int y, Color color) {
     718:	fc 01       	movw	r30, r24
     71a:	d9 01       	movw	r26, r18
int Buffer2D::getSize() {
	return (_pitchBytes * _height);
}

bool Buffer2D::outOfBounds(int x, int y) {
	return (x >= _width || x < 0 || y >= _height || y < 0);
     71c:	82 81       	ldd	r24, Z+2	; 0x02
     71e:	93 81       	ldd	r25, Z+3	; 0x03
     720:	68 17       	cp	r22, r24
     722:	79 07       	cpc	r23, r25
     724:	b4 f5       	brge	.+108    	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     726:	77 fd       	sbrc	r23, 7
     728:	34 c0       	rjmp	.+104    	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	95 81       	ldd	r25, Z+5	; 0x05
     72e:	48 17       	cp	r20, r24
     730:	59 07       	cpc	r21, r25
     732:	7c f5       	brge	.+94     	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     734:	57 ff       	sbrs	r21, 7
     736:	07 c0       	rjmp	.+14     	; 0x746 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x2e>
     738:	08 95       	ret

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));

	if (color == WHITE) {
		*bitBytePtr |= bit;  // set the bit
     73a:	28 2b       	or	r18, r24
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x2a>
	} else {
		*bitBytePtr &= ~bit; // clear the bit
     73e:	80 95       	com	r24
     740:	28 23       	and	r18, r24
     742:	20 83       	st	Z, r18
     744:	08 95       	ret
	// Check input variables
	if (outOfBounds(x, y))
		return;

	// Get byte pointer that contains the bit
	uint8_t* bitBytePtr = _buff + (_pitchBytes * y) + (x / 8);
     746:	86 81       	ldd	r24, Z+6	; 0x06
     748:	97 81       	ldd	r25, Z+7	; 0x07
     74a:	9c 01       	movw	r18, r24
     74c:	42 9f       	mul	r20, r18
     74e:	c0 01       	movw	r24, r0
     750:	43 9f       	mul	r20, r19
     752:	90 0d       	add	r25, r0
     754:	52 9f       	mul	r21, r18
     756:	90 0d       	add	r25, r0
     758:	11 24       	eor	r1, r1
     75a:	9b 01       	movw	r18, r22
     75c:	43 e0       	ldi	r20, 0x03	; 3
     75e:	35 95       	asr	r19
     760:	27 95       	ror	r18
     762:	4a 95       	dec	r20
     764:	e1 f7       	brne	.-8      	; 0x75e <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x46>
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	00 84       	ldd	r0, Z+8	; 0x08
     76c:	f1 85       	ldd	r31, Z+9	; 0x09
     76e:	e0 2d       	mov	r30, r0
     770:	e8 0f       	add	r30, r24
     772:	f9 1f       	adc	r31, r25

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));
     774:	60 95       	com	r22
     776:	70 95       	com	r23
     778:	67 70       	andi	r22, 0x07	; 7
     77a:	70 70       	andi	r23, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	02 c0       	rjmp	.+4      	; 0x786 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x6e>
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	6a 95       	dec	r22
     788:	e2 f7       	brpl	.-8      	; 0x782 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x6a>
     78a:	20 81       	ld	r18, Z

	if (color == WHITE) {
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	b9 f6       	brne	.-82     	; 0x73e <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x26>
     790:	d4 cf       	rjmp	.-88     	; 0x73a <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x22>
     792:	08 95       	ret

00000794 <_ZN7Display8Buffer2D6getBitEii>:
	} else {
		*bitBytePtr &= ~bit; // clear the bit
	}
}

Color Buffer2D::getBit(int x, int y) {
     794:	fc 01       	movw	r30, r24
int Buffer2D::getSize() {
	return (_pitchBytes * _height);
}

bool Buffer2D::outOfBounds(int x, int y) {
	return (x >= _width || x < 0 || y >= _height || y < 0);
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	68 17       	cp	r22, r24
     79c:	79 07       	cpc	r23, r25
     79e:	4c f4       	brge	.+18     	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7a0:	77 fd       	sbrc	r23, 7
     7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7a4:	84 81       	ldd	r24, Z+4	; 0x04
     7a6:	95 81       	ldd	r25, Z+5	; 0x05
     7a8:	48 17       	cp	r20, r24
     7aa:	59 07       	cpc	r21, r25
     7ac:	14 f4       	brge	.+4      	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7ae:	57 ff       	sbrs	r21, 7
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <_ZN7Display8Buffer2D6getBitEii+0x24>

Color Buffer2D::getBit(int x, int y) {

	// Check input variables
	if (outOfBounds(x, y))
		return _color;
     7b2:	82 85       	ldd	r24, Z+10	; 0x0a
     7b4:	93 85       	ldd	r25, Z+11	; 0x0b

	// Shift the byte to extract the desired bit
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}
     7b6:	08 95       	ret

Color Buffer2D::getBit(int x, int y) {

	// Check input variables
	if (outOfBounds(x, y))
		return _color;
     7b8:	86 81       	ldd	r24, Z+6	; 0x06
     7ba:	97 81       	ldd	r25, Z+7	; 0x07
     7bc:	9c 01       	movw	r18, r24
     7be:	42 9f       	mul	r20, r18
     7c0:	c0 01       	movw	r24, r0
     7c2:	43 9f       	mul	r20, r19
     7c4:	90 0d       	add	r25, r0
     7c6:	52 9f       	mul	r21, r18
     7c8:	90 0d       	add	r25, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	9b 01       	movw	r18, r22
     7ce:	53 e0       	ldi	r21, 0x03	; 3
     7d0:	35 95       	asr	r19
     7d2:	27 95       	ror	r18
     7d4:	5a 95       	dec	r21
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <_ZN7Display8Buffer2D6getBitEii+0x3c>
     7d8:	00 84       	ldd	r0, Z+8	; 0x08
     7da:	f1 85       	ldd	r31, Z+9	; 0x09
     7dc:	e0 2d       	mov	r30, r0
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	80 81       	ld	r24, Z
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	67 70       	andi	r22, 0x07	; 7
     7ec:	70 70       	andi	r23, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_ZN7Display8Buffer2D6getBitEii+0x60>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	6a 95       	dec	r22
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <_ZN7Display8Buffer2D6getBitEii+0x5c>
     7f8:	88 1f       	adc	r24, r24
     7fa:	88 27       	eor	r24, r24
     7fc:	88 1f       	adc	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	08 95       	ret

00000802 <_ZN7Display8Buffer2D7set8BitEiih>:
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}

void Buffer2D::set8Bit(int x, int y, uint8_t data) {
     802:	bf 92       	push	r11
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	ec 01       	movw	r28, r24
     816:	8a 01       	movw	r16, r20
     818:	b2 2e       	mov	r11, r18

	uint8_t bits1(data), bits2(data);

	// Return if non-existent row
	if (y >= _height || y < 0)
     81a:	8c 81       	ldd	r24, Y+4	; 0x04
     81c:	9d 81       	ldd	r25, Y+5	; 0x05
     81e:	48 17       	cp	r20, r24
     820:	59 07       	cpc	r21, r25
     822:	0c f0       	brlt	.+2      	; 0x826 <_ZN7Display8Buffer2D7set8BitEiih+0x24>
     824:	9a c0       	rjmp	.+308    	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>
     826:	57 fd       	sbrc	r21, 7
     828:	98 c0       	rjmp	.+304    	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>
		return;

	// Special case for negative x-index
	if (x < 0) {
     82a:	77 ff       	sbrs	r23, 7
     82c:	2c c0       	rjmp	.+88     	; 0x886 <_ZN7Display8Buffer2D7set8BitEiih+0x84>
		int bitsInBuffer = x + 8;
     82e:	68 5f       	subi	r22, 0xF8	; 248
     830:	7f 4f       	sbci	r23, 0xFF	; 255

		// If there are bits to set within the buffer
		if (bitsInBuffer > 0) {
     832:	16 16       	cp	r1, r22
     834:	17 06       	cpc	r1, r23
     836:	0c f0       	brlt	.+2      	; 0x83a <_ZN7Display8Buffer2D7set8BitEiih+0x38>
     838:	90 c0       	rjmp	.+288    	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>

			// Get the pointer to the first 8 bits in the row
			uint8_t* firstBitsInRow = _buff + (y * _pitchBytes);
     83a:	8e 81       	ldd	r24, Y+6	; 0x06
     83c:	9f 81       	ldd	r25, Y+7	; 0x07
     83e:	9c 01       	movw	r18, r24
     840:	42 9f       	mul	r20, r18
     842:	c0 01       	movw	r24, r0
     844:	43 9f       	mul	r20, r19
     846:	90 0d       	add	r25, r0
     848:	52 9f       	mul	r21, r18
     84a:	90 0d       	add	r25, r0
     84c:	11 24       	eor	r1, r1
     84e:	e8 85       	ldd	r30, Y+8	; 0x08
     850:	f9 85       	ldd	r31, Y+9	; 0x09
     852:	e8 0f       	add	r30, r24
     854:	f9 1f       	adc	r31, r25

			// Shift the data bits to the proper position
			bits1 <<= (8 - bitsInBuffer);

			// Set the bits in the buffer
			*firstBitsInRow |= bits1;
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	06 2e       	mov	r0, r22
     85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZN7Display8Buffer2D7set8BitEiih+0x60>
     85e:	95 95       	asr	r25
     860:	87 95       	ror	r24
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <_ZN7Display8Buffer2D7set8BitEiih+0x5c>
     866:	40 81       	ld	r20, Z
     868:	48 23       	and	r20, r24
     86a:	2b 2d       	mov	r18, r11
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	86 1b       	sub	r24, r22
     874:	97 0b       	sbc	r25, r23
     876:	02 c0       	rjmp	.+4      	; 0x87c <_ZN7Display8Buffer2D7set8BitEiih+0x7a>
     878:	22 0f       	add	r18, r18
     87a:	33 1f       	adc	r19, r19
     87c:	8a 95       	dec	r24
     87e:	e2 f7       	brpl	.-8      	; 0x878 <_ZN7Display8Buffer2D7set8BitEiih+0x76>
     880:	42 2b       	or	r20, r18
     882:	40 83       	st	Z, r20
     884:	6a c0       	rjmp	.+212    	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>

		return;
	}

	// Calculate the index information into the byte array
	uint8_t byteIndex = x / 8;
     886:	cb 01       	movw	r24, r22
     888:	e3 e0       	ldi	r30, 0x03	; 3
     88a:	95 95       	asr	r25
     88c:	87 95       	ror	r24
     88e:	ea 95       	dec	r30
     890:	e1 f7       	brne	.-8      	; 0x88a <_ZN7Display8Buffer2D7set8BitEiih+0x88>
     892:	f8 2e       	mov	r15, r24
	uint8_t byteRem = x % 8;
     894:	77 e0       	ldi	r23, 0x07	; 7
     896:	d7 2e       	mov	r13, r23
     898:	d6 22       	and	r13, r22

	// Calculate the row's last byte's index
	uint8_t lastByteIndex = _pitchBytes - 1;
     89a:	ee 81       	ldd	r30, Y+6	; 0x06
     89c:	ff 81       	ldd	r31, Y+7	; 0x07
     89e:	ee 2e       	mov	r14, r30
     8a0:	ea 94       	dec	r14

	// Calculate the mask for bits beyond display width
	uint8_t maskBits = 0xFF << (8 - _width % 8);
     8a2:	28 e0       	ldi	r18, 0x08	; 8
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	9b 81       	ldd	r25, Y+3	; 0x03
     8aa:	68 e0       	ldi	r22, 0x08	; 8
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 21 0c 	call	0x1842	; 0x1842 <__divmodhi4>
     8b2:	28 1b       	sub	r18, r24
     8b4:	39 0b       	sbc	r19, r25
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <_ZN7Display8Buffer2D7set8BitEiih+0xbe>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	2a 95       	dec	r18
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <_ZN7Display8Buffer2D7set8BitEiih+0xba>
     8c4:	c8 2e       	mov	r12, r24

	// Get byte that will contain the most significant part of the 8 bits
	uint8_t* bitsByte1 = _buff + (_pitchBytes * y) + byteIndex;
     8c6:	0e 9f       	mul	r16, r30
     8c8:	c0 01       	movw	r24, r0
     8ca:	0f 9f       	mul	r16, r31
     8cc:	90 0d       	add	r25, r0
     8ce:	1e 9f       	mul	r17, r30
     8d0:	90 0d       	add	r25, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	8f 0d       	add	r24, r15
     8d6:	91 1d       	adc	r25, r1
     8d8:	e8 85       	ldd	r30, Y+8	; 0x08
     8da:	f9 85       	ldd	r31, Y+9	; 0x09
     8dc:	e8 0f       	add	r30, r24
     8de:	f9 1f       	adc	r31, r25

	// Shift data bits to align for saving into first byte
	bits1 >>= byteRem;
     8e0:	6b 2d       	mov	r22, r11
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	ad 2d       	mov	r26, r13
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	cb 01       	movw	r24, r22
     8ea:	0d 2c       	mov	r0, r13
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <_ZN7Display8Buffer2D7set8BitEiih+0xf0>
     8ee:	95 95       	asr	r25
     8f0:	87 95       	ror	r24
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <_ZN7Display8Buffer2D7set8BitEiih+0xec>
     8f6:	38 2f       	mov	r19, r24

	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
     8f8:	fe 14       	cp	r15, r14
     8fa:	09 f4       	brne	.+2      	; 0x8fe <_ZN7Display8Buffer2D7set8BitEiih+0xfc>
		bits1 &= maskBits;
     8fc:	3c 21       	and	r19, r12

	// Clear the bits to set
	*bitsByte1 &= (0xFF << (8 - byteRem));
     8fe:	48 e0       	ldi	r20, 0x08	; 8
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	4a 1b       	sub	r20, r26
     904:	5b 0b       	sbc	r21, r27

	// Set the first byte containing some of the 8 bits
	*bitsByte1 |= bits1;
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	04 2e       	mov	r0, r20
     90c:	02 c0       	rjmp	.+4      	; 0x912 <_ZN7Display8Buffer2D7set8BitEiih+0x110>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <_ZN7Display8Buffer2D7set8BitEiih+0x10c>
     916:	20 81       	ld	r18, Z
     918:	28 23       	and	r18, r24
     91a:	32 2b       	or	r19, r18
     91c:	30 83       	st	Z, r19

	// If we need to set bits in the following byte as well
	if (byteRem > 0 && (byteIndex < lastByteIndex)) {
     91e:	dd 20       	and	r13, r13
     920:	e1 f0       	breq	.+56     	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>
     922:	fe 14       	cp	r15, r14
     924:	d0 f4       	brcc	.+52     	; 0x95a <_ZN7Display8Buffer2D7set8BitEiih+0x158>

		// Get byte that will contain the least significant part of the 8 bits
		uint8_t* bitsByte2 = bitsByte1 + 1;

		// Shift data bits to align for saving into second byte
		bits2 <<= (8 - byteRem);
     926:	02 c0       	rjmp	.+4      	; 0x92c <_ZN7Display8Buffer2D7set8BitEiih+0x12a>
     928:	66 0f       	add	r22, r22
     92a:	77 1f       	adc	r23, r23
     92c:	4a 95       	dec	r20
     92e:	e2 f7       	brpl	.-8      	; 0x928 <_ZN7Display8Buffer2D7set8BitEiih+0x126>
     930:	46 2f       	mov	r20, r22

		// Mask out bits beyond width of display
		if (byteIndex + 1 == lastByteIndex)
     932:	8f 2d       	mov	r24, r15
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	2e 2d       	mov	r18, r14
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	82 17       	cp	r24, r18
     93e:	93 07       	cpc	r25, r19
     940:	09 f4       	brne	.+2      	; 0x944 <_ZN7Display8Buffer2D7set8BitEiih+0x142>
			bits2 &= maskBits;
     942:	4c 21       	and	r20, r12

		// Clear the bits to set
		*bitsByte2 &= (0xFF >> byteRem);

		// Set the second byte containing the rest of the 8 bits
		*bitsByte2 |= bits2;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <_ZN7Display8Buffer2D7set8BitEiih+0x14c>
     94a:	95 95       	asr	r25
     94c:	87 95       	ror	r24
     94e:	aa 95       	dec	r26
     950:	e2 f7       	brpl	.-8      	; 0x94a <_ZN7Display8Buffer2D7set8BitEiih+0x148>
     952:	21 81       	ldd	r18, Z+1	; 0x01
     954:	28 23       	and	r18, r24
     956:	42 2b       	or	r20, r18
     958:	41 83       	std	Z+1, r20	; 0x01
	}
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	08 95       	ret

0000096e <_ZN7Display8Buffer2D7get8BitEii>:

uint8_t Buffer2D::get8Bit(int x, int y) {
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ec 01       	movw	r28, r24
     97c:	8a 01       	movw	r16, r20

	uint8_t bits1(0), bits2(0);

	// Return if non-existent row
	if (y >= _height || y < 0)
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	48 17       	cp	r20, r24
     984:	59 07       	cpc	r21, r25
     986:	14 f4       	brge	.+4      	; 0x98c <_ZN7Display8Buffer2D7get8BitEii+0x1e>
     988:	57 ff       	sbrs	r21, 7
     98a:	07 c0       	rjmp	.+14     	; 0x99a <_ZN7Display8Buffer2D7get8BitEii+0x2c>
		return (_color == BLACK) ? 0xFF : 0x00;
     98c:	8a 85       	ldd	r24, Y+10	; 0x0a
     98e:	9b 85       	ldd	r25, Y+11	; 0x0b
     990:	89 2b       	or	r24, r25
     992:	09 f0       	breq	.+2      	; 0x996 <_ZN7Display8Buffer2D7get8BitEii+0x28>
     994:	7b c0       	rjmp	.+246    	; 0xa8c <_ZN7Display8Buffer2D7get8BitEii+0x11e>
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	7a c0       	rjmp	.+244    	; 0xa8e <_ZN7Display8Buffer2D7get8BitEii+0x120>

	// Special case for negative x-index
	if (x < 0) {
     99a:	77 ff       	sbrs	r23, 7
     99c:	21 c0       	rjmp	.+66     	; 0x9e0 <_ZN7Display8Buffer2D7get8BitEii+0x72>
		uint8_t retNeg(0);
		int bitsInBuffer = x + 8;
     99e:	68 5f       	subi	r22, 0xF8	; 248
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255

		// If there are requested bits within the buffer
		if (bitsInBuffer > 0) {
     9a2:	16 16       	cp	r1, r22
     9a4:	17 06       	cpc	r1, r23
     9a6:	0c f0       	brlt	.+2      	; 0x9aa <_ZN7Display8Buffer2D7get8BitEii+0x3c>
     9a8:	71 c0       	rjmp	.+226    	; 0xa8c <_ZN7Display8Buffer2D7get8BitEii+0x11e>

			// Get the first 8 bits in the row
			uint8_t firstBitsInRow = _buff[y * _pitchBytes];

			// Shift the bits to the proper position
			retNeg = firstBitsInRow >> (8 - bitsInBuffer);
     9aa:	8e 81       	ldd	r24, Y+6	; 0x06
     9ac:	9f 81       	ldd	r25, Y+7	; 0x07
     9ae:	9c 01       	movw	r18, r24
     9b0:	42 9f       	mul	r20, r18
     9b2:	c0 01       	movw	r24, r0
     9b4:	43 9f       	mul	r20, r19
     9b6:	90 0d       	add	r25, r0
     9b8:	52 9f       	mul	r21, r18
     9ba:	90 0d       	add	r25, r0
     9bc:	11 24       	eor	r1, r1
     9be:	e8 85       	ldd	r30, Y+8	; 0x08
     9c0:	f9 85       	ldd	r31, Y+9	; 0x09
     9c2:	e8 0f       	add	r30, r24
     9c4:	f9 1f       	adc	r31, r25
     9c6:	20 81       	ld	r18, Z
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	88 e0       	ldi	r24, 0x08	; 8
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	86 1b       	sub	r24, r22
     9d0:	97 0b       	sbc	r25, r23
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <_ZN7Display8Buffer2D7get8BitEii+0x6a>
     9d4:	35 95       	asr	r19
     9d6:	27 95       	ror	r18
     9d8:	8a 95       	dec	r24
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <_ZN7Display8Buffer2D7get8BitEii+0x66>
     9dc:	82 2f       	mov	r24, r18
     9de:	57 c0       	rjmp	.+174    	; 0xa8e <_ZN7Display8Buffer2D7get8BitEii+0x120>

		return retNeg;
	}

	// Calculate the index information into the byte array
	uint8_t byteIndex = x / 8;
     9e0:	cb 01       	movw	r24, r22
     9e2:	f3 e0       	ldi	r31, 0x03	; 3
     9e4:	95 95       	asr	r25
     9e6:	87 95       	ror	r24
     9e8:	fa 95       	dec	r31
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <_ZN7Display8Buffer2D7get8BitEii+0x76>
     9ec:	f8 2e       	mov	r15, r24
	uint8_t byteRem = x % 8;
     9ee:	46 2f       	mov	r20, r22
     9f0:	47 70       	andi	r20, 0x07	; 7

	// Calculate the row's last byte's index
	uint8_t lastByteIndex = _pitchBytes - 1;
     9f2:	ee 81       	ldd	r30, Y+6	; 0x06
     9f4:	ff 81       	ldd	r31, Y+7	; 0x07
     9f6:	ee 2e       	mov	r14, r30
     9f8:	ea 94       	dec	r14

	// Calculate the mask for bits beyond display width
	uint8_t maskBits = 0xFF << (8 - _width % 8);
     9fa:	28 e0       	ldi	r18, 0x08	; 8
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	68 e0       	ldi	r22, 0x08	; 8
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	0e 94 21 0c 	call	0x1842	; 0x1842 <__divmodhi4>
     a0a:	28 1b       	sub	r18, r24
     a0c:	39 0b       	sbc	r19, r25
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <_ZN7Display8Buffer2D7get8BitEii+0xaa>
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	2a 95       	dec	r18
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <_ZN7Display8Buffer2D7get8BitEii+0xa6>
     a1c:	a8 2f       	mov	r26, r24

	// Get byte that contains the most significant part of the 8-bits
	uint8_t* bitsByte1 = _buff + (_pitchBytes * y) + byteIndex;
     a1e:	0e 9f       	mul	r16, r30
     a20:	c0 01       	movw	r24, r0
     a22:	0f 9f       	mul	r16, r31
     a24:	90 0d       	add	r25, r0
     a26:	1e 9f       	mul	r17, r30
     a28:	90 0d       	add	r25, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	8f 0d       	add	r24, r15
     a2e:	91 1d       	adc	r25, r1
     a30:	e8 85       	ldd	r30, Y+8	; 0x08
     a32:	f9 85       	ldd	r31, Y+9	; 0x09
     a34:	e8 0f       	add	r30, r24
     a36:	f9 1f       	adc	r31, r25

	// Get 1st Byte containing bits
	bits1 = *bitsByte1;
     a38:	50 81       	ld	r21, Z

	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
     a3a:	fe 14       	cp	r15, r14
     a3c:	09 f4       	brne	.+2      	; 0xa40 <_ZN7Display8Buffer2D7get8BitEii+0xd2>
		bits1 &= maskBits;
     a3e:	5a 23       	and	r21, r26

	// Shift the bits by the remainder to realign left
	bits1 <<= byteRem;
     a40:	64 2f       	mov	r22, r20
     a42:	70 e0       	ldi	r23, 0x00	; 0

	// If we need data from the following byte as well
	if (byteRem > 0 && (byteIndex < lastByteIndex)) {
     a44:	44 23       	and	r20, r20
     a46:	c1 f0       	breq	.+48     	; 0xa78 <_ZN7Display8Buffer2D7get8BitEii+0x10a>
     a48:	fe 14       	cp	r15, r14
     a4a:	b0 f4       	brcc	.+44     	; 0xa78 <_ZN7Display8Buffer2D7get8BitEii+0x10a>

		// Get byte that contains the least significant part of the 8 bits
		uint8_t* bitsByte2 = bitsByte1 + 1;

		// Get 2nd Byte containing bits
		bits2 = *bitsByte2;
     a4c:	41 81       	ldd	r20, Z+1	; 0x01

		// Mask out bits beyond width of display
		if (byteIndex + 1 == lastByteIndex)
     a4e:	8f 2d       	mov	r24, r15
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	2e 2d       	mov	r18, r14
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	82 17       	cp	r24, r18
     a5a:	93 07       	cpc	r25, r19
     a5c:	09 f4       	brne	.+2      	; 0xa60 <_ZN7Display8Buffer2D7get8BitEii+0xf2>
			bits2 &= maskBits;
     a5e:	4a 23       	and	r20, r26

		// Shift the byte to extract the desired bits
		bits2 >>= (8 - byteRem);
     a60:	24 2f       	mov	r18, r20
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	86 1b       	sub	r24, r22
     a6a:	97 0b       	sbc	r25, r23
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <_ZN7Display8Buffer2D7get8BitEii+0x104>
     a6e:	35 95       	asr	r19
     a70:	27 95       	ror	r18
     a72:	8a 95       	dec	r24
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <_ZN7Display8Buffer2D7get8BitEii+0x100>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <_ZN7Display8Buffer2D7get8BitEii+0x10c>
     a78:	20 e0       	ldi	r18, 0x00	; 0
	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
		bits1 &= maskBits;

	// Shift the bits by the remainder to realign left
	bits1 <<= byteRem;
     a7a:	85 2f       	mov	r24, r21
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <_ZN7Display8Buffer2D7get8BitEii+0x116>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	6a 95       	dec	r22
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <_ZN7Display8Buffer2D7get8BitEii+0x112>

		// Shift the byte to extract the desired bits
		bits2 >>= (8 - byteRem);
	}

	return bits1 | bits2;
     a88:	82 2b       	or	r24, r18
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <_ZN7Display8Buffer2D7get8BitEii+0x120>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <_ZN7Display8Buffer2D8setColorENS_5ColorE>:
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
	memset(buff, writeVal, bytes);
}

void Buffer2D::setColor(Color color) {
	_color = color;
     a9c:	fc 01       	movw	r30, r24
     a9e:	73 87       	std	Z+11, r23	; 0x0b
     aa0:	62 87       	std	Z+10, r22	; 0x0a
}
     aa2:	08 95       	ret

00000aa4 <_ZN7Display8Buffer2D8getColorEv>:

Color Buffer2D::getColor() {
     aa4:	fc 01       	movw	r30, r24
	return _color;
}
     aa6:	82 85       	ldd	r24, Z+10	; 0x0a
     aa8:	93 85       	ldd	r25, Z+11	; 0x0b
     aaa:	08 95       	ret

00000aac <_ZN7Display8Buffer2D8getWidthEv>:

int Buffer2D::getWidth() {
     aac:	fc 01       	movw	r30, r24
	return _width;
}
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	08 95       	ret

00000ab4 <_ZN7Display8Buffer2D9getHeightEv>:

int Buffer2D::getHeight() {
     ab4:	fc 01       	movw	r30, r24
	return _height;
}
     ab6:	84 81       	ldd	r24, Z+4	; 0x04
     ab8:	95 81       	ldd	r25, Z+5	; 0x05
     aba:	08 95       	ret

00000abc <_ZN7Display8Buffer2D13getPitchBytesEv>:

int Buffer2D::getPitchBytes() {
     abc:	fc 01       	movw	r30, r24
	return _pitchBytes;
}
     abe:	86 81       	ldd	r24, Z+6	; 0x06
     ac0:	97 81       	ldd	r25, Z+7	; 0x07
     ac2:	08 95       	ret

00000ac4 <_ZN7Display8Buffer2D7getSizeEv>:

int Buffer2D::getSize() {
     ac4:	fc 01       	movw	r30, r24
     ac6:	24 81       	ldd	r18, Z+4	; 0x04
     ac8:	35 81       	ldd	r19, Z+5	; 0x05
     aca:	86 81       	ldd	r24, Z+6	; 0x06
     acc:	97 81       	ldd	r25, Z+7	; 0x07
     ace:	a9 01       	movw	r20, r18
     ad0:	48 9f       	mul	r20, r24
     ad2:	90 01       	movw	r18, r0
     ad4:	49 9f       	mul	r20, r25
     ad6:	30 0d       	add	r19, r0
     ad8:	58 9f       	mul	r21, r24
     ada:	30 0d       	add	r19, r0
     adc:	11 24       	eor	r1, r1
	return (_pitchBytes * _height);
}
     ade:	c9 01       	movw	r24, r18
     ae0:	08 95       	ret

00000ae2 <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>:
			setBit(lastBitsX + i, y, color);
	}
}

void Buffer2D::memsetColor(uint8_t* buff, Color color, size_t bytes) {
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
     ae2:	41 30       	cpi	r20, 0x01	; 1
     ae4:	51 05       	cpc	r21, r1
     ae6:	11 f0       	breq	.+4      	; 0xaec <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj+0xa>
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	01 c0       	rjmp	.+2      	; 0xaee <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj+0xc>
     aec:	4f ef       	ldi	r20, 0xFF	; 255
	memset(buff, writeVal, bytes);
     aee:	cb 01       	movw	r24, r22
     af0:	64 2f       	mov	r22, r20
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	a9 01       	movw	r20, r18
     af6:	0e 94 23 02 	call	0x446	; 0x446 <memset>
}
     afa:	08 95       	ret

00000afc <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE>:
	}

	return bits1 | bits2;
}

void Buffer2D::_fastHLine(int x, int y, int width, Color color) {
     afc:	2f 92       	push	r2
     afe:	3f 92       	push	r3
     b00:	4f 92       	push	r4
     b02:	5f 92       	push	r5
     b04:	6f 92       	push	r6
     b06:	7f 92       	push	r7
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x26>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	5c 01       	movw	r10, r24
     b2a:	7b 83       	std	Y+3, r23	; 0x03
     b2c:	6a 83       	std	Y+2, r22	; 0x02
     b2e:	2a 01       	movw	r4, r20
     b30:	79 01       	movw	r14, r18
     b32:	18 01       	movw	r2, r16

	// Handle out-of-bounds X
	if (x > _width)
     b34:	dc 01       	movw	r26, r24
     b36:	12 96       	adiw	r26, 0x02	; 2
     b38:	ed 91       	ld	r30, X+
     b3a:	fc 91       	ld	r31, X
     b3c:	13 97       	sbiw	r26, 0x03	; 3
     b3e:	e6 17       	cp	r30, r22
     b40:	f7 07       	cpc	r31, r23
     b42:	0c f4       	brge	.+2      	; 0xb46 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x4a>
     b44:	c2 c0       	rjmp	.+388    	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Handle out-of-bounds Y
	if (y < 0 || y >= _height)
     b46:	57 fd       	sbrc	r21, 7
     b48:	c0 c0       	rjmp	.+384    	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
     b4a:	14 96       	adiw	r26, 0x04	; 4
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	15 97       	sbiw	r26, 0x05	; 5
     b52:	48 17       	cp	r20, r24
     b54:	59 07       	cpc	r21, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x5e>
     b58:	b8 c0       	rjmp	.+368    	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Handle 0-width
	if (width == 0)
     b5a:	21 15       	cp	r18, r1
     b5c:	31 05       	cpc	r19, r1
     b5e:	09 f4       	brne	.+2      	; 0xb62 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x66>
     b60:	b4 c0       	rjmp	.+360    	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Handle negative width
	if (width < 0) {
     b62:	37 ff       	sbrs	r19, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x7c>
		width = abs(width);
     b66:	f0 94       	com	r15
     b68:	e1 94       	neg	r14
     b6a:	f1 08       	sbc	r15, r1
     b6c:	f3 94       	inc	r15
		x -= width;
     b6e:	ab 01       	movw	r20, r22
     b70:	4e 19       	sub	r20, r14
     b72:	5f 09       	sbc	r21, r15
     b74:	5b 83       	std	Y+3, r21	; 0x03
     b76:	4a 83       	std	Y+2, r20	; 0x02
	}

	// Handle negative X
	if (x < 0) {
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	9b 81       	ldd	r25, Y+3	; 0x03
     b7c:	97 ff       	sbrs	r25, 7
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x90>
		if (x + width < 0)
     b80:	e8 0e       	add	r14, r24
     b82:	f9 1e       	adc	r15, r25
     b84:	f7 fc       	sbrc	r15, 7
     b86:	a1 c0       	rjmp	.+322    	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
			return;
     b88:	1b 82       	std	Y+3, r1	; 0x03
     b8a:	1a 82       	std	Y+2, r1	; 0x02
		width = x + width;
		x = 0;
	}

	// Handle out-of-bounds width
	if (x + width > _width)
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	8e 0d       	add	r24, r14
     b92:	9f 1d       	adc	r25, r15
     b94:	e8 17       	cp	r30, r24
     b96:	f9 07       	cpc	r31, r25
     b98:	2c f4       	brge	.+10     	; 0xba4 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0xa8>
		width = _width - x;
     b9a:	7f 01       	movw	r14, r30
     b9c:	aa 81       	ldd	r26, Y+2	; 0x02
     b9e:	bb 81       	ldd	r27, Y+3	; 0x03
     ba0:	ea 1a       	sub	r14, r26
     ba2:	fb 0a       	sbc	r15, r27

	// Calculate indexes
	uint8_t startRem = x % 8;
     ba4:	2a 81       	ldd	r18, Y+2	; 0x02
     ba6:	3b 81       	ldd	r19, Y+3	; 0x03
     ba8:	27 70       	andi	r18, 0x07	; 7
     baa:	30 70       	andi	r19, 0x00	; 0
     bac:	62 2e       	mov	r6, r18
	uint8_t endRem = (x + width) % 8;
     bae:	8a 80       	ldd	r8, Y+2	; 0x02
     bb0:	9b 80       	ldd	r9, Y+3	; 0x03
     bb2:	8e 0c       	add	r8, r14
     bb4:	9f 1c       	adc	r9, r15
     bb6:	c4 01       	movw	r24, r8
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 21 0c 	call	0x1842	; 0x1842 <__divmodhi4>
     bc0:	89 83       	std	Y+1, r24	; 0x01

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
     bc2:	22 23       	and	r18, r18
     bc4:	59 f4       	brne	.+22     	; 0xbdc <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0xe0>
     bc6:	b8 e0       	ldi	r27, 0x08	; 8
     bc8:	eb 16       	cp	r14, r27
     bca:	f1 04       	cpc	r15, r1
     bcc:	3c f0       	brlt	.+14     	; 0xbdc <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0xe0>
     bce:	77 24       	eor	r7, r7
     bd0:	e8 15       	cp	r30, r8
     bd2:	f9 05       	cpc	r31, r9
     bd4:	24 f0       	brlt	.+8      	; 0xbde <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0xe2>
     bd6:	77 24       	eor	r7, r7
     bd8:	73 94       	inc	r7
     bda:	1f c0       	rjmp	.+62     	; 0xc1a <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x11e>
     bdc:	77 24       	eor	r7, r7
	if (!fullByte1) {
     bde:	00 e0       	ldi	r16, 0x00	; 0
     be0:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     be2:	b8 e0       	ldi	r27, 0x08	; 8
     be4:	cb 2e       	mov	r12, r27
     be6:	d1 2c       	mov	r13, r1
     be8:	c6 18       	sub	r12, r6
     bea:	d1 08       	sbc	r13, r1
     bec:	10 c0       	rjmp	.+32     	; 0xc0e <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x112>
			setBit(x + i, y, color);
     bee:	d5 01       	movw	r26, r10
     bf0:	ed 91       	ld	r30, X+
     bf2:	fc 91       	ld	r31, X
     bf4:	6a 81       	ldd	r22, Y+2	; 0x02
     bf6:	7b 81       	ldd	r23, Y+3	; 0x03
     bf8:	60 0f       	add	r22, r16
     bfa:	71 1f       	adc	r23, r17
     bfc:	02 88       	ldd	r0, Z+18	; 0x12
     bfe:	f3 89       	ldd	r31, Z+19	; 0x13
     c00:	e0 2d       	mov	r30, r0
     c02:	c5 01       	movw	r24, r10
     c04:	a2 01       	movw	r20, r4
     c06:	91 01       	movw	r18, r2
     c08:	09 95       	icall
	uint8_t endRem = (x + width) % 8;

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
	if (!fullByte1) {
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     c0a:	0f 5f       	subi	r16, 0xFF	; 255
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	0e 15       	cp	r16, r14
     c10:	1f 05       	cpc	r17, r15
     c12:	1c f4       	brge	.+6      	; 0xc1a <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x11e>
     c14:	0c 15       	cp	r16, r12
     c16:	1d 05       	cpc	r17, r13
     c18:	54 f3       	brlt	.-44     	; 0xbee <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0xf2>
			setBit(x + i, y, color);
	}

	// Write the middle byte-aligned 8-bit blocks (fast)
	uint8_t nMiddleBytes = (width - (8 - startRem) - endRem) / 8 + fullByte1;
     c1a:	06 2d       	mov	r16, r6
     c1c:	10 e0       	ldi	r17, 0x00	; 0
     c1e:	b9 81       	ldd	r27, Y+1	; 0x01
     c20:	cb 2e       	mov	r12, r27
     c22:	dd 24       	eor	r13, r13
     c24:	c8 01       	movw	r24, r16
     c26:	08 97       	sbiw	r24, 0x08	; 8
     c28:	8e 0d       	add	r24, r14
     c2a:	9f 1d       	adc	r25, r15
     c2c:	8c 19       	sub	r24, r12
     c2e:	9d 09       	sbc	r25, r13
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	0e 94 21 0c 	call	0x1842	; 0x1842 <__divmodhi4>
     c38:	26 2f       	mov	r18, r22
     c3a:	27 0d       	add	r18, r7
	if (nMiddleBytes > 0) {
     c3c:	31 f1       	breq	.+76     	; 0xc8a <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x18e>
		uint8_t* middleByte = _buff + (y * _pitchBytes) + ((x + 7) / 8);
		memsetColor(middleByte, color, nMiddleBytes);
     c3e:	ea 81       	ldd	r30, Y+2	; 0x02
     c40:	fb 81       	ldd	r31, Y+3	; 0x03
     c42:	37 96       	adiw	r30, 0x07	; 7
     c44:	a3 e0       	ldi	r26, 0x03	; 3
     c46:	f5 95       	asr	r31
     c48:	e7 95       	ror	r30
     c4a:	aa 95       	dec	r26
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x14a>
     c4e:	fb 83       	std	Y+3, r31	; 0x03
     c50:	ea 83       	std	Y+2, r30	; 0x02
     c52:	d5 01       	movw	r26, r10
     c54:	16 96       	adiw	r26, 0x06	; 6
     c56:	8d 91       	ld	r24, X+
     c58:	9c 91       	ld	r25, X
     c5a:	17 97       	sbiw	r26, 0x07	; 7
     c5c:	fc 01       	movw	r30, r24
     c5e:	4e 9e       	mul	r4, r30
     c60:	c0 01       	movw	r24, r0
     c62:	4f 9e       	mul	r4, r31
     c64:	90 0d       	add	r25, r0
     c66:	5e 9e       	mul	r5, r30
     c68:	90 0d       	add	r25, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	4a 81       	ldd	r20, Y+2	; 0x02
     c6e:	5b 81       	ldd	r21, Y+3	; 0x03
     c70:	84 0f       	add	r24, r20
     c72:	95 1f       	adc	r25, r21
     c74:	18 96       	adiw	r26, 0x08	; 8
     c76:	6d 91       	ld	r22, X+
     c78:	7c 91       	ld	r23, X
     c7a:	19 97       	sbiw	r26, 0x09	; 9
     c7c:	68 0f       	add	r22, r24
     c7e:	79 1f       	adc	r23, r25
     c80:	c5 01       	movw	r24, r10
     c82:	a1 01       	movw	r20, r2
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
     c8a:	59 81       	ldd	r21, Y+1	; 0x01
     c8c:	55 23       	and	r21, r21
     c8e:	e9 f0       	breq	.+58     	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
     c90:	0e 0d       	add	r16, r14
     c92:	1f 1d       	adc	r17, r15
     c94:	09 30       	cpi	r16, 0x09	; 9
     c96:	11 05       	cpc	r17, r1
     c98:	c4 f0       	brlt	.+48     	; 0xcca <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1ce>
		int lastBitsX = x + width - endRem;
     c9a:	74 01       	movw	r14, r8
     c9c:	ec 18       	sub	r14, r12
     c9e:	fd 08       	sbc	r15, r13
     ca0:	00 e0       	ldi	r16, 0x00	; 0
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1c8>
		for (int i = 0; i < endRem; i++)
			setBit(lastBitsX + i, y, color);
     ca6:	d5 01       	movw	r26, r10
     ca8:	ed 91       	ld	r30, X+
     caa:	fc 91       	ld	r31, X
     cac:	b8 01       	movw	r22, r16
     cae:	6e 0d       	add	r22, r14
     cb0:	7f 1d       	adc	r23, r15
     cb2:	02 88       	ldd	r0, Z+18	; 0x12
     cb4:	f3 89       	ldd	r31, Z+19	; 0x13
     cb6:	e0 2d       	mov	r30, r0
     cb8:	c5 01       	movw	r24, r10
     cba:	a2 01       	movw	r20, r4
     cbc:	91 01       	movw	r18, r2
     cbe:	09 95       	icall
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
		int lastBitsX = x + width - endRem;
		for (int i = 0; i < endRem; i++)
     cc0:	0f 5f       	subi	r16, 0xFF	; 255
     cc2:	1f 4f       	sbci	r17, 0xFF	; 255
     cc4:	0c 15       	cp	r16, r12
     cc6:	1d 05       	cpc	r17, r13
     cc8:	74 f3       	brlt	.-36     	; 0xca6 <_ZN7Display8Buffer2D10_fastHLineEiiiNS_5ColorE+0x1aa>
			setBit(lastBitsX + i, y, color);
	}
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	3f 90       	pop	r3
     cf2:	2f 90       	pop	r2
     cf4:	08 95       	ret

00000cf6 <_ZN7Display8Buffer2D8clearRawENS_5ColorE>:

void Buffer2D::clearRaw() {
	clearRaw(_color);
}

void Buffer2D::clearRaw(Color color) {
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	8c 01       	movw	r16, r24
     d04:	6b 01       	movw	r12, r22
	memsetColor(_buff, color, getSize());
     d06:	dc 01       	movw	r26, r24
     d08:	18 96       	adiw	r26, 0x08	; 8
     d0a:	ed 90       	ld	r14, X+
     d0c:	fc 90       	ld	r15, X
     d0e:	19 97       	sbiw	r26, 0x09	; 9
     d10:	ed 91       	ld	r30, X+
     d12:	fc 91       	ld	r31, X
     d14:	06 a4       	ldd	r0, Z+46	; 0x2e
     d16:	f7 a5       	ldd	r31, Z+47	; 0x2f
     d18:	e0 2d       	mov	r30, r0
     d1a:	09 95       	icall
     d1c:	9c 01       	movw	r18, r24
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	a6 01       	movw	r20, r12
     d24:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>
}
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	08 95       	ret

00000d36 <_ZN7Display8Buffer2D7fillRawEh>:

void Buffer2D::fillRaw(uint8_t pattern) {
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	dc 01       	movw	r26, r24
     d3e:	f6 2e       	mov	r15, r22
	memset(_buff, pattern, getSize());
     d40:	18 96       	adiw	r26, 0x08	; 8
     d42:	0d 91       	ld	r16, X+
     d44:	1c 91       	ld	r17, X
     d46:	19 97       	sbiw	r26, 0x09	; 9
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	06 a4       	ldd	r0, Z+46	; 0x2e
     d4e:	f7 a5       	ldd	r31, Z+47	; 0x2f
     d50:	e0 2d       	mov	r30, r0
     d52:	09 95       	icall
     d54:	ac 01       	movw	r20, r24
     d56:	c8 01       	movw	r24, r16
     d58:	6f 2d       	mov	r22, r15
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	0e 94 23 02 	call	0x446	; 0x446 <memset>
}
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	08 95       	ret

00000d68 <_ZN7Display8Buffer2DD0Ev>:
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
     d68:	fc 01       	movw	r30, r24
     d6a:	88 e1       	ldi	r24, 0x18	; 24
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
}
     d72:	cf 01       	movw	r24, r30
     d74:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZdlPv>
     d78:	08 95       	ret

00000d7a <_Z41__static_initialization_and_destruction_0ii>:
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
}
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 05       	cpc	r25, r1
     d82:	b1 f4       	brne	.+44     	; 0xdb0 <_Z41__static_initialization_and_destruction_0ii+0x36>
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	01 f5       	brne	.+64     	; 0xdca <_Z41__static_initialization_and_destruction_0ii+0x50>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
     d8a:	80 e4       	ldi	r24, 0x40	; 64
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	64 e6       	ldi	r22, 0x64	; 100
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	4a e0       	ldi	r20, 0x0A	; 10
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	2d e0       	ldi	r18, 0x0D	; 13
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	0e eb       	ldi	r16, 0xBE	; 190
     d9c:	11 e0       	ldi	r17, 0x01	; 1
     d9e:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN7Display8Buffer2DC1EiiiPh>
SimpleFont sFont(&dispBuff);
     da2:	8c e4       	ldi	r24, 0x4C	; 76
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	60 e4       	ldi	r22, 0x40	; 64
     da8:	72 e0       	ldi	r23, 0x02	; 2
     daa:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN7Display10SimpleFontC1EPNS_6BufferE>
     dae:	0d c0       	rjmp	.+26     	; 0xdca <_Z41__static_initialization_and_destruction_0ii+0x50>
     db0:	89 2b       	or	r24, r25
     db2:	59 f4       	brne	.+22     	; 0xdca <_Z41__static_initialization_and_destruction_0ii+0x50>
     db4:	6f 5f       	subi	r22, 0xFF	; 255
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	41 f4       	brne	.+16     	; 0xdca <_Z41__static_initialization_and_destruction_0ii+0x50>
     dba:	8c e4       	ldi	r24, 0x4C	; 76
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN7Display10SimpleFontD1Ev>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN7Display8Buffer2DD1Ev>
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
}
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <_GLOBAL__D_rawDispBuff>:
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z41__static_initialization_and_destruction_0ii>
     ddc:	08 95       	ret

00000dde <_GLOBAL__I_rawDispBuff>:
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z41__static_initialization_and_destruction_0ii>
     dea:	08 95       	ret

00000dec <setup>:
		delay(750);
	}
}

void setup() {
	Serial.begin(9600);
     dec:	8e ed       	ldi	r24, 0xDE	; 222
     dee:	92 e0       	ldi	r25, 0x02	; 2
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	55 e2       	ldi	r21, 0x25	; 37
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	0e 94 2a 09 	call	0x1254	; 0x1254 <_ZN14HardwareSerial5beginEm>
}
     dfc:	08 95       	ret

00000dfe <_Z29test_SimpleFont_writeString_2v>:
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
SimpleFont sFont(&dispBuff);


void test_SimpleFont_writeString_2() {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
	Color colorA(BLACK);
	Color colorB(WHITE);
	sFont.setColor(colorB);
     e02:	8c e4       	ldi	r24, 0x4C	; 76
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN7Display4Font8setColorENS_5ColorE>
     e0e:	ca ef       	ldi	r28, 0xFA	; 250
     e10:	df ef       	ldi	r29, 0xFF	; 255

	for (int yInd = -6; yInd < 11; yInd++) {
		dispBuff.clear(colorA);
     e12:	80 e4       	ldi	r24, 0x40	; 64
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display8Buffer2D5clearENS_5ColorE>
		sFont.drawString(1, yInd, "ABC-123-/|\\");
     e1e:	8c e4       	ldi	r24, 0x4C	; 76
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	ae 01       	movw	r20, r28
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	31 e0       	ldi	r19, 0x01	; 1
     e2c:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN7Display10SimpleFont10drawStringEiiPKc>
		dispBuff.printSerial('@', '.');
     e30:	80 e4       	ldi	r24, 0x40	; 64
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	60 e4       	ldi	r22, 0x40	; 64
     e36:	4e e2       	ldi	r20, 0x2E	; 46
     e38:	0e 94 84 03 	call	0x708	; 0x708 <_ZN7Display8Buffer2D11printSerialEcc>
		Serial.println("");
     e3c:	8e ed       	ldi	r24, 0xDE	; 222
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	6d e0       	ldi	r22, 0x0D	; 13
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	0e 94 1f 0b 	call	0x163e	; 0x163e <_ZN5Print7printlnEPKc>

		delay(750);
     e48:	6e ee       	ldi	r22, 0xEE	; 238
     e4a:	72 e0       	ldi	r23, 0x02	; 2
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 8d 0b 	call	0x171a	; 0x171a <delay>
void test_SimpleFont_writeString_2() {
	Color colorA(BLACK);
	Color colorB(WHITE);
	sFont.setColor(colorB);

	for (int yInd = -6; yInd < 11; yInd++) {
     e54:	21 96       	adiw	r28, 0x01	; 1
     e56:	cb 30       	cpi	r28, 0x0B	; 11
     e58:	d1 05       	cpc	r29, r1
     e5a:	d9 f6       	brne	.-74     	; 0xe12 <_Z29test_SimpleFont_writeString_2v+0x14>
		dispBuff.printSerial('@', '.');
		Serial.println("");

		delay(750);
	}
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <loop>:
void setup() {
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
     e62:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_Z29test_SimpleFont_writeString_2v>
}
     e66:	08 95       	ret

00000e68 <_ZN7Display4FontC2EPNS_6BufferE>:
     e68:	fc 01       	movw	r30, r24
     e6a:	82 e7       	ldi	r24, 0x72	; 114
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	91 83       	std	Z+1, r25	; 0x01
     e70:	80 83       	st	Z, r24
     e72:	73 83       	std	Z+3, r23	; 0x03
     e74:	62 83       	std	Z+2, r22	; 0x02
     e76:	14 82       	std	Z+4, r1	; 0x04
     e78:	15 82       	std	Z+5, r1	; 0x05
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	97 83       	std	Z+7, r25	; 0x07
     e80:	86 83       	std	Z+6, r24	; 0x06
     e82:	11 86       	std	Z+9, r1	; 0x09
     e84:	10 86       	std	Z+8, r1	; 0x08
     e86:	08 95       	ret

00000e88 <_ZN7Display4FontD2Ev>:

Font::~Font() {}
     e88:	fc 01       	movw	r30, r24
     e8a:	82 e7       	ldi	r24, 0x72	; 114
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	08 95       	ret

00000e94 <_ZN7Display4FontD1Ev>:
     e94:	fc 01       	movw	r30, r24
     e96:	82 e7       	ldi	r24, 0x72	; 114
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	08 95       	ret

00000ea0 <_ZN7Display4Font10getSpacingEv>:

uint8_t Font::getSpacing() {
	return _spacing;
}
     ea0:	fc 01       	movw	r30, r24
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	08 95       	ret

00000ea6 <_ZN7Display4Font10setSpacingEh>:

void Font::setSpacing(uint8_t spacing) {
	_spacing = spacing;
     ea6:	fc 01       	movw	r30, r24
     ea8:	64 83       	std	Z+4, r22	; 0x04
}
     eaa:	08 95       	ret

00000eac <_ZN7Display4Font8setColorENS_5ColorE>:

void Font::setColor(Color color){
	_color = color;
     eac:	fc 01       	movw	r30, r24
     eae:	77 83       	std	Z+7, r23	; 0x07
     eb0:	66 83       	std	Z+6, r22	; 0x06
}
     eb2:	08 95       	ret

00000eb4 <_ZN7Display4Font8getColorEv>:

Color Display::Font::getColor() {
     eb4:	fc 01       	movw	r30, r24
	return _color;
}
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
     eb8:	97 81       	ldd	r25, Z+7	; 0x07
     eba:	08 95       	ret

00000ebc <_ZN7Display4Font8setStyleENS_9FontStyleE>:

void Display::Font::setStyle(FontStyle style) {
	_style = style;
     ebc:	fc 01       	movw	r30, r24
     ebe:	71 87       	std	Z+9, r23	; 0x09
     ec0:	60 87       	std	Z+8, r22	; 0x08
}
     ec2:	08 95       	ret

00000ec4 <_ZN7Display4Font10getKerningEv>:

uint8_t Display::Font::getKerning() {
	return _kerning;
}
     ec4:	fc 01       	movw	r30, r24
     ec6:	85 81       	ldd	r24, Z+5	; 0x05
     ec8:	08 95       	ret

00000eca <_ZN7Display4Font10setKerningEh>:

void Display::Font::setKerning(uint8_t kerning) {
	_kerning = kerning;
     eca:	fc 01       	movw	r30, r24
     ecc:	65 83       	std	Z+5, r22	; 0x05
}
     ece:	08 95       	ret

00000ed0 <_ZN7Display4Font8getStyleEv>:

FontStyle Display::Font::getStyle() {
     ed0:	fc 01       	movw	r30, r24
	return _style;
}
     ed2:	80 85       	ldd	r24, Z+8	; 0x08
     ed4:	91 85       	ldd	r25, Z+9	; 0x09
     ed6:	08 95       	ret

00000ed8 <_ZN7Display4FontD0Ev>:
#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}

Font::~Font() {}
     ed8:	fc 01       	movw	r30, r24
     eda:	82 e7       	ldi	r24, 0x72	; 114
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	cf 01       	movw	r24, r30
     ee4:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZdlPv>
     ee8:	08 95       	ret

00000eea <_ZN7Display10SimpleFont10drawStringEiiPKc>:
			bitmap >>= 1;
		}
	}
}

void SimpleFont::drawString(int x, int y, const char* string) {
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	8c 01       	movw	r16, r24
     efc:	7b 01       	movw	r14, r22
     efe:	6a 01       	movw	r12, r20
     f00:	e9 01       	movw	r28, r18
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <_ZN7Display10SimpleFont10drawStringEiiPKc+0x3c>

	// Write one line
	while (*string != 0) {
		drawChar(x, y, *string);
     f04:	d8 01       	movw	r26, r16
     f06:	ed 91       	ld	r30, X+
     f08:	fc 91       	ld	r31, X
     f0a:	04 80       	ldd	r0, Z+4	; 0x04
     f0c:	f5 81       	ldd	r31, Z+5	; 0x05
     f0e:	e0 2d       	mov	r30, r0
     f10:	c8 01       	movw	r24, r16
     f12:	b7 01       	movw	r22, r14
     f14:	a6 01       	movw	r20, r12
     f16:	09 95       	icall
		string++;
     f18:	21 96       	adiw	r28, 0x01	; 1
		x += (_width + _kerning);
     f1a:	f8 01       	movw	r30, r16
     f1c:	85 81       	ldd	r24, Z+5	; 0x05
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	04 96       	adiw	r24, 0x04	; 4
     f22:	e8 0e       	add	r14, r24
     f24:	f9 1e       	adc	r15, r25
}

void SimpleFont::drawString(int x, int y, const char* string) {

	// Write one line
	while (*string != 0) {
     f26:	28 81       	ld	r18, Y
     f28:	22 23       	and	r18, r18
     f2a:	61 f7       	brne	.-40     	; 0xf04 <_ZN7Display10SimpleFont10drawStringEiiPKc+0x1a>
		drawChar(x, y, *string);
		string++;
		x += (_width + _kerning);
	}
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <_ZN7Display10SimpleFont9getHeightEv>:

uint8_t SimpleFont::getHeight() {
	return _height;
}
     f3e:	85 e0       	ldi	r24, 0x05	; 5
     f40:	08 95       	ret

00000f42 <_ZN7Display10SimpleFont8getWidthEv>:

uint8_t SimpleFont::getWidth() {
	return _width;
}
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	08 95       	ret

00000f46 <_ZN7Display10SimpleFont9getBitmapEc>:

//see http://ascii-table.com/
uint32_t SimpleFont::getBitmap(char c) {
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	86 2f       	mov	r24, r22
     f4e:	99 27       	eor	r25, r25
     f50:	87 fd       	sbrc	r24, 7
     f52:	90 95       	com	r25

	// Get digit bitmap
#ifdef _SF_DIGIT
	if (c >= '0' && c <= '9')
     f54:	60 53       	subi	r22, 0x30	; 48
     f56:	6a 30       	cpi	r22, 0x0A	; 10
     f58:	40 f4       	brcc	.+16     	; 0xf6a <_ZN7Display10SimpleFont9getBitmapEc+0x24>
     f5a:	fc 01       	movw	r30, r24
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	e4 51       	subi	r30, 0x14	; 20
     f66:	f0 40       	sbci	r31, 0x00	; 0
     f68:	5b c0       	rjmp	.+182    	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>


// Converts the letter c to upper case, if possible.
inline int toUpperCase(int c)
{
  return toupper (c);
     f6a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <toupper>
     f6e:	28 2f       	mov	r18, r24
#endif

	c = toUpperCase(c);

	// Get alpha bitmap
	if (c >= 'A' && c <= 'Z') {
     f70:	81 54       	subi	r24, 0x41	; 65
     f72:	8a 31       	cpi	r24, 0x1A	; 26
     f74:	b8 f4       	brcc	.+46     	; 0xfa4 <_ZN7Display10SimpleFont9getBitmapEc+0x5e>

		// Bold Style
#ifdef _SF_ALPHA_BOLD
		if (_style == BOLD)
     f76:	88 85       	ldd	r24, Y+8	; 0x08
     f78:	99 85       	ldd	r25, Y+9	; 0x09
     f7a:	33 27       	eor	r19, r19
     f7c:	27 fd       	sbrc	r18, 7
     f7e:	30 95       	com	r19
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	41 f4       	brne	.+16     	; 0xf94 <_ZN7Display10SimpleFont9getBitmapEc+0x4e>
     f84:	f9 01       	movw	r30, r18
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	ee 0f       	add	r30, r30
     f8c:	ff 1f       	adc	r31, r31
     f8e:	e0 53       	subi	r30, 0x30	; 48
     f90:	f0 40       	sbci	r31, 0x00	; 0
     f92:	46 c0       	rjmp	.+140    	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
			return resolve(_alphaBold[c - 'A']);
     f94:	f9 01       	movw	r30, r18
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	e8 5c       	subi	r30, 0xC8	; 200
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	3e c0       	rjmp	.+124    	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
#endif
	}

	// Get punc1 bitmap
#ifdef _SF_PUNC1
	if (c >= ' ' && c <= '/')
     fa4:	82 2f       	mov	r24, r18
     fa6:	80 52       	subi	r24, 0x20	; 32
     fa8:	80 31       	cpi	r24, 0x10	; 16
     faa:	58 f4       	brcc	.+22     	; 0xfc2 <_ZN7Display10SimpleFont9getBitmapEc+0x7c>
     fac:	e2 2f       	mov	r30, r18
     fae:	ff 27       	eor	r31, r31
     fb0:	e7 fd       	sbrc	r30, 7
     fb2:	f0 95       	com	r31
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	ec 5d       	subi	r30, 0xDC	; 220
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	2f c0       	rjmp	.+94     	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc1[c - ' ']);
#endif

	// Get punc2 bitmap
#ifdef _SF_PUNC2
	if (c >= ':' && c <= '@')
     fc2:	82 2f       	mov	r24, r18
     fc4:	8a 53       	subi	r24, 0x3A	; 58
     fc6:	87 30       	cpi	r24, 0x07	; 7
     fc8:	58 f4       	brcc	.+22     	; 0xfe0 <_ZN7Display10SimpleFont9getBitmapEc+0x9a>
     fca:	e2 2f       	mov	r30, r18
     fcc:	ff 27       	eor	r31, r31
     fce:	e7 fd       	sbrc	r30, 7
     fd0:	f0 95       	com	r31
     fd2:	ee 0f       	add	r30, r30
     fd4:	ff 1f       	adc	r31, r31
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	e0 58       	subi	r30, 0x80	; 128
     fdc:	f0 40       	sbci	r31, 0x00	; 0
     fde:	20 c0       	rjmp	.+64     	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc2[c - ':']);
#endif

	// Get punc3 bitmap
#ifdef _SF_PUNC3
	if (c >= '[' && c <= '`')
     fe0:	82 2f       	mov	r24, r18
     fe2:	8b 55       	subi	r24, 0x5B	; 91
     fe4:	86 30       	cpi	r24, 0x06	; 6
     fe6:	58 f4       	brcc	.+22     	; 0xffe <_ZN7Display10SimpleFont9getBitmapEc+0xb8>
     fe8:	e2 2f       	mov	r30, r18
     fea:	ff 27       	eor	r31, r31
     fec:	e7 fd       	sbrc	r30, 7
     fee:	f0 95       	com	r31
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e8 5e       	subi	r30, 0xE8	; 232
     ffa:	f0 40       	sbci	r31, 0x00	; 0
     ffc:	11 c0       	rjmp	.+34     	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc3[c - '[']);
#endif

	// Get punc4 bitmap
#ifdef _SF_PUNC4
	if (c >= '{' && c <= '~')
     ffe:	82 2f       	mov	r24, r18
    1000:	8b 57       	subi	r24, 0x7B	; 123
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	58 f4       	brcc	.+22     	; 0x101c <_ZN7Display10SimpleFont9getBitmapEc+0xd6>
    1006:	e2 2f       	mov	r30, r18
    1008:	ff 27       	eor	r31, r31
    100a:	e7 fd       	sbrc	r30, 7
    100c:	f0 95       	com	r31
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e0 55       	subi	r30, 0x50	; 80
    1018:	f1 40       	sbci	r31, 0x01	; 1
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc4[c - '{']);
    101c:	e4 ee       	ldi	r30, 0xE4	; 228
    101e:	f1 e0       	ldi	r31, 0x01	; 1
    1020:	25 91       	lpm	r18, Z+
    1022:	35 91       	lpm	r19, Z+
    1024:	45 91       	lpm	r20, Z+
    1026:	54 91       	lpm	r21, Z+
#endif

	// Return the "error" bitmap
	return resolve(_errBitmap);
}
    1028:	b9 01       	movw	r22, r18
    102a:	ca 01       	movw	r24, r20
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <_ZN7Display10SimpleFont8drawCharEiic>:
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}

void SimpleFont::drawChar(int x, int y, char c) {
    1032:	2f 92       	push	r2
    1034:	3f 92       	push	r3
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	5c 01       	movw	r10, r24
    1058:	2b 01       	movw	r4, r22
    105a:	3a 01       	movw	r6, r20
	uint32_t bitmap;
	bitmap = getBitmap(c);
    105c:	62 2f       	mov	r22, r18
    105e:	0e 94 a3 07 	call	0xf46	; 0xf46 <_ZN7Display10SimpleFont9getBitmapEc>
    1062:	7b 01       	movw	r14, r22
    1064:	8c 01       	movw	r16, r24
    1066:	e4 e0       	ldi	r30, 0x04	; 4
    1068:	ce 2e       	mov	r12, r30
    106a:	d1 2c       	mov	r13, r1
    106c:	25 c0       	rjmp	.+74     	; 0x10b8 <_ZN7Display10SimpleFont8drawCharEiic+0x86>

		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
    106e:	e0 fe       	sbrs	r14, 0
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <_ZN7Display10SimpleFont8drawCharEiic+0x64>
				_buff->setBit(x + w, y + h, _color);
    1072:	f5 01       	movw	r30, r10
    1074:	a2 81       	ldd	r26, Z+2	; 0x02
    1076:	b3 81       	ldd	r27, Z+3	; 0x03
    1078:	8d 91       	ld	r24, X+
    107a:	9c 91       	ld	r25, X
    107c:	11 97       	sbiw	r26, 0x01	; 1
    107e:	be 01       	movw	r22, r28
    1080:	64 0d       	add	r22, r4
    1082:	75 1d       	adc	r23, r5
    1084:	26 81       	ldd	r18, Z+6	; 0x06
    1086:	37 81       	ldd	r19, Z+7	; 0x07
    1088:	fc 01       	movw	r30, r24
    108a:	22 88       	ldd	r2, Z+18	; 0x12
    108c:	33 88       	ldd	r3, Z+19	; 0x13
    108e:	cd 01       	movw	r24, r26
    1090:	a4 01       	movw	r20, r8
    1092:	f1 01       	movw	r30, r2
    1094:	09 95       	icall

			// Shift out a bit
			bitmap >>= 1;
    1096:	16 95       	lsr	r17
    1098:	07 95       	ror	r16
    109a:	f7 94       	ror	r15
    109c:	e7 94       	ror	r14

	// Loop across the height
	for (int h = _height - 1; h >= 0; h--) {

		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {
    109e:	21 97       	sbiw	r28, 0x01	; 1
    10a0:	ff ef       	ldi	r31, 0xFF	; 255
    10a2:	cf 3f       	cpi	r28, 0xFF	; 255
    10a4:	df 07       	cpc	r29, r31
    10a6:	19 f7       	brne	.-58     	; 0x106e <_ZN7Display10SimpleFont8drawCharEiic+0x3c>
void SimpleFont::drawChar(int x, int y, char c) {
	uint32_t bitmap;
	bitmap = getBitmap(c);

	// Loop across the height
	for (int h = _height - 1; h >= 0; h--) {
    10a8:	08 94       	sec
    10aa:	c1 08       	sbc	r12, r1
    10ac:	d1 08       	sbc	r13, r1
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	c8 16       	cp	r12, r24
    10b2:	8f ef       	ldi	r24, 0xFF	; 255
    10b4:	d8 06       	cpc	r13, r24
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <_ZN7Display10SimpleFont8drawCharEiic+0x92>
    10b8:	c3 e0       	ldi	r28, 0x03	; 3
    10ba:	d0 e0       	ldi	r29, 0x00	; 0
		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
				_buff->setBit(x + w, y + h, _color);
    10bc:	46 01       	movw	r8, r12
    10be:	86 0c       	add	r8, r6
    10c0:	97 1c       	adc	r9, r7
    10c2:	d5 cf       	rjmp	.-86     	; 0x106e <_ZN7Display10SimpleFont8drawCharEiic+0x3c>

			// Shift out a bit
			bitmap >>= 1;
		}
	}
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	3f 90       	pop	r3
    10e6:	2f 90       	pop	r2
    10e8:	08 95       	ret

000010ea <_ZN7Display10SimpleFontD1Ev>:
		Font(buff) {
	_spacing = _height + 1;
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}
    10ea:	fc 01       	movw	r30, r24
    10ec:	82 e9       	ldi	r24, 0x92	; 146
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
    10f4:	cf 01       	movw	r24, r30
    10f6:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN7Display4FontD2Ev>
    10fa:	08 95       	ret

000010fc <_ZN7Display10SimpleFontD0Ev>:
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	8c 01       	movw	r16, r24
    1102:	82 e9       	ldi	r24, 0x92	; 146
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	f8 01       	movw	r30, r16
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	c8 01       	movw	r24, r16
    110e:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN7Display4FontD2Ev>
    1112:	c8 01       	movw	r24, r16
    1114:	0e 94 42 0b 	call	0x1684	; 0x1684 <_ZdlPv>
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <_ZN7Display10SimpleFontC1EPNS_6BufferE>:
#include "SimpleFont.h"
#include "SimpleFont_data.h"

using namespace Display;

SimpleFont::SimpleFont(Buffer* buff) :
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	8c 01       	movw	r16, r24
		Font(buff) {
    1124:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN7Display4FontC2EPNS_6BufferE>
    1128:	82 e9       	ldi	r24, 0x92	; 146
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	f8 01       	movw	r30, r16
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
	_spacing = _height + 1;
    1132:	86 e0       	ldi	r24, 0x06	; 6
    1134:	84 83       	std	Z+4, r24	; 0x04
	_kerning = 2;
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	85 83       	std	Z+5, r24	; 0x05
}
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	08 95       	ret

00001140 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1140:	08 95       	ret

00001142 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	4f 93       	push	r20
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    115a:	80 91 c0 00 	lds	r24, 0x00C0
    115e:	82 fd       	sbrc	r24, 2
    1160:	1d c0       	rjmp	.+58     	; 0x119c <__vector_18+0x5a>
      unsigned char c = UDR0;
    1162:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1166:	20 91 96 02 	lds	r18, 0x0296
    116a:	30 91 97 02 	lds	r19, 0x0297

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    116e:	2f 5f       	subi	r18, 0xFF	; 255
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	2f 73       	andi	r18, 0x3F	; 63
    1174:	30 70       	andi	r19, 0x00	; 0
    1176:	80 91 98 02 	lds	r24, 0x0298
    117a:	90 91 99 02 	lds	r25, 0x0299
    117e:	28 17       	cp	r18, r24
    1180:	39 07       	cpc	r19, r25
    1182:	71 f0       	breq	.+28     	; 0x11a0 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    1184:	e0 91 96 02 	lds	r30, 0x0296
    1188:	f0 91 97 02 	lds	r31, 0x0297
    118c:	ea 5a       	subi	r30, 0xAA	; 170
    118e:	fd 4f       	sbci	r31, 0xFD	; 253
    1190:	40 83       	st	Z, r20
    buffer->head = i;
    1192:	30 93 97 02 	sts	0x0297, r19
    1196:	20 93 96 02 	sts	0x0296, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    119c:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	4f 91       	pop	r20
    11aa:	3f 91       	pop	r19
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	0f 90       	pop	r0
    11b4:	1f 90       	pop	r1
    11b6:	18 95       	reti

000011b8 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    11b8:	e0 91 ea 02 	lds	r30, 0x02EA
    11bc:	f0 91 eb 02 	lds	r31, 0x02EB
    11c0:	e0 5c       	subi	r30, 0xC0	; 192
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	81 91       	ld	r24, Z+
    11c6:	91 91       	ld	r25, Z+
    11c8:	20 81       	ld	r18, Z
    11ca:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    11cc:	82 1b       	sub	r24, r18
    11ce:	93 0b       	sbc	r25, r19
    11d0:	8f 73       	andi	r24, 0x3F	; 63
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	89 2b       	or	r24, r25
    11d6:	11 f0       	breq	.+4      	; 0x11dc <_Z14serialEventRunv+0x24>
    11d8:	0e 94 a0 08 	call	0x1140	; 0x1140 <_Z11serialEventv>
    11dc:	08 95       	ret

000011de <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    11f4:	20 91 da 02 	lds	r18, 0x02DA
    11f8:	30 91 db 02 	lds	r19, 0x02DB
    11fc:	80 91 dc 02 	lds	r24, 0x02DC
    1200:	90 91 dd 02 	lds	r25, 0x02DD
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	31 f4       	brne	.+12     	; 0x1216 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    120a:	80 91 c1 00 	lds	r24, 0x00C1
    120e:	8f 7d       	andi	r24, 0xDF	; 223
    1210:	80 93 c1 00 	sts	0x00C1, r24
    1214:	14 c0       	rjmp	.+40     	; 0x123e <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1216:	e0 91 dc 02 	lds	r30, 0x02DC
    121a:	f0 91 dd 02 	lds	r31, 0x02DD
    121e:	e6 56       	subi	r30, 0x66	; 102
    1220:	fd 4f       	sbci	r31, 0xFD	; 253
    1222:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1224:	80 91 dc 02 	lds	r24, 0x02DC
    1228:	90 91 dd 02 	lds	r25, 0x02DD
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	8f 73       	andi	r24, 0x3F	; 63
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	90 93 dd 02 	sts	0x02DD, r25
    1236:	80 93 dc 02 	sts	0x02DC, r24
	
  #if defined(UDR0)
    UDR0 = c;
    123a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	3f 91       	pop	r19
    1248:	2f 91       	pop	r18
    124a:	0f 90       	pop	r0
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	0f 90       	pop	r0
    1250:	1f 90       	pop	r1
    1252:	18 95       	reti

00001254 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1254:	af 92       	push	r10
    1256:	bf 92       	push	r11
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	7a 01       	movw	r14, r20
    126a:	8b 01       	movw	r16, r22
    126c:	dd 24       	eor	r13, r13
    126e:	40 30       	cpi	r20, 0x00	; 0
    1270:	81 ee       	ldi	r24, 0xE1	; 225
    1272:	58 07       	cpc	r21, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	68 07       	cpc	r22, r24
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	78 07       	cpc	r23, r24
    127c:	11 f0       	breq	.+4      	; 0x1282 <_ZN14HardwareSerial5beginEm+0x2e>
    127e:	dd 24       	eor	r13, r13
    1280:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	a9 2e       	mov	r10, r25
    1286:	b1 2c       	mov	r11, r1
    1288:	ec 89       	ldd	r30, Y+20	; 0x14
    128a:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    128c:	dd 20       	and	r13, r13
    128e:	69 f0       	breq	.+26     	; 0x12aa <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1290:	c5 01       	movw	r24, r10
    1292:	08 a0       	ldd	r0, Y+32	; 0x20
    1294:	02 c0       	rjmp	.+4      	; 0x129a <_ZN14HardwareSerial5beginEm+0x46>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <_ZN14HardwareSerial5beginEm+0x42>
    129e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	79 e0       	ldi	r23, 0x09	; 9
    12a4:	8d e3       	ldi	r24, 0x3D	; 61
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    12aa:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    12ac:	60 e8       	ldi	r22, 0x80	; 128
    12ae:	74 e8       	ldi	r23, 0x84	; 132
    12b0:	8e e1       	ldi	r24, 0x1E	; 30
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a8 01       	movw	r20, r16
    12b6:	97 01       	movw	r18, r14
    12b8:	0e 94 34 0c 	call	0x1868	; 0x1868 <__udivmodsi4>
    12bc:	21 50       	subi	r18, 0x01	; 1
    12be:	30 40       	sbci	r19, 0x00	; 0
    12c0:	40 40       	sbci	r20, 0x00	; 0
    12c2:	50 40       	sbci	r21, 0x00	; 0
    12c4:	56 95       	lsr	r21
    12c6:	47 95       	ror	r20
    12c8:	37 95       	ror	r19
    12ca:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    12cc:	80 e1       	ldi	r24, 0x10	; 16
    12ce:	20 30       	cpi	r18, 0x00	; 0
    12d0:	38 07       	cpc	r19, r24
    12d2:	20 f0       	brcs	.+8      	; 0x12dc <_ZN14HardwareSerial5beginEm+0x88>
    12d4:	dd 20       	and	r13, r13
    12d6:	11 f0       	breq	.+4      	; 0x12dc <_ZN14HardwareSerial5beginEm+0x88>
    12d8:	dd 24       	eor	r13, r13
    12da:	d6 cf       	rjmp	.-84     	; 0x1288 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    12dc:	e8 89       	ldd	r30, Y+16	; 0x10
    12de:	f9 89       	ldd	r31, Y+17	; 0x11
    12e0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    12e2:	ea 89       	ldd	r30, Y+18	; 0x12
    12e4:	fb 89       	ldd	r31, Y+19	; 0x13
    12e6:	20 83       	st	Z, r18

  transmitting = false;
    12e8:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    12ea:	ee 89       	ldd	r30, Y+22	; 0x16
    12ec:	ff 89       	ldd	r31, Y+23	; 0x17
    12ee:	40 81       	ld	r20, Z
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	c9 01       	movw	r24, r18
    12f6:	0c 8c       	ldd	r0, Y+28	; 0x1c
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <_ZN14HardwareSerial5beginEm+0xaa>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <_ZN14HardwareSerial5beginEm+0xa6>
    1302:	48 2b       	or	r20, r24
    1304:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1306:	ee 89       	ldd	r30, Y+22	; 0x16
    1308:	ff 89       	ldd	r31, Y+23	; 0x17
    130a:	40 81       	ld	r20, Z
    130c:	c9 01       	movw	r24, r18
    130e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <_ZN14HardwareSerial5beginEm+0xc2>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <_ZN14HardwareSerial5beginEm+0xbe>
    131a:	48 2b       	or	r20, r24
    131c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    131e:	ee 89       	ldd	r30, Y+22	; 0x16
    1320:	ff 89       	ldd	r31, Y+23	; 0x17
    1322:	40 81       	ld	r20, Z
    1324:	c9 01       	movw	r24, r18
    1326:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1328:	02 c0       	rjmp	.+4      	; 0x132e <_ZN14HardwareSerial5beginEm+0xda>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <_ZN14HardwareSerial5beginEm+0xd6>
    1332:	48 2b       	or	r20, r24
    1334:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1336:	ee 89       	ldd	r30, Y+22	; 0x16
    1338:	ff 89       	ldd	r31, Y+23	; 0x17
    133a:	80 81       	ld	r24, Z
    133c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <_ZN14HardwareSerial5beginEm+0xf0>
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	0a 94       	dec	r0
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <_ZN14HardwareSerial5beginEm+0xec>
    1348:	20 95       	com	r18
    134a:	28 23       	and	r18, r24
    134c:	20 83       	st	Z, r18
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	bf 90       	pop	r11
    135e:	af 90       	pop	r10
    1360:	08 95       	ret

00001362 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1362:	dc 01       	movw	r26, r24
    1364:	1c 96       	adiw	r26, 0x0c	; 12
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	1d 97       	sbiw	r26, 0x0d	; 13
    136c:	e0 5c       	subi	r30, 0xC0	; 192
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	21 91       	ld	r18, Z+
    1372:	31 91       	ld	r19, Z+
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	28 1b       	sub	r18, r24
    137a:	39 0b       	sbc	r19, r25
    137c:	2f 73       	andi	r18, 0x3F	; 63
    137e:	30 70       	andi	r19, 0x00	; 0
}
    1380:	c9 01       	movw	r24, r18
    1382:	08 95       	ret

00001384 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1384:	dc 01       	movw	r26, r24
    1386:	1c 96       	adiw	r26, 0x0c	; 12
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	1d 97       	sbiw	r26, 0x0d	; 13
    138e:	e0 5c       	subi	r30, 0xC0	; 192
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	20 81       	ld	r18, Z
    1394:	31 81       	ldd	r19, Z+1	; 0x01
    1396:	e0 54       	subi	r30, 0x40	; 64
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	df 01       	movw	r26, r30
    139c:	ae 5b       	subi	r26, 0xBE	; 190
    139e:	bf 4f       	sbci	r27, 0xFF	; 255
    13a0:	8d 91       	ld	r24, X+
    13a2:	9c 91       	ld	r25, X
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	28 17       	cp	r18, r24
    13a8:	39 07       	cpc	r19, r25
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <_ZN14HardwareSerial4peekEv+0x2e>
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    13ae:	3f ef       	ldi	r19, 0xFF	; 255
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    13b2:	8d 91       	ld	r24, X+
    13b4:	9c 91       	ld	r25, X
    13b6:	e8 0f       	add	r30, r24
    13b8:	f9 1f       	adc	r31, r25
    13ba:	80 81       	ld	r24, Z
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    13c0:	c9 01       	movw	r24, r18
    13c2:	08 95       	ret

000013c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    13c4:	dc 01       	movw	r26, r24
    13c6:	1c 96       	adiw	r26, 0x0c	; 12
    13c8:	ed 91       	ld	r30, X+
    13ca:	fc 91       	ld	r31, X
    13cc:	1d 97       	sbiw	r26, 0x0d	; 13
    13ce:	e0 5c       	subi	r30, 0xC0	; 192
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	20 81       	ld	r18, Z
    13d4:	31 81       	ldd	r19, Z+1	; 0x01
    13d6:	e0 54       	subi	r30, 0x40	; 64
    13d8:	f0 40       	sbci	r31, 0x00	; 0
    13da:	df 01       	movw	r26, r30
    13dc:	ae 5b       	subi	r26, 0xBE	; 190
    13de:	bf 4f       	sbci	r27, 0xFF	; 255
    13e0:	8d 91       	ld	r24, X+
    13e2:	9c 91       	ld	r25, X
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	28 17       	cp	r18, r24
    13e8:	39 07       	cpc	r19, r25
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <_ZN14HardwareSerial4readEv+0x2e>
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    13f2:	8d 91       	ld	r24, X+
    13f4:	9c 91       	ld	r25, X
    13f6:	11 97       	sbiw	r26, 0x01	; 1
    13f8:	e8 0f       	add	r30, r24
    13fa:	f9 1f       	adc	r31, r25
    13fc:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	11 97       	sbiw	r26, 0x01	; 1
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	8f 73       	andi	r24, 0x3F	; 63
    1408:	90 70       	andi	r25, 0x00	; 0
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	9c 93       	st	X, r25
    140e:	8e 93       	st	-X, r24
    return c;
    1410:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1412:	c9 01       	movw	r24, r18
    1414:	08 95       	ret

00001416 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1416:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    1418:	91 96       	adiw	r26, 0x21	; 33
    141a:	8c 91       	ld	r24, X
    141c:	91 97       	sbiw	r26, 0x21	; 33
    141e:	88 23       	and	r24, r24
    1420:	39 f0       	breq	.+14     	; 0x1430 <_ZN14HardwareSerial5flushEv+0x1a>
    1422:	54 96       	adiw	r26, 0x14	; 20
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	55 97       	sbiw	r26, 0x15	; 21
    142a:	80 81       	ld	r24, Z
    142c:	86 ff       	sbrs	r24, 6
    142e:	f9 cf       	rjmp	.-14     	; 0x1422 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    1430:	91 96       	adiw	r26, 0x21	; 33
    1432:	1c 92       	st	X, r1
}
    1434:	08 95       	ret

00001436 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    143c:	ee 85       	ldd	r30, Y+14	; 0x0e
    143e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1440:	e0 5c       	subi	r30, 0xC0	; 192
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	e0 54       	subi	r30, 0x40	; 64
    144a:	f0 40       	sbci	r31, 0x00	; 0
    144c:	2f 5f       	subi	r18, 0xFF	; 255
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	2f 73       	andi	r18, 0x3F	; 63
    1452:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1454:	df 01       	movw	r26, r30
    1456:	ae 5b       	subi	r26, 0xBE	; 190
    1458:	bf 4f       	sbci	r27, 0xFF	; 255
    145a:	8d 91       	ld	r24, X+
    145c:	9c 91       	ld	r25, X
    145e:	11 97       	sbiw	r26, 0x01	; 1
    1460:	28 17       	cp	r18, r24
    1462:	39 07       	cpc	r19, r25
    1464:	d1 f3       	breq	.-12     	; 0x145a <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1466:	e0 5c       	subi	r30, 0xC0	; 192
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	e0 54       	subi	r30, 0x40	; 64
    1470:	f0 40       	sbci	r31, 0x00	; 0
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1478:	ee 85       	ldd	r30, Y+14	; 0x0e
    147a:	ff 85       	ldd	r31, Y+15	; 0x0f
    147c:	e0 5c       	subi	r30, 0xC0	; 192
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	31 83       	std	Z+1, r19	; 0x01
    1482:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1484:	ee 89       	ldd	r30, Y+22	; 0x16
    1486:	ff 89       	ldd	r31, Y+23	; 0x17
    1488:	20 81       	ld	r18, Z
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <_ZN14HardwareSerial5writeEh+0x60>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <_ZN14HardwareSerial5writeEh+0x5c>
    149a:	28 2b       	or	r18, r24
    149c:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    14a2:	ec 89       	ldd	r30, Y+20	; 0x14
    14a4:	fd 89       	ldd	r31, Y+21	; 0x15
    14a6:	80 81       	ld	r24, Z
    14a8:	80 64       	ori	r24, 0x40	; 64
    14aa:	80 83       	st	Z, r24
  
  return 1;
}
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    14b6:	10 92 e1 02 	sts	0x02E1, r1
    14ba:	10 92 e0 02 	sts	0x02E0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    14be:	88 ee       	ldi	r24, 0xE8	; 232
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	80 93 e2 02 	sts	0x02E2, r24
    14ca:	90 93 e3 02 	sts	0x02E3, r25
    14ce:	a0 93 e4 02 	sts	0x02E4, r26
    14d2:	b0 93 e5 02 	sts	0x02E5, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    14d6:	82 eb       	ldi	r24, 0xB2	; 178
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	90 93 df 02 	sts	0x02DF, r25
    14de:	80 93 de 02 	sts	0x02DE, r24
{
  _rx_buffer = rx_buffer;
    14e2:	86 e5       	ldi	r24, 0x56	; 86
    14e4:	92 e0       	ldi	r25, 0x02	; 2
    14e6:	90 93 eb 02 	sts	0x02EB, r25
    14ea:	80 93 ea 02 	sts	0x02EA, r24
  _tx_buffer = tx_buffer;
    14ee:	8a e9       	ldi	r24, 0x9A	; 154
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	90 93 ed 02 	sts	0x02ED, r25
    14f6:	80 93 ec 02 	sts	0x02EC, r24
  _ubrrh = ubrrh;
    14fa:	85 ec       	ldi	r24, 0xC5	; 197
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	90 93 ef 02 	sts	0x02EF, r25
    1502:	80 93 ee 02 	sts	0x02EE, r24
  _ubrrl = ubrrl;
    1506:	84 ec       	ldi	r24, 0xC4	; 196
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	90 93 f1 02 	sts	0x02F1, r25
    150e:	80 93 f0 02 	sts	0x02F0, r24
  _ucsra = ucsra;
    1512:	80 ec       	ldi	r24, 0xC0	; 192
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	90 93 f3 02 	sts	0x02F3, r25
    151a:	80 93 f2 02 	sts	0x02F2, r24
  _ucsrb = ucsrb;
    151e:	81 ec       	ldi	r24, 0xC1	; 193
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	90 93 f5 02 	sts	0x02F5, r25
    1526:	80 93 f4 02 	sts	0x02F4, r24
  _ucsrc = ucsrc;
    152a:	82 ec       	ldi	r24, 0xC2	; 194
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	90 93 f7 02 	sts	0x02F7, r25
    1532:	80 93 f6 02 	sts	0x02F6, r24
  _udr = udr;
    1536:	86 ec       	ldi	r24, 0xC6	; 198
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 f9 02 	sts	0x02F9, r25
    153e:	80 93 f8 02 	sts	0x02F8, r24
  _rxen = rxen;
    1542:	84 e0       	ldi	r24, 0x04	; 4
    1544:	80 93 fa 02 	sts	0x02FA, r24
  _txen = txen;
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	80 93 fb 02 	sts	0x02FB, r24
  _rxcie = rxcie;
    154e:	87 e0       	ldi	r24, 0x07	; 7
    1550:	80 93 fc 02 	sts	0x02FC, r24
  _udrie = udrie;
    1554:	85 e0       	ldi	r24, 0x05	; 5
    1556:	80 93 fd 02 	sts	0x02FD, r24
  _u2x = u2x;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 fe 02 	sts	0x02FE, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1560:	08 95       	ret

00001562 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	7c 01       	movw	r14, r24
    1574:	6b 01       	movw	r12, r22
    1576:	8a 01       	movw	r16, r20
    1578:	c0 e0       	ldi	r28, 0x00	; 0
    157a:	d0 e0       	ldi	r29, 0x00	; 0
    157c:	0f c0       	rjmp	.+30     	; 0x159c <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    157e:	d6 01       	movw	r26, r12
    1580:	6d 91       	ld	r22, X+
    1582:	6d 01       	movw	r12, r26
    1584:	d7 01       	movw	r26, r14
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	01 90       	ld	r0, Z+
    158c:	f0 81       	ld	r31, Z
    158e:	e0 2d       	mov	r30, r0
    1590:	c7 01       	movw	r24, r14
    1592:	09 95       	icall
    1594:	c8 0f       	add	r28, r24
    1596:	d9 1f       	adc	r29, r25
    1598:	01 50       	subi	r16, 0x01	; 1
    159a:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    159c:	01 15       	cp	r16, r1
    159e:	11 05       	cpc	r17, r1
    15a0:	71 f7       	brne	.-36     	; 0x157e <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    15a2:	ce 01       	movw	r24, r28
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	08 95       	ret

000015b6 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    15b6:	dc 01       	movw	r26, r24
{
  return write(c);
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	01 90       	ld	r0, Z+
    15be:	f0 81       	ld	r31, Z
    15c0:	e0 2d       	mov	r30, r0
    15c2:	09 95       	icall
}
    15c4:	08 95       	ret

000015c6 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    15d0:	dc 01       	movw	r26, r24
    15d2:	ed 91       	ld	r30, X+
    15d4:	fc 91       	ld	r31, X
    15d6:	01 90       	ld	r0, Z+
    15d8:	f0 81       	ld	r31, Z
    15da:	e0 2d       	mov	r30, r0
    15dc:	6d e0       	ldi	r22, 0x0D	; 13
    15de:	09 95       	icall
    15e0:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    15e2:	d8 01       	movw	r26, r16
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	c8 01       	movw	r24, r16
    15f0:	6a e0       	ldi	r22, 0x0A	; 10
    15f2:	09 95       	icall
    15f4:	9c 01       	movw	r18, r24
    15f6:	2e 0d       	add	r18, r14
    15f8:	3f 1d       	adc	r19, r15
    15fa:	c9 01       	movw	r24, r18
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	08 95       	ret

00001606 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    160c:	61 15       	cp	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	19 f4       	brne	.+6      	; 0x1618 <_ZN5Print5writeEPKc+0x12>
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    1618:	db 01       	movw	r26, r22
    161a:	0d 90       	ld	r0, X+
    161c:	00 20       	and	r0, r0
    161e:	e9 f7       	brne	.-6      	; 0x161a <_ZN5Print5writeEPKc+0x14>
    1620:	11 97       	sbiw	r26, 0x01	; 1
    1622:	a6 1b       	sub	r26, r22
    1624:	b7 0b       	sbc	r27, r23
    1626:	e8 81       	ld	r30, Y
    1628:	f9 81       	ldd	r31, Y+1	; 0x01
    162a:	02 80       	ldd	r0, Z+2	; 0x02
    162c:	f3 81       	ldd	r31, Z+3	; 0x03
    162e:	e0 2d       	mov	r30, r0
    1630:	ad 01       	movw	r20, r26
    1632:	09 95       	icall
    1634:	9c 01       	movw	r18, r24
    }
    1636:	c9 01       	movw	r24, r18
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1648:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN5Print5writeEPKc>
    164c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    164e:	c7 01       	movw	r24, r14
    1650:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <_ZN5Print7printlnEv>
    1654:	08 0f       	add	r16, r24
    1656:	19 1f       	adc	r17, r25
  return n;
}
    1658:	c8 01       	movw	r24, r16
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	08 95       	ret

00001664 <main>:
#include <Arduino.h>

int main(void)
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
{
	init();
    1668:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    166c:	0e 94 f6 06 	call	0xdec	; 0xdec <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1670:	cc ed       	ldi	r28, 0xDC	; 220
    1672:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    1674:	0e 94 31 07 	call	0xe62	; 0xe62 <loop>
		if (serialEventRun) serialEventRun();
    1678:	20 97       	sbiw	r28, 0x00	; 0
    167a:	e1 f3       	breq	.-8      	; 0x1674 <main+0x10>
    167c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_Z14serialEventRunv>
    1680:	f9 cf       	rjmp	.-14     	; 0x1674 <main+0x10>

00001682 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    1682:	08 95       	ret

00001684 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    1684:	0e 94 cb 01 	call	0x396	; 0x396 <free>
} 
    1688:	08 95       	ret

0000168a <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	8f 93       	push	r24
    169a:	9f 93       	push	r25
    169c:	af 93       	push	r26
    169e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    16a0:	80 91 04 03 	lds	r24, 0x0304
    16a4:	90 91 05 03 	lds	r25, 0x0305
    16a8:	a0 91 06 03 	lds	r26, 0x0306
    16ac:	b0 91 07 03 	lds	r27, 0x0307
	unsigned char f = timer0_fract;
    16b0:	30 91 08 03 	lds	r19, 0x0308

	m += MILLIS_INC;
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	a1 1d       	adc	r26, r1
    16b8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    16ba:	23 2f       	mov	r18, r19
    16bc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    16be:	2d 37       	cpi	r18, 0x7D	; 125
    16c0:	20 f0       	brcs	.+8      	; 0x16ca <__vector_16+0x40>
		f -= FRACT_MAX;
    16c2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	a1 1d       	adc	r26, r1
    16c8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    16ca:	20 93 08 03 	sts	0x0308, r18
	timer0_millis = m;
    16ce:	80 93 04 03 	sts	0x0304, r24
    16d2:	90 93 05 03 	sts	0x0305, r25
    16d6:	a0 93 06 03 	sts	0x0306, r26
    16da:	b0 93 07 03 	sts	0x0307, r27
	timer0_overflow_count++;
    16de:	80 91 00 03 	lds	r24, 0x0300
    16e2:	90 91 01 03 	lds	r25, 0x0301
    16e6:	a0 91 02 03 	lds	r26, 0x0302
    16ea:	b0 91 03 03 	lds	r27, 0x0303
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	a1 1d       	adc	r26, r1
    16f2:	b1 1d       	adc	r27, r1
    16f4:	80 93 00 03 	sts	0x0300, r24
    16f8:	90 93 01 03 	sts	0x0301, r25
    16fc:	a0 93 02 03 	sts	0x0302, r26
    1700:	b0 93 03 03 	sts	0x0303, r27
}
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	3f 91       	pop	r19
    170e:	2f 91       	pop	r18
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    171e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1720:	f8 94       	cli
	m = timer0_overflow_count;
    1722:	80 91 00 03 	lds	r24, 0x0300
    1726:	90 91 01 03 	lds	r25, 0x0301
    172a:	a0 91 02 03 	lds	r26, 0x0302
    172e:	b0 91 03 03 	lds	r27, 0x0303
#if defined(TCNT0)
	t = TCNT0;
    1732:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1734:	a8 9b       	sbis	0x15, 0	; 21
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <delay+0x28>
    1738:	6f 3f       	cpi	r22, 0xFF	; 255
    173a:	19 f0       	breq	.+6      	; 0x1742 <delay+0x28>
		m++;
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	a1 1d       	adc	r26, r1
    1740:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1742:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1744:	ba 2f       	mov	r27, r26
    1746:	a9 2f       	mov	r26, r25
    1748:	98 2f       	mov	r25, r24
    174a:	88 27       	eor	r24, r24
    174c:	86 0f       	add	r24, r22
    174e:	91 1d       	adc	r25, r1
    1750:	a1 1d       	adc	r26, r1
    1752:	b1 1d       	adc	r27, r1
    1754:	62 e0       	ldi	r22, 0x02	; 2
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	aa 1f       	adc	r26, r26
    175c:	bb 1f       	adc	r27, r27
    175e:	6a 95       	dec	r22
    1760:	d1 f7       	brne	.-12     	; 0x1756 <delay+0x3c>
    1762:	bc 01       	movw	r22, r24
    1764:	2d c0       	rjmp	.+90     	; 0x17c0 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1766:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1768:	f8 94       	cli
	m = timer0_overflow_count;
    176a:	80 91 00 03 	lds	r24, 0x0300
    176e:	90 91 01 03 	lds	r25, 0x0301
    1772:	a0 91 02 03 	lds	r26, 0x0302
    1776:	b0 91 03 03 	lds	r27, 0x0303
#if defined(TCNT0)
	t = TCNT0;
    177a:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    177c:	a8 9b       	sbis	0x15, 0	; 21
    177e:	05 c0       	rjmp	.+10     	; 0x178a <delay+0x70>
    1780:	ef 3f       	cpi	r30, 0xFF	; 255
    1782:	19 f0       	breq	.+6      	; 0x178a <delay+0x70>
		m++;
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	a1 1d       	adc	r26, r1
    1788:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    178a:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    178c:	ba 2f       	mov	r27, r26
    178e:	a9 2f       	mov	r26, r25
    1790:	98 2f       	mov	r25, r24
    1792:	88 27       	eor	r24, r24
    1794:	8e 0f       	add	r24, r30
    1796:	91 1d       	adc	r25, r1
    1798:	a1 1d       	adc	r26, r1
    179a:	b1 1d       	adc	r27, r1
    179c:	e2 e0       	ldi	r30, 0x02	; 2
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	aa 1f       	adc	r26, r26
    17a4:	bb 1f       	adc	r27, r27
    17a6:	ea 95       	dec	r30
    17a8:	d1 f7       	brne	.-12     	; 0x179e <delay+0x84>
    17aa:	86 1b       	sub	r24, r22
    17ac:	97 0b       	sbc	r25, r23
    17ae:	88 5e       	subi	r24, 0xE8	; 232
    17b0:	93 40       	sbci	r25, 0x03	; 3
    17b2:	c8 f2       	brcs	.-78     	; 0x1766 <delay+0x4c>
			ms--;
    17b4:	21 50       	subi	r18, 0x01	; 1
    17b6:	30 40       	sbci	r19, 0x00	; 0
    17b8:	40 40       	sbci	r20, 0x00	; 0
    17ba:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    17bc:	68 51       	subi	r22, 0x18	; 24
    17be:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    17c0:	21 15       	cp	r18, r1
    17c2:	31 05       	cpc	r19, r1
    17c4:	41 05       	cpc	r20, r1
    17c6:	51 05       	cpc	r21, r1
    17c8:	71 f6       	brne	.-100    	; 0x1766 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    17ca:	08 95       	ret

000017cc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    17cc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    17ce:	84 b5       	in	r24, 0x24	; 36
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    17d4:	84 b5       	in	r24, 0x24	; 36
    17d6:	81 60       	ori	r24, 0x01	; 1
    17d8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    17da:	85 b5       	in	r24, 0x25	; 37
    17dc:	82 60       	ori	r24, 0x02	; 2
    17de:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    17e0:	85 b5       	in	r24, 0x25	; 37
    17e2:	81 60       	ori	r24, 0x01	; 1
    17e4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    17e6:	ee e6       	ldi	r30, 0x6E	; 110
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	81 60       	ori	r24, 0x01	; 1
    17ee:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    17f0:	e1 e8       	ldi	r30, 0x81	; 129
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    17f6:	80 81       	ld	r24, Z
    17f8:	82 60       	ori	r24, 0x02	; 2
    17fa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    17fc:	80 81       	ld	r24, Z
    17fe:	81 60       	ori	r24, 0x01	; 1
    1800:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1802:	e0 e8       	ldi	r30, 0x80	; 128
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	81 60       	ori	r24, 0x01	; 1
    180a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    180c:	e1 eb       	ldi	r30, 0xB1	; 177
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	84 60       	ori	r24, 0x04	; 4
    1814:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1816:	e0 eb       	ldi	r30, 0xB0	; 176
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1820:	ea e7       	ldi	r30, 0x7A	; 122
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	84 60       	ori	r24, 0x04	; 4
    1828:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    182a:	80 81       	ld	r24, Z
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1830:	80 81       	ld	r24, Z
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1836:	80 81       	ld	r24, Z
    1838:	80 68       	ori	r24, 0x80	; 128
    183a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    183c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1840:	08 95       	ret

00001842 <__divmodhi4>:
    1842:	97 fb       	bst	r25, 7
    1844:	09 2e       	mov	r0, r25
    1846:	07 26       	eor	r0, r23
    1848:	0a d0       	rcall	.+20     	; 0x185e <__divmodhi4_neg1>
    184a:	77 fd       	sbrc	r23, 7
    184c:	04 d0       	rcall	.+8      	; 0x1856 <__divmodhi4_neg2>
    184e:	2e d0       	rcall	.+92     	; 0x18ac <__udivmodhi4>
    1850:	06 d0       	rcall	.+12     	; 0x185e <__divmodhi4_neg1>
    1852:	00 20       	and	r0, r0
    1854:	1a f4       	brpl	.+6      	; 0x185c <__divmodhi4_exit>

00001856 <__divmodhi4_neg2>:
    1856:	70 95       	com	r23
    1858:	61 95       	neg	r22
    185a:	7f 4f       	sbci	r23, 0xFF	; 255

0000185c <__divmodhi4_exit>:
    185c:	08 95       	ret

0000185e <__divmodhi4_neg1>:
    185e:	f6 f7       	brtc	.-4      	; 0x185c <__divmodhi4_exit>
    1860:	90 95       	com	r25
    1862:	81 95       	neg	r24
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	08 95       	ret

00001868 <__udivmodsi4>:
    1868:	a1 e2       	ldi	r26, 0x21	; 33
    186a:	1a 2e       	mov	r1, r26
    186c:	aa 1b       	sub	r26, r26
    186e:	bb 1b       	sub	r27, r27
    1870:	fd 01       	movw	r30, r26
    1872:	0d c0       	rjmp	.+26     	; 0x188e <__udivmodsi4_ep>

00001874 <__udivmodsi4_loop>:
    1874:	aa 1f       	adc	r26, r26
    1876:	bb 1f       	adc	r27, r27
    1878:	ee 1f       	adc	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	a2 17       	cp	r26, r18
    187e:	b3 07       	cpc	r27, r19
    1880:	e4 07       	cpc	r30, r20
    1882:	f5 07       	cpc	r31, r21
    1884:	20 f0       	brcs	.+8      	; 0x188e <__udivmodsi4_ep>
    1886:	a2 1b       	sub	r26, r18
    1888:	b3 0b       	sbc	r27, r19
    188a:	e4 0b       	sbc	r30, r20
    188c:	f5 0b       	sbc	r31, r21

0000188e <__udivmodsi4_ep>:
    188e:	66 1f       	adc	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	1a 94       	dec	r1
    1898:	69 f7       	brne	.-38     	; 0x1874 <__udivmodsi4_loop>
    189a:	60 95       	com	r22
    189c:	70 95       	com	r23
    189e:	80 95       	com	r24
    18a0:	90 95       	com	r25
    18a2:	9b 01       	movw	r18, r22
    18a4:	ac 01       	movw	r20, r24
    18a6:	bd 01       	movw	r22, r26
    18a8:	cf 01       	movw	r24, r30
    18aa:	08 95       	ret

000018ac <__udivmodhi4>:
    18ac:	aa 1b       	sub	r26, r26
    18ae:	bb 1b       	sub	r27, r27
    18b0:	51 e1       	ldi	r21, 0x11	; 17
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <__udivmodhi4_ep>

000018b4 <__udivmodhi4_loop>:
    18b4:	aa 1f       	adc	r26, r26
    18b6:	bb 1f       	adc	r27, r27
    18b8:	a6 17       	cp	r26, r22
    18ba:	b7 07       	cpc	r27, r23
    18bc:	10 f0       	brcs	.+4      	; 0x18c2 <__udivmodhi4_ep>
    18be:	a6 1b       	sub	r26, r22
    18c0:	b7 0b       	sbc	r27, r23

000018c2 <__udivmodhi4_ep>:
    18c2:	88 1f       	adc	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	5a 95       	dec	r21
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__udivmodhi4_loop>
    18ca:	80 95       	com	r24
    18cc:	90 95       	com	r25
    18ce:	bc 01       	movw	r22, r24
    18d0:	cd 01       	movw	r24, r26
    18d2:	08 95       	ret

000018d4 <__tablejump2__>:
    18d4:	ee 0f       	add	r30, r30
    18d6:	ff 1f       	adc	r31, r31

000018d8 <__tablejump__>:
    18d8:	05 90       	lpm	r0, Z+
    18da:	f4 91       	lpm	r31, Z+
    18dc:	e0 2d       	mov	r30, r0
    18de:	09 94       	ijmp

000018e0 <toupper>:
    18e0:	91 11       	cpse	r25, r1
    18e2:	08 95       	ret
    18e4:	81 56       	subi	r24, 0x61	; 97
    18e6:	8a 51       	subi	r24, 0x1A	; 26
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <toupper+0xc>
    18ea:	80 52       	subi	r24, 0x20	; 32
    18ec:	85 58       	subi	r24, 0x85	; 133
    18ee:	08 95       	ret

000018f0 <__do_global_dtors>:
    18f0:	11 e0       	ldi	r17, 0x01	; 1
    18f2:	cc ee       	ldi	r28, 0xEC	; 236
    18f4:	d1 e0       	ldi	r29, 0x01	; 1
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <.do_global_dtors_start>

000018f8 <.do_global_dtors_loop>:
    18f8:	fe 01       	movw	r30, r28
    18fa:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__tablejump__>
    18fe:	22 96       	adiw	r28, 0x02	; 2

00001900 <.do_global_dtors_start>:
    1900:	ce 3e       	cpi	r28, 0xEE	; 238
    1902:	d1 07       	cpc	r29, r17
    1904:	c9 f7       	brne	.-14     	; 0x18f8 <.do_global_dtors_loop>
    1906:	f8 94       	cli

00001908 <__stop_program>:
    1908:	ff cf       	rjmp	.-2      	; 0x1908 <__stop_program>

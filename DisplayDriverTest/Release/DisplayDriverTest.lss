
DisplayDriverTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00001fd8  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000177  008001e0  008001e0  0000214c  2**0
                  ALLOC
  3 .debug_aranges 00000820  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001719  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000097fe  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001fb7  00000000  00000000  0000d883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004091  00000000  00000000  0000f83a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ea0  00000000  00000000  000138cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000258f  00000000  00000000  0001476c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000536b  00000000  00000000  00016cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007e8  00000000  00000000  0001c066  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
}
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__dtors_end>

namespace Display {

ChildBuffer2D::ChildBuffer2D(Rect& window, Buffer& buffer) :
		_parentBuff(&buffer), _window(&window) {
}
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 */

#include "Font.h"
using namespace Display;

Font::Font(Buffer& buff) : _buff(&buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
#ifdef _SF_PUNC4
prog_uint32_t PROGMEM_ _punc4[] = {
	0x024242 /*{*/, 0x066666 /*|*/, 0x042424 /*}*/, 0x000db0 /*~*/};
#endif

uint32_t resolve(uint32_t& data) { return pgm_read_dword(&data); }
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 ac 0e 	jmp	0x1d58	; 0x1d58 <__vector_16>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__vector_18>
      4c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_19>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

00000068 <_punc2>:
      68:	66 60 06 00 24 60 06 00 63 6c 03 00 f0 f0 00 00     f`..$`..cl......
      78:	6c 63 0c 00 06 92 06 00 56 93 06 00                 lc......V...

00000084 <_punc3>:
      84:	46 44 06 00 21 46 08 00 26 22 06 00 00 90 06 00     FD..!F..&"......
      94:	0f 00 00 00 00 62 0c 00                             .....b..

0000009c <_punc4>:
      9c:	42 42 02 00 66 66 06 00 24 24 04 00 b0 0d 00 00     BB..ff..$$......

000000ac <_ZL6_digit>:
      ac:	d6 b9 06 00 27 62 02 00 8f 17 0e 00 1f 17 0f 00     ....'b..........
      bc:	11 9f 09 00 1f 8e 0f 00 9f 8f 07 00 24 12 0f 00     ............$...
      cc:	9f 96 0f 00 11 9f 0f 00                             ........

000000d4 <_ZL10_alphaBold>:
      d4:	dd df 06 00 de df 0e 00 d6 dc 06 00 de dd 0e 00     ................
      e4:	cf ce 0f 00 cc ce 0f 00 d7 cf 07 00 dd df 0d 00     ................
      f4:	6f 66 0f 00 bf 33 0f 00 dd de 0d 00 cf cc 0c 00     of...3..........
     104:	99 ff 09 00 b9 df 09 00 d6 dd 06 00 cc df 0e 00     ................
     114:	a7 99 06 00 ed dd 0e 00 1e cf 07 00 66 66 0f 00     ............ff..
     124:	d6 dd 0d 00 52 dd 0d 00 f6 99 09 00 69 96 09 00     ....R.......i...
     134:	2c 97 09 00 cf 36 0f 00                             ,....6..

0000013c <_ZL6_alpha>:
     13c:	99 9f 06 00 9e 9f 0e 00 96 98 06 00 9e 99 0e 00     ................
     14c:	8f 8e 0f 00 88 8e 0f 00 97 8b 07 00 99 9f 09 00     ................
     15c:	4f 44 0f 00 ae 22 0f 00 a9 ac 09 00 8f 88 08 00     OD..."..........
     16c:	99 ff 09 00 b9 df 09 00 96 99 06 00 88 9f 0e 00     ................
     17c:	a7 99 06 00 e9 99 0e 00 1e 8f 07 00 44 44 0f 00     ............DD..
     18c:	96 99 09 00 52 99 09 00 f6 99 09 00 69 96 09 00     ....R.......i...
     19c:	2c 97 09 00 4f 12 0f 00                             ,...O...

000001a4 <_ZL6_punc1>:
     1a4:	00 00 00 00 02 66 06 00 00 55 05 00 f5 f5 05 00     .....f...U......
     1b4:	5e af 07 00 4d 26 0b 00 bd 5e 07 00 00 24 06 00     ^...M&...^...$..
     1c4:	42 44 02 00 24 22 04 00 a0 a4 00 00 40 4e 00 00     BD..$"......@N..
     1d4:	24 06 00 00 00 0f 00 00 66 00 00 00 48 26 01 00     $.......f...H&..

000001e4 <_ZL10_errBitmap>:
     1e4:	5a 5a 0a 00                                         ZZ..

000001e8 <__ctors_start>:
     1e8:	55 0a       	sbc	r5, r21
     1ea:	c2 0d       	add	r28, r2

000001ec <__ctors_end>:
     1ec:	4e 0a       	sbc	r4, r30

000001ee <__dtors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d4 e0       	ldi	r29, 0x04	; 4
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e8 ed       	ldi	r30, 0xD8	; 216
     202:	ff e1       	ldi	r31, 0x1F	; 31
     204:	02 c0       	rjmp	.+4      	; 0x20a <.do_copy_data_start>

00000206 <.do_copy_data_loop>:
     206:	05 90       	lpm	r0, Z+
     208:	0d 92       	st	X+, r0

0000020a <.do_copy_data_start>:
     20a:	a0 3e       	cpi	r26, 0xE0	; 224
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <.do_copy_data_loop>

00000210 <__do_clear_bss>:
     210:	13 e0       	ldi	r17, 0x03	; 3
     212:	a0 ee       	ldi	r26, 0xE0	; 224
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	a7 35       	cpi	r26, 0x57	; 87
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>

00000220 <__do_global_ctors>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	cc ee       	ldi	r28, 0xEC	; 236
     224:	d1 e0       	ldi	r29, 0x01	; 1
     226:	04 c0       	rjmp	.+8      	; 0x230 <.do_global_ctors_start>

00000228 <.do_global_ctors_loop>:
     228:	22 97       	sbiw	r28, 0x02	; 2
     22a:	fe 01       	movw	r30, r28
     22c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__tablejump__>

00000230 <.do_global_ctors_start>:
     230:	c8 3e       	cpi	r28, 0xE8	; 232
     232:	d1 07       	cpc	r29, r17
     234:	c9 f7       	brne	.-14     	; 0x228 <.do_global_ctors_loop>
     236:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <main>
     23a:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__do_global_dtors>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <malloc>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	bc 01       	movw	r22, r24
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	91 05       	cpc	r25, r1
     24c:	10 f4       	brcc	.+4      	; 0x252 <malloc+0x10>
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	a0 91 55 03 	lds	r26, 0x0355
     256:	b0 91 56 03 	lds	r27, 0x0356
     25a:	ed 01       	movw	r28, r26
     25c:	e0 e0       	ldi	r30, 0x00	; 0
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	21 c0       	rjmp	.+66     	; 0x2a8 <malloc+0x66>
     266:	88 81       	ld	r24, Y
     268:	99 81       	ldd	r25, Y+1	; 0x01
     26a:	86 17       	cp	r24, r22
     26c:	97 07       	cpc	r25, r23
     26e:	69 f4       	brne	.+26     	; 0x28a <malloc+0x48>
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	9b 81       	ldd	r25, Y+3	; 0x03
     274:	30 97       	sbiw	r30, 0x00	; 0
     276:	19 f0       	breq	.+6      	; 0x27e <malloc+0x3c>
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	04 c0       	rjmp	.+8      	; 0x286 <malloc+0x44>
     27e:	90 93 56 03 	sts	0x0356, r25
     282:	80 93 55 03 	sts	0x0355, r24
     286:	fe 01       	movw	r30, r28
     288:	34 c0       	rjmp	.+104    	; 0x2f2 <malloc+0xb0>
     28a:	68 17       	cp	r22, r24
     28c:	79 07       	cpc	r23, r25
     28e:	38 f4       	brcc	.+14     	; 0x29e <malloc+0x5c>
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	19 f0       	breq	.+6      	; 0x29c <malloc+0x5a>
     296:	84 17       	cp	r24, r20
     298:	95 07       	cpc	r25, r21
     29a:	08 f4       	brcc	.+2      	; 0x29e <malloc+0x5c>
     29c:	ac 01       	movw	r20, r24
     29e:	fe 01       	movw	r30, r28
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	9b 81       	ldd	r25, Y+3	; 0x03
     2a4:	9c 01       	movw	r18, r24
     2a6:	e9 01       	movw	r28, r18
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	e9 f6       	brne	.-70     	; 0x266 <malloc+0x24>
     2ac:	41 15       	cp	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	a9 f1       	breq	.+106    	; 0x31c <malloc+0xda>
     2b2:	ca 01       	movw	r24, r20
     2b4:	86 1b       	sub	r24, r22
     2b6:	97 0b       	sbc	r25, r23
     2b8:	04 97       	sbiw	r24, 0x04	; 4
     2ba:	08 f4       	brcc	.+2      	; 0x2be <malloc+0x7c>
     2bc:	ba 01       	movw	r22, r20
     2be:	e0 e0       	ldi	r30, 0x00	; 0
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	2a c0       	rjmp	.+84     	; 0x318 <malloc+0xd6>
     2c4:	8d 91       	ld	r24, X+
     2c6:	9c 91       	ld	r25, X
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	84 17       	cp	r24, r20
     2cc:	95 07       	cpc	r25, r21
     2ce:	f9 f4       	brne	.+62     	; 0x30e <malloc+0xcc>
     2d0:	64 17       	cp	r22, r20
     2d2:	75 07       	cpc	r23, r21
     2d4:	81 f4       	brne	.+32     	; 0x2f6 <malloc+0xb4>
     2d6:	12 96       	adiw	r26, 0x02	; 2
     2d8:	8d 91       	ld	r24, X+
     2da:	9c 91       	ld	r25, X
     2dc:	13 97       	sbiw	r26, 0x03	; 3
     2de:	30 97       	sbiw	r30, 0x00	; 0
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <malloc+0xa6>
     2e2:	93 83       	std	Z+3, r25	; 0x03
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <malloc+0xae>
     2e8:	90 93 56 03 	sts	0x0356, r25
     2ec:	80 93 55 03 	sts	0x0355, r24
     2f0:	fd 01       	movw	r30, r26
     2f2:	32 96       	adiw	r30, 0x02	; 2
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <malloc+0x14c>
     2f6:	ca 01       	movw	r24, r20
     2f8:	86 1b       	sub	r24, r22
     2fa:	97 0b       	sbc	r25, r23
     2fc:	fd 01       	movw	r30, r26
     2fe:	e8 0f       	add	r30, r24
     300:	f9 1f       	adc	r31, r25
     302:	61 93       	st	Z+, r22
     304:	71 93       	st	Z+, r23
     306:	02 97       	sbiw	r24, 0x02	; 2
     308:	8d 93       	st	X+, r24
     30a:	9c 93       	st	X, r25
     30c:	40 c0       	rjmp	.+128    	; 0x38e <malloc+0x14c>
     30e:	fd 01       	movw	r30, r26
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	9c 01       	movw	r18, r24
     316:	d9 01       	movw	r26, r18
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	a1 f6       	brne	.-88     	; 0x2c4 <malloc+0x82>
     31c:	80 91 53 03 	lds	r24, 0x0353
     320:	90 91 54 03 	lds	r25, 0x0354
     324:	89 2b       	or	r24, r25
     326:	41 f4       	brne	.+16     	; 0x338 <malloc+0xf6>
     328:	80 91 04 01 	lds	r24, 0x0104
     32c:	90 91 05 01 	lds	r25, 0x0105
     330:	90 93 54 03 	sts	0x0354, r25
     334:	80 93 53 03 	sts	0x0353, r24
     338:	40 91 06 01 	lds	r20, 0x0106
     33c:	50 91 07 01 	lds	r21, 0x0107
     340:	41 15       	cp	r20, r1
     342:	51 05       	cpc	r21, r1
     344:	41 f4       	brne	.+16     	; 0x356 <malloc+0x114>
     346:	4d b7       	in	r20, 0x3d	; 61
     348:	5e b7       	in	r21, 0x3e	; 62
     34a:	80 91 02 01 	lds	r24, 0x0102
     34e:	90 91 03 01 	lds	r25, 0x0103
     352:	48 1b       	sub	r20, r24
     354:	59 0b       	sbc	r21, r25
     356:	20 91 53 03 	lds	r18, 0x0353
     35a:	30 91 54 03 	lds	r19, 0x0354
     35e:	ca 01       	movw	r24, r20
     360:	82 1b       	sub	r24, r18
     362:	93 0b       	sbc	r25, r19
     364:	86 17       	cp	r24, r22
     366:	97 07       	cpc	r25, r23
     368:	80 f0       	brcs	.+32     	; 0x38a <malloc+0x148>
     36a:	ab 01       	movw	r20, r22
     36c:	4e 5f       	subi	r20, 0xFE	; 254
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	84 17       	cp	r24, r20
     372:	95 07       	cpc	r25, r21
     374:	50 f0       	brcs	.+20     	; 0x38a <malloc+0x148>
     376:	42 0f       	add	r20, r18
     378:	53 1f       	adc	r21, r19
     37a:	50 93 54 03 	sts	0x0354, r21
     37e:	40 93 53 03 	sts	0x0353, r20
     382:	f9 01       	movw	r30, r18
     384:	61 93       	st	Z+, r22
     386:	71 93       	st	Z+, r23
     388:	02 c0       	rjmp	.+4      	; 0x38e <malloc+0x14c>
     38a:	e0 e0       	ldi	r30, 0x00	; 0
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	cf 01       	movw	r24, r30
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <free>:
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	09 f4       	brne	.+2      	; 0x3a0 <free+0xa>
     39e:	50 c0       	rjmp	.+160    	; 0x440 <free+0xaa>
     3a0:	ec 01       	movw	r28, r24
     3a2:	22 97       	sbiw	r28, 0x02	; 2
     3a4:	1b 82       	std	Y+3, r1	; 0x03
     3a6:	1a 82       	std	Y+2, r1	; 0x02
     3a8:	a0 91 55 03 	lds	r26, 0x0355
     3ac:	b0 91 56 03 	lds	r27, 0x0356
     3b0:	10 97       	sbiw	r26, 0x00	; 0
     3b2:	09 f1       	breq	.+66     	; 0x3f6 <free+0x60>
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	ac 17       	cp	r26, r28
     3ba:	bd 07       	cpc	r27, r29
     3bc:	08 f1       	brcs	.+66     	; 0x400 <free+0x6a>
     3be:	bb 83       	std	Y+3, r27	; 0x03
     3c0:	aa 83       	std	Y+2, r26	; 0x02
     3c2:	fe 01       	movw	r30, r28
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	ae 17       	cp	r26, r30
     3ce:	bf 07       	cpc	r27, r31
     3d0:	79 f4       	brne	.+30     	; 0x3f0 <free+0x5a>
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	28 0f       	add	r18, r24
     3da:	39 1f       	adc	r19, r25
     3dc:	2e 5f       	subi	r18, 0xFE	; 254
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	39 83       	std	Y+1, r19	; 0x01
     3e2:	28 83       	st	Y, r18
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	8d 91       	ld	r24, X+
     3e8:	9c 91       	ld	r25, X
     3ea:	13 97       	sbiw	r26, 0x03	; 3
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
     3f0:	41 15       	cp	r20, r1
     3f2:	51 05       	cpc	r21, r1
     3f4:	71 f4       	brne	.+28     	; 0x412 <free+0x7c>
     3f6:	d0 93 56 03 	sts	0x0356, r29
     3fa:	c0 93 55 03 	sts	0x0355, r28
     3fe:	20 c0       	rjmp	.+64     	; 0x440 <free+0xaa>
     400:	12 96       	adiw	r26, 0x02	; 2
     402:	8d 91       	ld	r24, X+
     404:	9c 91       	ld	r25, X
     406:	13 97       	sbiw	r26, 0x03	; 3
     408:	ad 01       	movw	r20, r26
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	11 f0       	breq	.+4      	; 0x412 <free+0x7c>
     40e:	dc 01       	movw	r26, r24
     410:	d3 cf       	rjmp	.-90     	; 0x3b8 <free+0x22>
     412:	fa 01       	movw	r30, r20
     414:	d3 83       	std	Z+3, r29	; 0x03
     416:	c2 83       	std	Z+2, r28	; 0x02
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	e2 0f       	add	r30, r18
     41e:	f3 1f       	adc	r31, r19
     420:	ce 17       	cp	r28, r30
     422:	df 07       	cpc	r29, r31
     424:	69 f4       	brne	.+26     	; 0x440 <free+0xaa>
     426:	88 81       	ld	r24, Y
     428:	99 81       	ldd	r25, Y+1	; 0x01
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
     42e:	2e 5f       	subi	r18, 0xFE	; 254
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	fa 01       	movw	r30, r20
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <memset>:
     446:	dc 01       	movw	r26, r24
     448:	01 c0       	rjmp	.+2      	; 0x44c <memset+0x6>
     44a:	6d 93       	st	X+, r22
     44c:	41 50       	subi	r20, 0x01	; 1
     44e:	50 40       	sbci	r21, 0x00	; 0
     450:	e0 f7       	brcc	.-8      	; 0x44a <memset+0x4>
     452:	08 95       	ret

00000454 <_ZN7Display6BufferD1Ev>:
namespace Display {

class Buffer {
public:
	Buffer(){};
	virtual ~Buffer(){};
     454:	fc 01       	movw	r30, r24
     456:	8c e0       	ldi	r24, 0x0C	; 12
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret

00000460 <_ZN7Display6BufferD0Ev>:
     460:	fc 01       	movw	r30, r24
     462:	8c e0       	ldi	r24, 0x0C	; 12
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	80 83       	st	Z, r24
     46a:	cf 01       	movw	r24, r30
     46c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZdlPv>
     470:	08 95       	ret

00000472 <_ZN7Display6Buffer12_printSerialEcc>:

/**
 * Prints out the buffer to the serial port.  Note that the
 *  serial port must be opened before using this function.
 */
void Buffer::_printSerial(char ones, char zeros) {
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	7c 01       	movw	r14, r24
     48c:	86 2e       	mov	r8, r22
     48e:	94 2e       	mov	r9, r20
	int height = getHeight();
     490:	dc 01       	movw	r26, r24
     492:	ed 91       	ld	r30, X+
     494:	fc 91       	ld	r31, X
     496:	06 8c       	ldd	r0, Z+30	; 0x1e
     498:	f7 8d       	ldd	r31, Z+31	; 0x1f
     49a:	e0 2d       	mov	r30, r0
     49c:	09 95       	icall
     49e:	5c 01       	movw	r10, r24
	int width = getWidth();
     4a0:	d7 01       	movw	r26, r14
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	04 8c       	ldd	r0, Z+28	; 0x1c
     4a8:	f5 8d       	ldd	r31, Z+29	; 0x1d
     4aa:	e0 2d       	mov	r30, r0
     4ac:	c7 01       	movw	r24, r14
     4ae:	09 95       	icall
     4b0:	6c 01       	movw	r12, r24
     4b2:	00 e0       	ldi	r16, 0x00	; 0
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <_ZN7Display6Buffer12_printSerialEcc+0x84>

		// Loop across the bits
		for (int w = 0; w < width; w++) {

			// Get the bit
			Color color = getBit(w, h);
     4b8:	d7 01       	movw	r26, r14
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	04 88       	ldd	r0, Z+20	; 0x14
     4c0:	f5 89       	ldd	r31, Z+21	; 0x15
     4c2:	e0 2d       	mov	r30, r0
     4c4:	c7 01       	movw	r24, r14
     4c6:	be 01       	movw	r22, r28
     4c8:	a8 01       	movw	r20, r16
     4ca:	09 95       	icall

			// Print the bit
			char bitChar = (color == WHITE) ? ones : zeros;
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	11 f0       	breq	.+4      	; 0x4d4 <_ZN7Display6Buffer12_printSerialEcc+0x62>
     4d0:	69 2d       	mov	r22, r9
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <_ZN7Display6Buffer12_printSerialEcc+0x64>
     4d4:	68 2d       	mov	r22, r8
			Serial.print(bitChar);
     4d6:	88 e2       	ldi	r24, 0x28	; 40
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN5Print5printEc>

	// Loop over the height
	for (int h = 0; h < height; h++) {

		// Loop across the bits
		for (int w = 0; w < width; w++) {
     4de:	21 96       	adiw	r28, 0x01	; 1
     4e0:	cc 15       	cp	r28, r12
     4e2:	dd 05       	cpc	r29, r13
     4e4:	4c f3       	brlt	.-46     	; 0x4b8 <_ZN7Display6Buffer12_printSerialEcc+0x46>
			char bitChar = (color == WHITE) ? ones : zeros;
			Serial.print(bitChar);
		}

		// Print an end-line for each row
		Serial.println("");
     4e6:	88 e2       	ldi	r24, 0x28	; 40
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN5Print7printlnEPKc>
void Buffer::_printSerial(char ones, char zeros) {
	int height = getHeight();
	int width = getWidth();

	// Loop over the height
	for (int h = 0; h < height; h++) {
     4f2:	0f 5f       	subi	r16, 0xFF	; 255
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	0a 15       	cp	r16, r10
     4f8:	1b 05       	cpc	r17, r11
     4fa:	1c f4       	brge	.+6      	; 0x502 <__stack+0x3>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	ef cf       	rjmp	.-34     	; 0x4e0 <_ZN7Display6Buffer12_printSerialEcc+0x6e>
		}

		// Print an end-line for each row
		Serial.println("");
	}
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	08 95       	ret

0000051c <_ZN7Display8Buffer2DD1Ev>:
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
     51c:	fc 01       	movw	r30, r24
     51e:	8c e0       	ldi	r24, 0x0C	; 12
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	91 83       	std	Z+1, r25	; 0x01
     524:	80 83       	st	Z, r24
}
     526:	08 95       	ret

00000528 <_ZN7Display8Buffer2D5clearEv>:

void Buffer2D::clear() {
     528:	fc 01       	movw	r30, r24
	clear(_color);
     52a:	a0 81       	ld	r26, Z
     52c:	b1 81       	ldd	r27, Z+1	; 0x01
     52e:	62 85       	ldd	r22, Z+10	; 0x0a
     530:	73 85       	ldd	r23, Z+11	; 0x0b
     532:	16 96       	adiw	r26, 0x06	; 6
     534:	2d 91       	ld	r18, X+
     536:	3c 91       	ld	r19, X
     538:	17 97       	sbiw	r26, 0x07	; 7
     53a:	f9 01       	movw	r30, r18
     53c:	09 95       	icall
}
     53e:	08 95       	ret

00000540 <_ZN7Display8Buffer2D5clearENS_5ColorE>:

void Buffer2D::clear(Color color) {
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	7c 01       	movw	r14, r24
     552:	6b 01       	movw	r12, r22
     554:	c0 e0       	ldi	r28, 0x00	; 0
     556:	d0 e0       	ldi	r29, 0x00	; 0
     558:	12 c0       	rjmp	.+36     	; 0x57e <_ZN7Display8Buffer2D5clearENS_5ColorE+0x3e>

	for (int y = 0; y < _height; y++)
		fastHLine(0, y, _width, color);
     55a:	d7 01       	movw	r26, r14
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	11 97       	sbiw	r26, 0x01	; 1
     562:	12 96       	adiw	r26, 0x02	; 2
     564:	2d 91       	ld	r18, X+
     566:	3c 91       	ld	r19, X
     568:	13 97       	sbiw	r26, 0x03	; 3
     56a:	00 a0       	ldd	r0, Z+32	; 0x20
     56c:	f1 a1       	ldd	r31, Z+33	; 0x21
     56e:	e0 2d       	mov	r30, r0
     570:	c7 01       	movw	r24, r14
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	ae 01       	movw	r20, r28
     578:	86 01       	movw	r16, r12
     57a:	09 95       	icall
	clear(_color);
}

void Buffer2D::clear(Color color) {

	for (int y = 0; y < _height; y++)
     57c:	21 96       	adiw	r28, 0x01	; 1
     57e:	f7 01       	movw	r30, r14
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	c8 17       	cp	r28, r24
     586:	d9 07       	cpc	r29, r25
     588:	44 f3       	brlt	.-48     	; 0x55a <_ZN7Display8Buffer2D5clearENS_5ColorE+0x1a>
		fastHLine(0, y, _width, color);
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <_ZN7Display8Buffer2DC1EiiiPh>:
 *  \param height The height of image buffer in pixels
 *  \param pitchBytes The number of bytes provided for each row.
 *  	This must be at least floor( (width + 7)/8 ) bytes
 *  \param buff pointer to the display buffer array
 */
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	fc 01       	movw	r30, r24
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
     5a2:	84 e3       	ldi	r24, 0x34	; 52
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	73 83       	std	Z+3, r23	; 0x03
     5ac:	62 83       	std	Z+2, r22	; 0x02
     5ae:	55 83       	std	Z+5, r21	; 0x05
     5b0:	44 83       	std	Z+4, r20	; 0x04
     5b2:	37 83       	std	Z+7, r19	; 0x07
     5b4:	26 83       	std	Z+6, r18	; 0x06
     5b6:	11 87       	std	Z+9, r17	; 0x09
     5b8:	00 87       	std	Z+8, r16	; 0x08
     5ba:	13 86       	std	Z+11, r1	; 0x0b
     5bc:	12 86       	std	Z+10, r1	; 0x0a
	clear(_color);
     5be:	cf 01       	movw	r24, r30
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display8Buffer2D5clearENS_5ColorE>
}
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <_ZN7Display8Buffer2D9clearRectERNS_4RectE>:

	for (int y = 0; y < _height; y++)
		fastHLine(0, y, _width, color);
}

void Buffer2D::clearRect(Rect& rect) {
     5ce:	fc 01       	movw	r30, r24
	clearRect(rect, _color);
     5d0:	a0 81       	ld	r26, Z
     5d2:	b1 81       	ldd	r27, Z+1	; 0x01
     5d4:	42 85       	ldd	r20, Z+10	; 0x0a
     5d6:	53 85       	ldd	r21, Z+11	; 0x0b
     5d8:	50 96       	adiw	r26, 0x10	; 16
     5da:	2d 91       	ld	r18, X+
     5dc:	3c 91       	ld	r19, X
     5de:	51 97       	sbiw	r26, 0x11	; 17
     5e0:	f9 01       	movw	r30, r18
     5e2:	09 95       	icall
}
     5e4:	08 95       	ret

000005e6 <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE>:

void Buffer2D::clearRect(Rect& rect, Color color) {
     5e6:	8f 92       	push	r8
     5e8:	9f 92       	push	r9
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	5c 01       	movw	r10, r24
     600:	7b 01       	movw	r14, r22
     602:	4a 01       	movw	r8, r20
	int lastRow = rect.y0 + rect.height;
     604:	db 01       	movw	r26, r22
     606:	12 96       	adiw	r26, 0x02	; 2
     608:	cd 91       	ld	r28, X+
     60a:	dc 91       	ld	r29, X
     60c:	13 97       	sbiw	r26, 0x03	; 3
     60e:	16 96       	adiw	r26, 0x06	; 6
     610:	cd 90       	ld	r12, X+
     612:	dc 90       	ld	r13, X
     614:	17 97       	sbiw	r26, 0x07	; 7
     616:	cc 0e       	add	r12, r28
     618:	dd 1e       	adc	r13, r29
     61a:	13 c0       	rjmp	.+38     	; 0x642 <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE+0x5c>

	// Note: fastHLine will handle input error conditions
	for (int row = rect.y0; row < lastRow; row++)
		fastHLine(rect.x0, row, rect.width, color);
     61c:	d5 01       	movw	r26, r10
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	d7 01       	movw	r26, r14
     624:	6d 91       	ld	r22, X+
     626:	7c 91       	ld	r23, X
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	14 96       	adiw	r26, 0x04	; 4
     62c:	2d 91       	ld	r18, X+
     62e:	3c 91       	ld	r19, X
     630:	15 97       	sbiw	r26, 0x05	; 5
     632:	00 a0       	ldd	r0, Z+32	; 0x20
     634:	f1 a1       	ldd	r31, Z+33	; 0x21
     636:	e0 2d       	mov	r30, r0
     638:	c5 01       	movw	r24, r10
     63a:	ae 01       	movw	r20, r28
     63c:	84 01       	movw	r16, r8
     63e:	09 95       	icall

void Buffer2D::clearRect(Rect& rect, Color color) {
	int lastRow = rect.y0 + rect.height;

	// Note: fastHLine will handle input error conditions
	for (int row = rect.y0; row < lastRow; row++)
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	cc 15       	cp	r28, r12
     644:	dd 05       	cpc	r29, r13
     646:	54 f3       	brlt	.-44     	; 0x61c <_ZN7Display8Buffer2D9clearRectERNS_4RectENS_5ColorE+0x36>
		fastHLine(rect.x0, row, rect.width, color);
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	df 90       	pop	r13
     656:	cf 90       	pop	r12
     658:	bf 90       	pop	r11
     65a:	af 90       	pop	r10
     65c:	9f 90       	pop	r9
     65e:	8f 90       	pop	r8
     660:	08 95       	ret

00000662 <_ZN7Display8Buffer2D8clearRawEv>:

void Buffer2D::clearRaw() {
     662:	fc 01       	movw	r30, r24
	clearRaw(_color);
     664:	a0 81       	ld	r26, Z
     666:	b1 81       	ldd	r27, Z+1	; 0x01
     668:	62 85       	ldd	r22, Z+10	; 0x0a
     66a:	73 85       	ldd	r23, Z+11	; 0x0b
     66c:	9a 96       	adiw	r26, 0x2a	; 42
     66e:	2d 91       	ld	r18, X+
     670:	3c 91       	ld	r19, X
     672:	9b 97       	sbiw	r26, 0x2b	; 43
     674:	f9 01       	movw	r30, r18
     676:	09 95       	icall
}
     678:	08 95       	ret

0000067a <_ZN7Display8Buffer2D7setByteEjhj>:

void Buffer2D::fillRaw(uint8_t pattern) {
	memset(_buff, pattern, getSize());
}

void Buffer2D::setByte(unsigned int byteIndex, uint8_t data, unsigned int yIndex) {
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	f4 2e       	mov	r15, r20
	int i = byteIndex * (yIndex + 1);
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	26 9f       	mul	r18, r22
     68e:	80 01       	movw	r16, r0
     690:	27 9f       	mul	r18, r23
     692:	10 0d       	add	r17, r0
     694:	36 9f       	mul	r19, r22
     696:	10 0d       	add	r17, r0
     698:	11 24       	eor	r1, r1

	// Set data, if not over end of buffer
	if (i < getSize())
     69a:	e8 81       	ld	r30, Y
     69c:	f9 81       	ldd	r31, Y+1	; 0x01
     69e:	00 a8       	ldd	r0, Z+48	; 0x30
     6a0:	f1 a9       	ldd	r31, Z+49	; 0x31
     6a2:	e0 2d       	mov	r30, r0
     6a4:	09 95       	icall
     6a6:	08 17       	cp	r16, r24
     6a8:	19 07       	cpc	r17, r25
     6aa:	2c f4       	brge	.+10     	; 0x6b6 <_ZN7Display8Buffer2D7setByteEjhj+0x3c>
		_buff[i] = data;
     6ac:	e8 85       	ldd	r30, Y+8	; 0x08
     6ae:	f9 85       	ldd	r31, Y+9	; 0x09
     6b0:	e0 0f       	add	r30, r16
     6b2:	f1 1f       	adc	r31, r17
     6b4:	f0 82       	st	Z, r15
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	08 95       	ret

000006c2 <_ZN7Display8Buffer2D7getByteEjj>:

uint8_t Buffer2D::getByte(unsigned int byteIndex, unsigned int yIndex) {
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	ec 01       	movw	r28, r24
	int i = byteIndex * (yIndex + 1);
     6cc:	4f 5f       	subi	r20, 0xFF	; 255
     6ce:	5f 4f       	sbci	r21, 0xFF	; 255
     6d0:	46 9f       	mul	r20, r22
     6d2:	80 01       	movw	r16, r0
     6d4:	47 9f       	mul	r20, r23
     6d6:	10 0d       	add	r17, r0
     6d8:	56 9f       	mul	r21, r22
     6da:	10 0d       	add	r17, r0
     6dc:	11 24       	eor	r1, r1
	uint8_t retVal(0);

	// Set data, if not over end of buffer
	if (i < getSize())
     6de:	e8 81       	ld	r30, Y
     6e0:	f9 81       	ldd	r31, Y+1	; 0x01
     6e2:	00 a8       	ldd	r0, Z+48	; 0x30
     6e4:	f1 a9       	ldd	r31, Z+49	; 0x31
     6e6:	e0 2d       	mov	r30, r0
     6e8:	09 95       	icall
     6ea:	08 17       	cp	r16, r24
     6ec:	19 07       	cpc	r17, r25
     6ee:	14 f0       	brlt	.+4      	; 0x6f4 <_ZN7Display8Buffer2D7getByteEjj+0x32>
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <_ZN7Display8Buffer2D7getByteEjj+0x3c>
		retVal = _buff[i];
     6f4:	e8 85       	ldd	r30, Y+8	; 0x08
     6f6:	f9 85       	ldd	r31, Y+9	; 0x09
     6f8:	e0 0f       	add	r30, r16
     6fa:	f1 1f       	adc	r31, r17
     6fc:	80 81       	ld	r24, Z

	return retVal;
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <_ZN7Display8Buffer2D11printSerialEcc>:

void Buffer2D::printSerial(char ones, char zeros) {
     708:	dc 01       	movw	r26, r24
	_printSerial(ones, zeros);
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	02 a0       	ldd	r0, Z+34	; 0x22
     710:	f3 a1       	ldd	r31, Z+35	; 0x23
     712:	e0 2d       	mov	r30, r0
     714:	09 95       	icall
}
     716:	08 95       	ret

00000718 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE>:

void Buffer2D::setBit(int x, int y, Color color) {
     718:	fc 01       	movw	r30, r24
     71a:	d9 01       	movw	r26, r18
int Buffer2D::getSize() {
	return (_pitchBytes * _height);
}

bool Buffer2D::outOfBounds(int x, int y) {
	return (x >= _width || x < 0 || y >= _height || y < 0);
     71c:	82 81       	ldd	r24, Z+2	; 0x02
     71e:	93 81       	ldd	r25, Z+3	; 0x03
     720:	68 17       	cp	r22, r24
     722:	79 07       	cpc	r23, r25
     724:	b4 f5       	brge	.+108    	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     726:	77 fd       	sbrc	r23, 7
     728:	34 c0       	rjmp	.+104    	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	95 81       	ldd	r25, Z+5	; 0x05
     72e:	48 17       	cp	r20, r24
     730:	59 07       	cpc	r21, r25
     732:	7c f5       	brge	.+94     	; 0x792 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x7a>
     734:	57 ff       	sbrs	r21, 7
     736:	07 c0       	rjmp	.+14     	; 0x746 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x2e>
     738:	08 95       	ret

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));

	if (color == WHITE) {
		*bitBytePtr |= bit;  // set the bit
     73a:	28 2b       	or	r18, r24
     73c:	02 c0       	rjmp	.+4      	; 0x742 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x2a>
	} else {
		*bitBytePtr &= ~bit; // clear the bit
     73e:	80 95       	com	r24
     740:	28 23       	and	r18, r24
     742:	20 83       	st	Z, r18
     744:	08 95       	ret
	// Check input variables
	if (outOfBounds(x, y))
		return;

	// Get byte pointer that contains the bit
	uint8_t* bitBytePtr = _buff + (_pitchBytes * y) + (x / 8);
     746:	86 81       	ldd	r24, Z+6	; 0x06
     748:	97 81       	ldd	r25, Z+7	; 0x07
     74a:	9c 01       	movw	r18, r24
     74c:	42 9f       	mul	r20, r18
     74e:	c0 01       	movw	r24, r0
     750:	43 9f       	mul	r20, r19
     752:	90 0d       	add	r25, r0
     754:	52 9f       	mul	r21, r18
     756:	90 0d       	add	r25, r0
     758:	11 24       	eor	r1, r1
     75a:	9b 01       	movw	r18, r22
     75c:	43 e0       	ldi	r20, 0x03	; 3
     75e:	35 95       	asr	r19
     760:	27 95       	ror	r18
     762:	4a 95       	dec	r20
     764:	e1 f7       	brne	.-8      	; 0x75e <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x46>
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	00 84       	ldd	r0, Z+8	; 0x08
     76c:	f1 85       	ldd	r31, Z+9	; 0x09
     76e:	e0 2d       	mov	r30, r0
     770:	e8 0f       	add	r30, r24
     772:	f9 1f       	adc	r31, r25

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));
     774:	60 95       	com	r22
     776:	70 95       	com	r23
     778:	67 70       	andi	r22, 0x07	; 7
     77a:	70 70       	andi	r23, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	02 c0       	rjmp	.+4      	; 0x786 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x6e>
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	6a 95       	dec	r22
     788:	e2 f7       	brpl	.-8      	; 0x782 <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x6a>
     78a:	20 81       	ld	r18, Z

	if (color == WHITE) {
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	b9 f6       	brne	.-82     	; 0x73e <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x26>
     790:	d4 cf       	rjmp	.-88     	; 0x73a <_ZN7Display8Buffer2D6setBitEiiNS_5ColorE+0x22>
     792:	08 95       	ret

00000794 <_ZN7Display8Buffer2D6getBitEii>:
	} else {
		*bitBytePtr &= ~bit; // clear the bit
	}
}

Color Buffer2D::getBit(int x, int y) {
     794:	fc 01       	movw	r30, r24
int Buffer2D::getSize() {
	return (_pitchBytes * _height);
}

bool Buffer2D::outOfBounds(int x, int y) {
	return (x >= _width || x < 0 || y >= _height || y < 0);
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	93 81       	ldd	r25, Z+3	; 0x03
     79a:	68 17       	cp	r22, r24
     79c:	79 07       	cpc	r23, r25
     79e:	4c f4       	brge	.+18     	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7a0:	77 fd       	sbrc	r23, 7
     7a2:	07 c0       	rjmp	.+14     	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7a4:	84 81       	ldd	r24, Z+4	; 0x04
     7a6:	95 81       	ldd	r25, Z+5	; 0x05
     7a8:	48 17       	cp	r20, r24
     7aa:	59 07       	cpc	r21, r25
     7ac:	14 f4       	brge	.+4      	; 0x7b2 <_ZN7Display8Buffer2D6getBitEii+0x1e>
     7ae:	57 ff       	sbrs	r21, 7
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <_ZN7Display8Buffer2D6getBitEii+0x24>

Color Buffer2D::getBit(int x, int y) {

	// Check input variables
	if (outOfBounds(x, y))
		return _color;
     7b2:	82 85       	ldd	r24, Z+10	; 0x0a
     7b4:	93 85       	ldd	r25, Z+11	; 0x0b

	// Shift the byte to extract the desired bit
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}
     7b6:	08 95       	ret

Color Buffer2D::getBit(int x, int y) {

	// Check input variables
	if (outOfBounds(x, y))
		return _color;
     7b8:	86 81       	ldd	r24, Z+6	; 0x06
     7ba:	97 81       	ldd	r25, Z+7	; 0x07
     7bc:	9c 01       	movw	r18, r24
     7be:	42 9f       	mul	r20, r18
     7c0:	c0 01       	movw	r24, r0
     7c2:	43 9f       	mul	r20, r19
     7c4:	90 0d       	add	r25, r0
     7c6:	52 9f       	mul	r21, r18
     7c8:	90 0d       	add	r25, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	9b 01       	movw	r18, r22
     7ce:	53 e0       	ldi	r21, 0x03	; 3
     7d0:	35 95       	asr	r19
     7d2:	27 95       	ror	r18
     7d4:	5a 95       	dec	r21
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <_ZN7Display8Buffer2D6getBitEii+0x3c>
     7d8:	00 84       	ldd	r0, Z+8	; 0x08
     7da:	f1 85       	ldd	r31, Z+9	; 0x09
     7dc:	e0 2d       	mov	r30, r0
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	80 81       	ld	r24, Z
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	67 70       	andi	r22, 0x07	; 7
     7ec:	70 70       	andi	r23, 0x00	; 0
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_ZN7Display8Buffer2D6getBitEii+0x60>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	6a 95       	dec	r22
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <_ZN7Display8Buffer2D6getBitEii+0x5c>
     7f8:	88 1f       	adc	r24, r24
     7fa:	88 27       	eor	r24, r24
     7fc:	88 1f       	adc	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	08 95       	ret

00000802 <_ZN7Display8Buffer2D7set8BitEiih>:
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}

void Buffer2D::set8Bit(int x, int y, uint8_t data) {
     802:	0f 93       	push	r16
     804:	dc 01       	movw	r26, r24
	set8Bit(x, y, data, 0xFF);
     806:	ed 91       	ld	r30, X+
     808:	fc 91       	ld	r31, X
     80a:	00 8c       	ldd	r0, Z+24	; 0x18
     80c:	f1 8d       	ldd	r31, Z+25	; 0x19
     80e:	e0 2d       	mov	r30, r0
     810:	0f ef       	ldi	r16, 0xFF	; 255
     812:	09 95       	icall
}
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <_ZN7Display8Buffer2D7set8BitEiihh>:

void Buffer2D::set8Bit(int x, int y, uint8_t data, uint8_t mask) {
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ec 01       	movw	r28, r24
     82c:	7a 01       	movw	r14, r20
     82e:	d0 2e       	mov	r13, r16

	uint8_t bits1(data & mask), bits2(data & mask);

	// Return if non-existent row
	if (y >= _height || y < 0)
     830:	8c 81       	ldd	r24, Y+4	; 0x04
     832:	9d 81       	ldd	r25, Y+5	; 0x05
     834:	48 17       	cp	r20, r24
     836:	59 07       	cpc	r21, r25
     838:	0c f0       	brlt	.+2      	; 0x83c <_ZN7Display8Buffer2D7set8BitEiihh+0x24>
     83a:	9d c0       	rjmp	.+314    	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>
     83c:	57 fd       	sbrc	r21, 7
     83e:	9b c0       	rjmp	.+310    	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>
	set8Bit(x, y, data, 0xFF);
}

void Buffer2D::set8Bit(int x, int y, uint8_t data, uint8_t mask) {

	uint8_t bits1(data & mask), bits2(data & mask);
     840:	40 2f       	mov	r20, r16
     842:	42 23       	and	r20, r18
	// Return if non-existent row
	if (y >= _height || y < 0)
		return;

	// Special case for negative x-index
	if (x < 0) {
     844:	77 ff       	sbrs	r23, 7
     846:	2c c0       	rjmp	.+88     	; 0x8a0 <_ZN7Display8Buffer2D7set8BitEiihh+0x88>
		int bitsInBuffer = x + 8;
     848:	68 5f       	subi	r22, 0xF8	; 248
     84a:	7f 4f       	sbci	r23, 0xFF	; 255

		// If there are bits to set within the buffer
		if (bitsInBuffer > 0) {
     84c:	16 16       	cp	r1, r22
     84e:	17 06       	cpc	r1, r23
     850:	0c f0       	brlt	.+2      	; 0x854 <_ZN7Display8Buffer2D7set8BitEiihh+0x3c>
     852:	91 c0       	rjmp	.+290    	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>

			// Get the pointer to the first 8 bits in the row
			uint8_t* firstBitsInRow = _buff + (y * _pitchBytes);
     854:	8e 81       	ldd	r24, Y+6	; 0x06
     856:	9f 81       	ldd	r25, Y+7	; 0x07
     858:	9c 01       	movw	r18, r24
     85a:	e2 9e       	mul	r14, r18
     85c:	c0 01       	movw	r24, r0
     85e:	e3 9e       	mul	r14, r19
     860:	90 0d       	add	r25, r0
     862:	f2 9e       	mul	r15, r18
     864:	90 0d       	add	r25, r0
     866:	11 24       	eor	r1, r1
     868:	e8 85       	ldd	r30, Y+8	; 0x08
     86a:	f9 85       	ldd	r31, Y+9	; 0x09
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25

			// Clear the bits to set
			*firstBitsInRow &= (~(mask << (8 - bitsInBuffer)));
     870:	28 e0       	ldi	r18, 0x08	; 8
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	26 1b       	sub	r18, r22
     876:	37 0b       	sbc	r19, r23

			// Shift the data bits to the proper position
			bits1 <<= (8 - bitsInBuffer);
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	02 2e       	mov	r0, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <_ZN7Display8Buffer2D7set8BitEiihh+0x6a>
     87e:	44 0f       	add	r20, r20
     880:	55 1f       	adc	r21, r21
     882:	0a 94       	dec	r0
     884:	e2 f7       	brpl	.-8      	; 0x87e <_ZN7Display8Buffer2D7set8BitEiihh+0x66>

			// Set the bits in the buffer
			*firstBitsInRow |= bits1;
     886:	80 2f       	mov	r24, r16
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <_ZN7Display8Buffer2D7set8BitEiihh+0x78>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	2a 95       	dec	r18
     892:	e2 f7       	brpl	.-8      	; 0x88c <_ZN7Display8Buffer2D7set8BitEiihh+0x74>
     894:	80 95       	com	r24
     896:	20 81       	ld	r18, Z
     898:	82 23       	and	r24, r18
     89a:	84 2b       	or	r24, r20
     89c:	80 83       	st	Z, r24
     89e:	6b c0       	rjmp	.+214    	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>

		return;
	}

	// Calculate the index information into the byte array
	uint8_t byteIndex = x / 8;
     8a0:	cb 01       	movw	r24, r22
     8a2:	e3 e0       	ldi	r30, 0x03	; 3
     8a4:	95 95       	asr	r25
     8a6:	87 95       	ror	r24
     8a8:	ea 95       	dec	r30
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <_ZN7Display8Buffer2D7set8BitEiihh+0x8c>
     8ac:	18 2f       	mov	r17, r24
	uint8_t byteRem = x % 8;
     8ae:	77 e0       	ldi	r23, 0x07	; 7
     8b0:	c7 2e       	mov	r12, r23
     8b2:	c6 22       	and	r12, r22

	// Calculate the row's last byte's index
	uint8_t lastByteIndex = _pitchBytes - 1;
     8b4:	ee 81       	ldd	r30, Y+6	; 0x06
     8b6:	ff 81       	ldd	r31, Y+7	; 0x07
     8b8:	0e 2f       	mov	r16, r30
     8ba:	01 50       	subi	r16, 0x01	; 1

	// Calculate the mask for bits beyond display width
	uint8_t maskBits = 0xFF << (-_width % 8);
     8bc:	8a 81       	ldd	r24, Y+2	; 0x02
     8be:	9b 81       	ldd	r25, Y+3	; 0x03
     8c0:	90 95       	com	r25
     8c2:	81 95       	neg	r24
     8c4:	9f 4f       	sbci	r25, 0xFF	; 255
     8c6:	68 e0       	ldi	r22, 0x08	; 8
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
     8ce:	2f ef       	ldi	r18, 0xFF	; 255
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <_ZN7Display8Buffer2D7set8BitEiihh+0xc0>
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	8a 95       	dec	r24
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <_ZN7Display8Buffer2D7set8BitEiihh+0xbc>
     8dc:	b2 2e       	mov	r11, r18

	// Get byte that will contain the most significant part of the 8 bits
	uint8_t* bitsByte1 = _buff + (_pitchBytes * y) + byteIndex;
     8de:	ee 9e       	mul	r14, r30
     8e0:	c0 01       	movw	r24, r0
     8e2:	ef 9e       	mul	r14, r31
     8e4:	90 0d       	add	r25, r0
     8e6:	fe 9e       	mul	r15, r30
     8e8:	90 0d       	add	r25, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	81 0f       	add	r24, r17
     8ee:	91 1d       	adc	r25, r1
     8f0:	08 84       	ldd	r0, Y+8	; 0x08
     8f2:	d9 85       	ldd	r29, Y+9	; 0x09
     8f4:	c0 2d       	mov	r28, r0
     8f6:	c8 0f       	add	r28, r24
     8f8:	d9 1f       	adc	r29, r25

	// Shift data bits to align for saving into first byte
	bits1 >>= byteRem;
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	ec 2d       	mov	r30, r12
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	ca 01       	movw	r24, r20
     902:	0c 2c       	mov	r0, r12
     904:	02 c0       	rjmp	.+4      	; 0x90a <_ZN7Display8Buffer2D7set8BitEiihh+0xf2>
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <_ZN7Display8Buffer2D7set8BitEiihh+0xee>
     90e:	38 2f       	mov	r19, r24

	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
     910:	10 17       	cp	r17, r16
     912:	09 f4       	brne	.+2      	; 0x916 <_ZN7Display8Buffer2D7set8BitEiihh+0xfe>
		bits1 &= maskBits;
     914:	3b 21       	and	r19, r11

	// Clear the bits to set
	*bitsByte1 &= ~(mask >> byteRem);
     916:	ad 2d       	mov	r26, r13
     918:	b0 e0       	ldi	r27, 0x00	; 0

	// Set the first byte containing some of the 8 bits
	*bitsByte1 |= bits1;
     91a:	cd 01       	movw	r24, r26
     91c:	0e 2e       	mov	r0, r30
     91e:	02 c0       	rjmp	.+4      	; 0x924 <_ZN7Display8Buffer2D7set8BitEiihh+0x10c>
     920:	95 95       	asr	r25
     922:	87 95       	ror	r24
     924:	0a 94       	dec	r0
     926:	e2 f7       	brpl	.-8      	; 0x920 <_ZN7Display8Buffer2D7set8BitEiihh+0x108>
     928:	80 95       	com	r24
     92a:	28 81       	ld	r18, Y
     92c:	82 23       	and	r24, r18
     92e:	38 2b       	or	r19, r24
     930:	38 83       	st	Y, r19

	// If we need to set bits in the following byte as well
	if (byteRem > 0 && (byteIndex < lastByteIndex)) {
     932:	cc 20       	and	r12, r12
     934:	01 f1       	breq	.+64     	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>
     936:	10 17       	cp	r17, r16
     938:	f0 f4       	brcc	.+60     	; 0x976 <_ZN7Display8Buffer2D7set8BitEiihh+0x15e>

		// Get byte that will contain the least significant part of the 8 bits
		uint8_t* bitsByte2 = bitsByte1 + 1;

		// Shift data bits to align for saving into second byte
		bits2 <<= (8 - byteRem);
     93a:	68 e0       	ldi	r22, 0x08	; 8
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	6e 1b       	sub	r22, r30
     940:	7f 0b       	sbc	r23, r31
     942:	06 2e       	mov	r0, r22
     944:	02 c0       	rjmp	.+4      	; 0x94a <_ZN7Display8Buffer2D7set8BitEiihh+0x132>
     946:	44 0f       	add	r20, r20
     948:	55 1f       	adc	r21, r21
     94a:	0a 94       	dec	r0
     94c:	e2 f7       	brpl	.-8      	; 0x946 <_ZN7Display8Buffer2D7set8BitEiihh+0x12e>

		// Mask out bits beyond width of display
		if (byteIndex + 1 == lastByteIndex)
     94e:	81 2f       	mov	r24, r17
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	20 2f       	mov	r18, r16
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	09 f4       	brne	.+2      	; 0x960 <_ZN7Display8Buffer2D7set8BitEiihh+0x148>
			bits2 &= maskBits;
     95e:	4b 21       	and	r20, r11

		// Clear the bits to set
		*bitsByte2 &= (~(mask << (8 - byteRem)));

		// Set the second byte containing the rest of the 8 bits
		*bitsByte2 |= bits2;
     960:	02 c0       	rjmp	.+4      	; 0x966 <_ZN7Display8Buffer2D7set8BitEiihh+0x14e>
     962:	aa 0f       	add	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	6a 95       	dec	r22
     968:	e2 f7       	brpl	.-8      	; 0x962 <_ZN7Display8Buffer2D7set8BitEiihh+0x14a>
     96a:	8a 2f       	mov	r24, r26
     96c:	80 95       	com	r24
     96e:	99 81       	ldd	r25, Y+1	; 0x01
     970:	89 23       	and	r24, r25
     972:	48 2b       	or	r20, r24
     974:	49 83       	std	Y+1, r20	; 0x01
	}
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	08 95       	ret

0000098a <_ZN7Display8Buffer2D7get8BitEii>:

uint8_t Buffer2D::get8Bit(int x, int y) {
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	ec 01       	movw	r28, r24
     998:	8a 01       	movw	r16, r20

	uint8_t bits1(0), bits2(0);

	// Return if non-existent row
	if (y >= _height || y < 0)
     99a:	8c 81       	ldd	r24, Y+4	; 0x04
     99c:	9d 81       	ldd	r25, Y+5	; 0x05
     99e:	48 17       	cp	r20, r24
     9a0:	59 07       	cpc	r21, r25
     9a2:	14 f4       	brge	.+4      	; 0x9a8 <_ZN7Display8Buffer2D7get8BitEii+0x1e>
     9a4:	57 ff       	sbrs	r21, 7
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <_ZN7Display8Buffer2D7get8BitEii+0x2c>
		return (_color == BLACK) ? BLACKBYTE : WHITEBYTE;
     9a8:	8a 85       	ldd	r24, Y+10	; 0x0a
     9aa:	9b 85       	ldd	r25, Y+11	; 0x0b
     9ac:	89 2b       	or	r24, r25
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <_ZN7Display8Buffer2D7get8BitEii+0x28>
     9b0:	7b c0       	rjmp	.+246    	; 0xaa8 <_ZN7Display8Buffer2D7get8BitEii+0x11e>
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	7a c0       	rjmp	.+244    	; 0xaaa <_ZN7Display8Buffer2D7get8BitEii+0x120>

	// Special case for negative x-index
	if (x < 0) {
     9b6:	77 ff       	sbrs	r23, 7
     9b8:	21 c0       	rjmp	.+66     	; 0x9fc <_ZN7Display8Buffer2D7get8BitEii+0x72>
		uint8_t retNeg(0);
		int bitsInBuffer = x + 8;
     9ba:	68 5f       	subi	r22, 0xF8	; 248
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255

		// If there are requested bits within the buffer
		if (bitsInBuffer > 0) {
     9be:	16 16       	cp	r1, r22
     9c0:	17 06       	cpc	r1, r23
     9c2:	0c f0       	brlt	.+2      	; 0x9c6 <_ZN7Display8Buffer2D7get8BitEii+0x3c>
     9c4:	71 c0       	rjmp	.+226    	; 0xaa8 <_ZN7Display8Buffer2D7get8BitEii+0x11e>

			// Get the first 8 bits in the row
			uint8_t firstBitsInRow = _buff[y * _pitchBytes];

			// Shift the bits to the proper position
			retNeg = firstBitsInRow >> (8 - bitsInBuffer);
     9c6:	8e 81       	ldd	r24, Y+6	; 0x06
     9c8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ca:	9c 01       	movw	r18, r24
     9cc:	42 9f       	mul	r20, r18
     9ce:	c0 01       	movw	r24, r0
     9d0:	43 9f       	mul	r20, r19
     9d2:	90 0d       	add	r25, r0
     9d4:	52 9f       	mul	r21, r18
     9d6:	90 0d       	add	r25, r0
     9d8:	11 24       	eor	r1, r1
     9da:	e8 85       	ldd	r30, Y+8	; 0x08
     9dc:	f9 85       	ldd	r31, Y+9	; 0x09
     9de:	e8 0f       	add	r30, r24
     9e0:	f9 1f       	adc	r31, r25
     9e2:	20 81       	ld	r18, Z
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	86 1b       	sub	r24, r22
     9ec:	97 0b       	sbc	r25, r23
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <_ZN7Display8Buffer2D7get8BitEii+0x6a>
     9f0:	35 95       	asr	r19
     9f2:	27 95       	ror	r18
     9f4:	8a 95       	dec	r24
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <_ZN7Display8Buffer2D7get8BitEii+0x66>
     9f8:	82 2f       	mov	r24, r18
     9fa:	57 c0       	rjmp	.+174    	; 0xaaa <_ZN7Display8Buffer2D7get8BitEii+0x120>

		return retNeg;
	}

	// Calculate the index information into the byte array
	uint8_t byteIndex = x / 8;
     9fc:	cb 01       	movw	r24, r22
     9fe:	f3 e0       	ldi	r31, 0x03	; 3
     a00:	95 95       	asr	r25
     a02:	87 95       	ror	r24
     a04:	fa 95       	dec	r31
     a06:	e1 f7       	brne	.-8      	; 0xa00 <_ZN7Display8Buffer2D7get8BitEii+0x76>
     a08:	f8 2e       	mov	r15, r24
	uint8_t byteRem = x % 8;
     a0a:	46 2f       	mov	r20, r22
     a0c:	47 70       	andi	r20, 0x07	; 7

	// Calculate the row's last byte's index
	uint8_t lastByteIndex = _pitchBytes - 1;
     a0e:	ee 81       	ldd	r30, Y+6	; 0x06
     a10:	ff 81       	ldd	r31, Y+7	; 0x07
     a12:	ee 2e       	mov	r14, r30
     a14:	ea 94       	dec	r14

	// Calculate the mask for bits beyond display width
	uint8_t maskBits = 0xFF << (8 - _width % 8);
     a16:	28 e0       	ldi	r18, 0x08	; 8
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	9b 81       	ldd	r25, Y+3	; 0x03
     a1e:	68 e0       	ldi	r22, 0x08	; 8
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
     a26:	28 1b       	sub	r18, r24
     a28:	39 0b       	sbc	r19, r25
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN7Display8Buffer2D7get8BitEii+0xaa>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	2a 95       	dec	r18
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <_ZN7Display8Buffer2D7get8BitEii+0xa6>
     a38:	a8 2f       	mov	r26, r24

	// Get byte that contains the most significant part of the 8-bits
	uint8_t* bitsByte1 = _buff + (_pitchBytes * y) + byteIndex;
     a3a:	0e 9f       	mul	r16, r30
     a3c:	c0 01       	movw	r24, r0
     a3e:	0f 9f       	mul	r16, r31
     a40:	90 0d       	add	r25, r0
     a42:	1e 9f       	mul	r17, r30
     a44:	90 0d       	add	r25, r0
     a46:	11 24       	eor	r1, r1
     a48:	8f 0d       	add	r24, r15
     a4a:	91 1d       	adc	r25, r1
     a4c:	e8 85       	ldd	r30, Y+8	; 0x08
     a4e:	f9 85       	ldd	r31, Y+9	; 0x09
     a50:	e8 0f       	add	r30, r24
     a52:	f9 1f       	adc	r31, r25

	// Get 1st Byte containing bits
	bits1 = *bitsByte1;
     a54:	50 81       	ld	r21, Z

	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
     a56:	fe 14       	cp	r15, r14
     a58:	09 f4       	brne	.+2      	; 0xa5c <_ZN7Display8Buffer2D7get8BitEii+0xd2>
		bits1 &= maskBits;
     a5a:	5a 23       	and	r21, r26

	// Shift the bits by the remainder to realign left
	bits1 <<= byteRem;
     a5c:	64 2f       	mov	r22, r20
     a5e:	70 e0       	ldi	r23, 0x00	; 0

	// If we need data from the following byte as well
	if (byteRem > 0 && (byteIndex < lastByteIndex)) {
     a60:	44 23       	and	r20, r20
     a62:	c1 f0       	breq	.+48     	; 0xa94 <_ZN7Display8Buffer2D7get8BitEii+0x10a>
     a64:	fe 14       	cp	r15, r14
     a66:	b0 f4       	brcc	.+44     	; 0xa94 <_ZN7Display8Buffer2D7get8BitEii+0x10a>

		// Get byte that contains the least significant part of the 8 bits
		uint8_t* bitsByte2 = bitsByte1 + 1;

		// Get 2nd Byte containing bits
		bits2 = *bitsByte2;
     a68:	41 81       	ldd	r20, Z+1	; 0x01

		// Mask out bits beyond width of display
		if (byteIndex + 1 == lastByteIndex)
     a6a:	8f 2d       	mov	r24, r15
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	2e 2d       	mov	r18, r14
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	09 f4       	brne	.+2      	; 0xa7c <_ZN7Display8Buffer2D7get8BitEii+0xf2>
			bits2 &= maskBits;
     a7a:	4a 23       	and	r20, r26

		// Shift the byte to extract the desired bits
		bits2 >>= (8 - byteRem);
     a7c:	24 2f       	mov	r18, r20
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	86 1b       	sub	r24, r22
     a86:	97 0b       	sbc	r25, r23
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <_ZN7Display8Buffer2D7get8BitEii+0x104>
     a8a:	35 95       	asr	r19
     a8c:	27 95       	ror	r18
     a8e:	8a 95       	dec	r24
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <_ZN7Display8Buffer2D7get8BitEii+0x100>
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <_ZN7Display8Buffer2D7get8BitEii+0x10c>
     a94:	20 e0       	ldi	r18, 0x00	; 0
	// Mask out bits beyond width of display
	if (byteIndex == lastByteIndex)
		bits1 &= maskBits;

	// Shift the bits by the remainder to realign left
	bits1 <<= byteRem;
     a96:	85 2f       	mov	r24, r21
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <_ZN7Display8Buffer2D7get8BitEii+0x116>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <_ZN7Display8Buffer2D7get8BitEii+0x112>

		// Shift the byte to extract the desired bits
		bits2 >>= (8 - byteRem);
	}

	return bits1 | bits2;
     aa4:	82 2b       	or	r24, r18
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <_ZN7Display8Buffer2D7get8BitEii+0x120>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <_ZN7Display8Buffer2D8setColorENS_5ColorE>:
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
	memset(buff, writeVal, bytes);
}

void Buffer2D::setColor(Color color) {
	_color = color;
     ab8:	fc 01       	movw	r30, r24
     aba:	73 87       	std	Z+11, r23	; 0x0b
     abc:	62 87       	std	Z+10, r22	; 0x0a
}
     abe:	08 95       	ret

00000ac0 <_ZN7Display8Buffer2D8getColorEv>:

Color Buffer2D::getColor() {
     ac0:	fc 01       	movw	r30, r24
	return _color;
}
     ac2:	82 85       	ldd	r24, Z+10	; 0x0a
     ac4:	93 85       	ldd	r25, Z+11	; 0x0b
     ac6:	08 95       	ret

00000ac8 <_ZN7Display8Buffer2D8getWidthEv>:

int Buffer2D::getWidth() {
     ac8:	fc 01       	movw	r30, r24
	return _width;
}
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	93 81       	ldd	r25, Z+3	; 0x03
     ace:	08 95       	ret

00000ad0 <_ZN7Display8Buffer2D9getHeightEv>:

int Buffer2D::getHeight() {
     ad0:	fc 01       	movw	r30, r24
	return _height;
}
     ad2:	84 81       	ldd	r24, Z+4	; 0x04
     ad4:	95 81       	ldd	r25, Z+5	; 0x05
     ad6:	08 95       	ret

00000ad8 <_ZN7Display8Buffer2D13getPitchBytesEv>:

int Buffer2D::getPitchBytes() {
     ad8:	fc 01       	movw	r30, r24
	return _pitchBytes;
}
     ada:	86 81       	ldd	r24, Z+6	; 0x06
     adc:	97 81       	ldd	r25, Z+7	; 0x07
     ade:	08 95       	ret

00000ae0 <_ZN7Display8Buffer2D7getSizeEv>:

int Buffer2D::getSize() {
     ae0:	fc 01       	movw	r30, r24
     ae2:	24 81       	ldd	r18, Z+4	; 0x04
     ae4:	35 81       	ldd	r19, Z+5	; 0x05
     ae6:	86 81       	ldd	r24, Z+6	; 0x06
     ae8:	97 81       	ldd	r25, Z+7	; 0x07
     aea:	a9 01       	movw	r20, r18
     aec:	48 9f       	mul	r20, r24
     aee:	90 01       	movw	r18, r0
     af0:	49 9f       	mul	r20, r25
     af2:	30 0d       	add	r19, r0
     af4:	58 9f       	mul	r21, r24
     af6:	30 0d       	add	r19, r0
     af8:	11 24       	eor	r1, r1
	return (_pitchBytes * _height);
}
     afa:	c9 01       	movw	r24, r18
     afc:	08 95       	ret

00000afe <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>:
			setBit(lastBitsX + i, y, color);
	}
}

void Buffer2D::memsetColor(uint8_t* buff, Color color, size_t bytes) {
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
     afe:	41 30       	cpi	r20, 0x01	; 1
     b00:	51 05       	cpc	r21, r1
     b02:	11 f0       	breq	.+4      	; 0xb08 <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj+0xa>
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj+0xc>
     b08:	4f ef       	ldi	r20, 0xFF	; 255
	memset(buff, writeVal, bytes);
     b0a:	cb 01       	movw	r24, r22
     b0c:	64 2f       	mov	r22, r20
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	a9 01       	movw	r20, r18
     b12:	0e 94 23 02 	call	0x446	; 0x446 <memset>
}
     b16:	08 95       	ret

00000b18 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE>:
	}

	return bits1 | bits2;
}

void Buffer2D::fastHLine(int x, int y, int width, Color color) {
     b18:	2f 92       	push	r2
     b1a:	3f 92       	push	r3
     b1c:	4f 92       	push	r4
     b1e:	5f 92       	push	r5
     b20:	6f 92       	push	r6
     b22:	7f 92       	push	r7
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x26>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	5c 01       	movw	r10, r24
     b46:	7b 83       	std	Y+3, r23	; 0x03
     b48:	6a 83       	std	Y+2, r22	; 0x02
     b4a:	2a 01       	movw	r4, r20
     b4c:	79 01       	movw	r14, r18
     b4e:	18 01       	movw	r2, r16

	// Handle out-of-bounds X
	if (x > _width)
     b50:	dc 01       	movw	r26, r24
     b52:	12 96       	adiw	r26, 0x02	; 2
     b54:	ed 91       	ld	r30, X+
     b56:	fc 91       	ld	r31, X
     b58:	13 97       	sbiw	r26, 0x03	; 3
     b5a:	e6 17       	cp	r30, r22
     b5c:	f7 07       	cpc	r31, r23
     b5e:	0c f4       	brge	.+2      	; 0xb62 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x4a>
     b60:	c2 c0       	rjmp	.+388    	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Handle out-of-bounds Y
	if (y < 0 || y >= _height)
     b62:	57 fd       	sbrc	r21, 7
     b64:	c0 c0       	rjmp	.+384    	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
     b66:	14 96       	adiw	r26, 0x04	; 4
     b68:	8d 91       	ld	r24, X+
     b6a:	9c 91       	ld	r25, X
     b6c:	15 97       	sbiw	r26, 0x05	; 5
     b6e:	48 17       	cp	r20, r24
     b70:	59 07       	cpc	r21, r25
     b72:	0c f0       	brlt	.+2      	; 0xb76 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x5e>
     b74:	b8 c0       	rjmp	.+368    	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Handle 0-width
	if (width == 0)
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x66>
     b7c:	b4 c0       	rjmp	.+360    	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
		return;

	// Fix negative width
	if (width < 0) {
     b7e:	37 ff       	sbrs	r19, 7
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x7c>
		width = abs(width);
     b82:	f0 94       	com	r15
     b84:	e1 94       	neg	r14
     b86:	f1 08       	sbc	r15, r1
     b88:	f3 94       	inc	r15
		x -= width;
     b8a:	ab 01       	movw	r20, r22
     b8c:	4e 19       	sub	r20, r14
     b8e:	5f 09       	sbc	r21, r15
     b90:	5b 83       	std	Y+3, r21	; 0x03
     b92:	4a 83       	std	Y+2, r20	; 0x02
	}

	// Handle negative X
	if (x < 0) {
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	9b 81       	ldd	r25, Y+3	; 0x03
     b98:	97 ff       	sbrs	r25, 7
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x90>
		if (x + width < 0)
     b9c:	e8 0e       	add	r14, r24
     b9e:	f9 1e       	adc	r15, r25
     ba0:	f7 fc       	sbrc	r15, 7
     ba2:	a1 c0       	rjmp	.+322    	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
			return;
     ba4:	1b 82       	std	Y+3, r1	; 0x03
     ba6:	1a 82       	std	Y+2, r1	; 0x02
		width += x;
		x = 0;
	}

	// Fix out-of-bounds width
	if (x + width > _width)
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	9b 81       	ldd	r25, Y+3	; 0x03
     bac:	8e 0d       	add	r24, r14
     bae:	9f 1d       	adc	r25, r15
     bb0:	e8 17       	cp	r30, r24
     bb2:	f9 07       	cpc	r31, r25
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0xa8>
		width = _width - x;
     bb6:	7f 01       	movw	r14, r30
     bb8:	aa 81       	ldd	r26, Y+2	; 0x02
     bba:	bb 81       	ldd	r27, Y+3	; 0x03
     bbc:	ea 1a       	sub	r14, r26
     bbe:	fb 0a       	sbc	r15, r27

	// Calculate indexes
	uint8_t startRem = x % 8;
     bc0:	2a 81       	ldd	r18, Y+2	; 0x02
     bc2:	3b 81       	ldd	r19, Y+3	; 0x03
     bc4:	27 70       	andi	r18, 0x07	; 7
     bc6:	30 70       	andi	r19, 0x00	; 0
     bc8:	62 2e       	mov	r6, r18
	uint8_t endRem = (x + width) % 8;
     bca:	8a 80       	ldd	r8, Y+2	; 0x02
     bcc:	9b 80       	ldd	r9, Y+3	; 0x03
     bce:	8e 0c       	add	r8, r14
     bd0:	9f 1c       	adc	r9, r15
     bd2:	c4 01       	movw	r24, r8
     bd4:	68 e0       	ldi	r22, 0x08	; 8
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
     bdc:	89 83       	std	Y+1, r24	; 0x01

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
     bde:	22 23       	and	r18, r18
     be0:	59 f4       	brne	.+22     	; 0xbf8 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0xe0>
     be2:	b8 e0       	ldi	r27, 0x08	; 8
     be4:	eb 16       	cp	r14, r27
     be6:	f1 04       	cpc	r15, r1
     be8:	3c f0       	brlt	.+14     	; 0xbf8 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0xe0>
     bea:	77 24       	eor	r7, r7
     bec:	e8 15       	cp	r30, r8
     bee:	f9 05       	cpc	r31, r9
     bf0:	24 f0       	brlt	.+8      	; 0xbfa <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0xe2>
     bf2:	77 24       	eor	r7, r7
     bf4:	73 94       	inc	r7
     bf6:	1f c0       	rjmp	.+62     	; 0xc36 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x11e>
     bf8:	77 24       	eor	r7, r7
	if (!fullByte1) {
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     bfe:	b8 e0       	ldi	r27, 0x08	; 8
     c00:	cb 2e       	mov	r12, r27
     c02:	d1 2c       	mov	r13, r1
     c04:	c6 18       	sub	r12, r6
     c06:	d1 08       	sbc	r13, r1
     c08:	10 c0       	rjmp	.+32     	; 0xc2a <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x112>
			setBit(x + i, y, color);
     c0a:	d5 01       	movw	r26, r10
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	6a 81       	ldd	r22, Y+2	; 0x02
     c12:	7b 81       	ldd	r23, Y+3	; 0x03
     c14:	60 0f       	add	r22, r16
     c16:	71 1f       	adc	r23, r17
     c18:	02 88       	ldd	r0, Z+18	; 0x12
     c1a:	f3 89       	ldd	r31, Z+19	; 0x13
     c1c:	e0 2d       	mov	r30, r0
     c1e:	c5 01       	movw	r24, r10
     c20:	a2 01       	movw	r20, r4
     c22:	91 01       	movw	r18, r2
     c24:	09 95       	icall
	uint8_t endRem = (x + width) % 8;

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
	if (!fullByte1) {
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     c26:	0f 5f       	subi	r16, 0xFF	; 255
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	0e 15       	cp	r16, r14
     c2c:	1f 05       	cpc	r17, r15
     c2e:	1c f4       	brge	.+6      	; 0xc36 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x11e>
     c30:	0c 15       	cp	r16, r12
     c32:	1d 05       	cpc	r17, r13
     c34:	54 f3       	brlt	.-44     	; 0xc0a <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0xf2>
			setBit(x + i, y, color);
	}

	// Write the middle byte-aligned 8-bit blocks (fast)
	uint8_t nMiddleBytes = (width - (8 - startRem) - endRem) / 8 + fullByte1;
     c36:	06 2d       	mov	r16, r6
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	b9 81       	ldd	r27, Y+1	; 0x01
     c3c:	cb 2e       	mov	r12, r27
     c3e:	dd 24       	eor	r13, r13
     c40:	c8 01       	movw	r24, r16
     c42:	08 97       	sbiw	r24, 0x08	; 8
     c44:	8e 0d       	add	r24, r14
     c46:	9f 1d       	adc	r25, r15
     c48:	8c 19       	sub	r24, r12
     c4a:	9d 09       	sbc	r25, r13
     c4c:	68 e0       	ldi	r22, 0x08	; 8
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodhi4>
     c54:	26 2f       	mov	r18, r22
     c56:	27 0d       	add	r18, r7
	if (nMiddleBytes > 0) {
     c58:	31 f1       	breq	.+76     	; 0xca6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x18e>
		uint8_t* middleByte = _buff + (y * _pitchBytes) + ((x + 7) / 8);
		memsetColor(middleByte, color, nMiddleBytes);
     c5a:	ea 81       	ldd	r30, Y+2	; 0x02
     c5c:	fb 81       	ldd	r31, Y+3	; 0x03
     c5e:	37 96       	adiw	r30, 0x07	; 7
     c60:	a3 e0       	ldi	r26, 0x03	; 3
     c62:	f5 95       	asr	r31
     c64:	e7 95       	ror	r30
     c66:	aa 95       	dec	r26
     c68:	e1 f7       	brne	.-8      	; 0xc62 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x14a>
     c6a:	fb 83       	std	Y+3, r31	; 0x03
     c6c:	ea 83       	std	Y+2, r30	; 0x02
     c6e:	d5 01       	movw	r26, r10
     c70:	16 96       	adiw	r26, 0x06	; 6
     c72:	8d 91       	ld	r24, X+
     c74:	9c 91       	ld	r25, X
     c76:	17 97       	sbiw	r26, 0x07	; 7
     c78:	fc 01       	movw	r30, r24
     c7a:	4e 9e       	mul	r4, r30
     c7c:	c0 01       	movw	r24, r0
     c7e:	4f 9e       	mul	r4, r31
     c80:	90 0d       	add	r25, r0
     c82:	5e 9e       	mul	r5, r30
     c84:	90 0d       	add	r25, r0
     c86:	11 24       	eor	r1, r1
     c88:	4a 81       	ldd	r20, Y+2	; 0x02
     c8a:	5b 81       	ldd	r21, Y+3	; 0x03
     c8c:	84 0f       	add	r24, r20
     c8e:	95 1f       	adc	r25, r21
     c90:	18 96       	adiw	r26, 0x08	; 8
     c92:	6d 91       	ld	r22, X+
     c94:	7c 91       	ld	r23, X
     c96:	19 97       	sbiw	r26, 0x09	; 9
     c98:	68 0f       	add	r22, r24
     c9a:	79 1f       	adc	r23, r25
     c9c:	c5 01       	movw	r24, r10
     c9e:	a1 01       	movw	r20, r2
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
     ca6:	59 81       	ldd	r21, Y+1	; 0x01
     ca8:	55 23       	and	r21, r21
     caa:	e9 f0       	breq	.+58     	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
     cac:	0e 0d       	add	r16, r14
     cae:	1f 1d       	adc	r17, r15
     cb0:	09 30       	cpi	r16, 0x09	; 9
     cb2:	11 05       	cpc	r17, r1
     cb4:	c4 f0       	brlt	.+48     	; 0xce6 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1ce>
		int lastBitsX = x + width - endRem;
     cb6:	74 01       	movw	r14, r8
     cb8:	ec 18       	sub	r14, r12
     cba:	fd 08       	sbc	r15, r13
     cbc:	00 e0       	ldi	r16, 0x00	; 0
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	0f c0       	rjmp	.+30     	; 0xce0 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1c8>
		for (int i = 0; i < endRem; i++)
			setBit(lastBitsX + i, y, color);
     cc2:	d5 01       	movw	r26, r10
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	b8 01       	movw	r22, r16
     cca:	6e 0d       	add	r22, r14
     ccc:	7f 1d       	adc	r23, r15
     cce:	02 88       	ldd	r0, Z+18	; 0x12
     cd0:	f3 89       	ldd	r31, Z+19	; 0x13
     cd2:	e0 2d       	mov	r30, r0
     cd4:	c5 01       	movw	r24, r10
     cd6:	a2 01       	movw	r20, r4
     cd8:	91 01       	movw	r18, r2
     cda:	09 95       	icall
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
		int lastBitsX = x + width - endRem;
		for (int i = 0; i < endRem; i++)
     cdc:	0f 5f       	subi	r16, 0xFF	; 255
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	0c 15       	cp	r16, r12
     ce2:	1d 05       	cpc	r17, r13
     ce4:	74 f3       	brlt	.-36     	; 0xcc2 <_ZN7Display8Buffer2D9fastHLineEiiiNS_5ColorE+0x1aa>
			setBit(lastBitsX + i, y, color);
	}
}
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	7f 90       	pop	r7
     d06:	6f 90       	pop	r6
     d08:	5f 90       	pop	r5
     d0a:	4f 90       	pop	r4
     d0c:	3f 90       	pop	r3
     d0e:	2f 90       	pop	r2
     d10:	08 95       	ret

00000d12 <_ZN7Display8Buffer2D8clearRawENS_5ColorE>:

void Buffer2D::clearRaw() {
	clearRaw(_color);
}

void Buffer2D::clearRaw(Color color) {
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	8c 01       	movw	r16, r24
     d20:	6b 01       	movw	r12, r22
	memsetColor(_buff, color, getSize());
     d22:	dc 01       	movw	r26, r24
     d24:	18 96       	adiw	r26, 0x08	; 8
     d26:	ed 90       	ld	r14, X+
     d28:	fc 90       	ld	r15, X
     d2a:	19 97       	sbiw	r26, 0x09	; 9
     d2c:	ed 91       	ld	r30, X+
     d2e:	fc 91       	ld	r31, X
     d30:	00 a8       	ldd	r0, Z+48	; 0x30
     d32:	f1 a9       	ldd	r31, Z+49	; 0x31
     d34:	e0 2d       	mov	r30, r0
     d36:	09 95       	icall
     d38:	9c 01       	movw	r18, r24
     d3a:	c8 01       	movw	r24, r16
     d3c:	b7 01       	movw	r22, r14
     d3e:	a6 01       	movw	r20, r12
     d40:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN7Display8Buffer2D11memsetColorEPhNS_5ColorEj>
}
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <_ZN7Display8Buffer2D7fillRawEh>:

void Buffer2D::fillRaw(uint8_t pattern) {
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	dc 01       	movw	r26, r24
     d5a:	f6 2e       	mov	r15, r22
	memset(_buff, pattern, getSize());
     d5c:	18 96       	adiw	r26, 0x08	; 8
     d5e:	0d 91       	ld	r16, X+
     d60:	1c 91       	ld	r17, X
     d62:	19 97       	sbiw	r26, 0x09	; 9
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	00 a8       	ldd	r0, Z+48	; 0x30
     d6a:	f1 a9       	ldd	r31, Z+49	; 0x31
     d6c:	e0 2d       	mov	r30, r0
     d6e:	09 95       	icall
     d70:	ac 01       	movw	r20, r24
     d72:	c8 01       	movw	r24, r16
     d74:	6f 2d       	mov	r22, r15
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	0e 94 23 02 	call	0x446	; 0x446 <memset>
}
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	08 95       	ret

00000d84 <_ZN7Display8Buffer2DD0Ev>:
Buffer2D::Buffer2D(const int width, const int height, const int pitchBytes, uint8_t* buff) :
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
	clear(_color);
}

Buffer2D::~Buffer2D(){
     d84:	fc 01       	movw	r30, r24
     d86:	8c e0       	ldi	r24, 0x0C	; 12
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
}
     d8e:	cf 01       	movw	r24, r30
     d90:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZdlPv>
     d94:	08 95       	ret

00000d96 <_ZN7Display13ChildBuffer2DC1ERNS_4RectERNS_6BufferE>:

#include "ChildBuffer2D.h"

namespace Display {

ChildBuffer2D::ChildBuffer2D(Rect& window, Buffer& buffer) :
     d96:	fc 01       	movw	r30, r24
		_parentBuff(&buffer), _window(&window) {
     d98:	8a e6       	ldi	r24, 0x6A	; 106
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	53 83       	std	Z+3, r21	; 0x03
     da2:	42 83       	std	Z+2, r20	; 0x02
     da4:	75 83       	std	Z+5, r23	; 0x05
     da6:	64 83       	std	Z+4, r22	; 0x04
}
     da8:	08 95       	ret

00000daa <_ZN7Display13ChildBuffer2DD1Ev>:

ChildBuffer2D::~ChildBuffer2D() {
     daa:	fc 01       	movw	r30, r24
     dac:	8c e0       	ldi	r24, 0x0C	; 12
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
}
     db4:	08 95       	ret

00000db6 <_ZN7Display13ChildBuffer2D5clearEv>:

void ChildBuffer2D::clear() {
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	fc 01       	movw	r30, r24
	_parentBuff->clearRect(*_window);
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	ec 01       	movw	r28, r24
     dc2:	a8 81       	ld	r26, Y
     dc4:	b9 81       	ldd	r27, Y+1	; 0x01
     dc6:	64 81       	ldd	r22, Z+4	; 0x04
     dc8:	75 81       	ldd	r23, Z+5	; 0x05
     dca:	1e 96       	adiw	r26, 0x0e	; 14
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	1f 97       	sbiw	r26, 0x0f	; 15
     dd2:	09 95       	icall
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <_ZN7Display13ChildBuffer2D5clearENS_5ColorE>:

void ChildBuffer2D::clear(Color color) {
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	dc 01       	movw	r26, r24
     de0:	ab 01       	movw	r20, r22
	_parentBuff->clearRect(*_window, color);
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	ec 01       	movw	r28, r24
     dec:	e8 81       	ld	r30, Y
     dee:	f9 81       	ldd	r31, Y+1	; 0x01
     df0:	14 96       	adiw	r26, 0x04	; 4
     df2:	6d 91       	ld	r22, X+
     df4:	7c 91       	ld	r23, X
     df6:	15 97       	sbiw	r26, 0x05	; 5
     df8:	00 88       	ldd	r0, Z+16	; 0x10
     dfa:	f1 89       	ldd	r31, Z+17	; 0x11
     dfc:	e0 2d       	mov	r30, r0
     dfe:	09 95       	icall
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <_ZN7Display13ChildBuffer2D11printSerialEcc>:

void ChildBuffer2D::printSerial(char ones, char zeros) {
     e06:	dc 01       	movw	r26, r24
	_printSerial(ones, zeros);
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	02 a0       	ldd	r0, Z+34	; 0x22
     e0e:	f3 a1       	ldd	r31, Z+35	; 0x23
     e10:	e0 2d       	mov	r30, r0
     e12:	09 95       	icall
}
     e14:	08 95       	ret

00000e16 <_ZN7Display13ChildBuffer2D8setColorENS_5ColorE>:

void ChildBuffer2D::setColor(Color color) {
	_parentBuff->setColor(color);
     e16:	fc 01       	movw	r30, r24
     e18:	a2 81       	ldd	r26, Z+2	; 0x02
     e1a:	b3 81       	ldd	r27, Z+3	; 0x03
     e1c:	ed 91       	ld	r30, X+
     e1e:	fc 91       	ld	r31, X
     e20:	11 97       	sbiw	r26, 0x01	; 1
     e22:	02 84       	ldd	r0, Z+10	; 0x0a
     e24:	f3 85       	ldd	r31, Z+11	; 0x0b
     e26:	e0 2d       	mov	r30, r0
     e28:	cd 01       	movw	r24, r26
     e2a:	09 95       	icall
}
     e2c:	08 95       	ret

00000e2e <_ZN7Display13ChildBuffer2D8getColorEv>:

Color ChildBuffer2D::getColor() {
	return _parentBuff->getColor();
     e2e:	dc 01       	movw	r26, r24
     e30:	12 96       	adiw	r26, 0x02	; 2
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	13 97       	sbiw	r26, 0x03	; 3
     e38:	a0 81       	ld	r26, Z
     e3a:	b1 81       	ldd	r27, Z+1	; 0x01
     e3c:	1c 96       	adiw	r26, 0x0c	; 12
     e3e:	2d 91       	ld	r18, X+
     e40:	3c 91       	ld	r19, X
     e42:	1d 97       	sbiw	r26, 0x0d	; 13
     e44:	cf 01       	movw	r24, r30
     e46:	f9 01       	movw	r30, r18
     e48:	09 95       	icall
}
     e4a:	08 95       	ret

00000e4c <_ZN7Display13ChildBuffer2D9setWindowERNS_4RectE>:

void ChildBuffer2D::setWindow(Rect& window) {
	_window = &window;
     e4c:	fc 01       	movw	r30, r24
     e4e:	75 83       	std	Z+5, r23	; 0x05
     e50:	64 83       	std	Z+4, r22	; 0x04
}
     e52:	08 95       	ret

00000e54 <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectE>:

void ChildBuffer2D::clearRect(Rect& rect) {
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	8c 01       	movw	r16, r24
     e62:	7b 01       	movw	r14, r22
	clearRect(rect, _parentBuff->getColor());
     e64:	dc 01       	movw	r26, r24
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	11 97       	sbiw	r26, 0x01	; 1
     e6c:	c0 88       	ldd	r12, Z+16	; 0x10
     e6e:	d1 88       	ldd	r13, Z+17	; 0x11
     e70:	12 96       	adiw	r26, 0x02	; 2
     e72:	0d 90       	ld	r0, X+
     e74:	bc 91       	ld	r27, X
     e76:	a0 2d       	mov	r26, r0
     e78:	ed 91       	ld	r30, X+
     e7a:	fc 91       	ld	r31, X
     e7c:	11 97       	sbiw	r26, 0x01	; 1
     e7e:	04 84       	ldd	r0, Z+12	; 0x0c
     e80:	f5 85       	ldd	r31, Z+13	; 0x0d
     e82:	e0 2d       	mov	r30, r0
     e84:	cd 01       	movw	r24, r26
     e86:	09 95       	icall
     e88:	ac 01       	movw	r20, r24
     e8a:	c8 01       	movw	r24, r16
     e8c:	b7 01       	movw	r22, r14
     e8e:	f6 01       	movw	r30, r12
     e90:	09 95       	icall
}
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	08 95       	ret

00000ea0 <_ZN7Display13ChildBuffer2D6setBitEiiNS_5ColorE>:
			_parentBuff->fastHLine(r.x0, r.y0 + h, r.width, color);
		}
	}
}

void ChildBuffer2D::setBit(int x, int y, Color color) {
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	dc 01       	movw	r26, r24
     eaa:	eb 01       	movw	r28, r22
     eac:	8a 01       	movw	r16, r20
	return _window->height;
}

bool ChildBuffer2D::_outOfBounds(int x, int y) {
	return (x >= _window->x0 + _window->width || x < _window->x0 || y >= _window->y0 + _window->height
			|| y < _window->y0);
     eae:	14 96       	adiw	r26, 0x04	; 4
     eb0:	ed 91       	ld	r30, X+
     eb2:	fc 91       	ld	r31, X
     eb4:	15 97       	sbiw	r26, 0x05	; 5
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	84 81       	ldd	r24, Z+4	; 0x04
     ebc:	95 81       	ldd	r25, Z+5	; 0x05
     ebe:	86 0f       	add	r24, r22
     ec0:	97 1f       	adc	r25, r23
     ec2:	c8 17       	cp	r28, r24
     ec4:	d9 07       	cpc	r29, r25
     ec6:	04 f5       	brge	.+64     	; 0xf08 <_ZN7Display13ChildBuffer2D6setBitEiiNS_5ColorE+0x68>
     ec8:	c6 17       	cp	r28, r22
     eca:	d7 07       	cpc	r29, r23
     ecc:	ec f0       	brlt	.+58     	; 0xf08 <_ZN7Display13ChildBuffer2D6setBitEiiNS_5ColorE+0x68>
     ece:	42 81       	ldd	r20, Z+2	; 0x02
     ed0:	53 81       	ldd	r21, Z+3	; 0x03
     ed2:	86 81       	ldd	r24, Z+6	; 0x06
     ed4:	97 81       	ldd	r25, Z+7	; 0x07
     ed6:	84 0f       	add	r24, r20
     ed8:	95 1f       	adc	r25, r21
     eda:	08 17       	cp	r16, r24
     edc:	19 07       	cpc	r17, r25
     ede:	a4 f4       	brge	.+40     	; 0xf08 <_ZN7Display13ChildBuffer2D6setBitEiiNS_5ColorE+0x68>
     ee0:	04 17       	cp	r16, r20
     ee2:	15 07       	cpc	r17, r21
     ee4:	8c f0       	brlt	.+34     	; 0xf08 <_ZN7Display13ChildBuffer2D6setBitEiiNS_5ColorE+0x68>
	// Handle error cases
	if (_outOfBounds(x, y))
		return;

	// Set the bit in the parent
	_parentBuff->setBit(x + _window->x0, y + _window->y0, color);
     ee6:	12 96       	adiw	r26, 0x02	; 2
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	13 97       	sbiw	r26, 0x03	; 3
     eee:	a0 81       	ld	r26, Z
     ef0:	b1 81       	ldd	r27, Z+1	; 0x01
     ef2:	6c 0f       	add	r22, r28
     ef4:	7d 1f       	adc	r23, r29
     ef6:	40 0f       	add	r20, r16
     ef8:	51 1f       	adc	r21, r17
     efa:	52 96       	adiw	r26, 0x12	; 18
     efc:	0d 90       	ld	r0, X+
     efe:	bc 91       	ld	r27, X
     f00:	a0 2d       	mov	r26, r0
     f02:	cf 01       	movw	r24, r30
     f04:	fd 01       	movw	r30, r26
     f06:	09 95       	icall
}
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <_ZN7Display13ChildBuffer2D6getBitEii>:

Color ChildBuffer2D::getBit(int x, int y) {
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	dc 01       	movw	r26, r24
     f18:	9b 01       	movw	r18, r22
     f1a:	ea 01       	movw	r28, r20
	return _window->height;
}

bool ChildBuffer2D::_outOfBounds(int x, int y) {
	return (x >= _window->x0 + _window->width || x < _window->x0 || y >= _window->y0 + _window->height
			|| y < _window->y0);
     f1c:	14 96       	adiw	r26, 0x04	; 4
     f1e:	ed 91       	ld	r30, X+
     f20:	fc 91       	ld	r31, X
     f22:	15 97       	sbiw	r26, 0x05	; 5
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	84 81       	ldd	r24, Z+4	; 0x04
     f2a:	95 81       	ldd	r25, Z+5	; 0x05
     f2c:	86 0f       	add	r24, r22
     f2e:	97 1f       	adc	r25, r23
     f30:	28 17       	cp	r18, r24
     f32:	39 07       	cpc	r19, r25
     f34:	7c f4       	brge	.+30     	; 0xf54 <_ZN7Display13ChildBuffer2D6getBitEii+0x42>
     f36:	26 17       	cp	r18, r22
     f38:	37 07       	cpc	r19, r23
     f3a:	64 f0       	brlt	.+24     	; 0xf54 <_ZN7Display13ChildBuffer2D6getBitEii+0x42>
     f3c:	42 81       	ldd	r20, Z+2	; 0x02
     f3e:	53 81       	ldd	r21, Z+3	; 0x03
     f40:	86 81       	ldd	r24, Z+6	; 0x06
     f42:	97 81       	ldd	r25, Z+7	; 0x07
     f44:	84 0f       	add	r24, r20
     f46:	95 1f       	adc	r25, r21
     f48:	c8 17       	cp	r28, r24
     f4a:	d9 07       	cpc	r29, r25
     f4c:	1c f4       	brge	.+6      	; 0xf54 <_ZN7Display13ChildBuffer2D6getBitEii+0x42>
     f4e:	c4 17       	cp	r28, r20
     f50:	d5 07       	cpc	r29, r21
     f52:	84 f4       	brge	.+32     	; 0xf74 <_ZN7Display13ChildBuffer2D6getBitEii+0x62>

Color ChildBuffer2D::getBit(int x, int y) {

	// Handle error cases
	if (_outOfBounds(x, y))
		return _parentBuff->getColor();
     f54:	12 96       	adiw	r26, 0x02	; 2
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	13 97       	sbiw	r26, 0x03	; 3
     f5c:	a0 81       	ld	r26, Z
     f5e:	b1 81       	ldd	r27, Z+1	; 0x01
     f60:	1c 96       	adiw	r26, 0x0c	; 12
     f62:	2d 91       	ld	r18, X+
     f64:	3c 91       	ld	r19, X
     f66:	1d 97       	sbiw	r26, 0x0d	; 13
     f68:	cf 01       	movw	r24, r30
     f6a:	f9 01       	movw	r30, r18
     f6c:	09 95       	icall

	// Get the bit from the parent
	return _parentBuff->getBit(x + _window->x0, y + _window->y0);
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret
	// Handle error cases
	if (_outOfBounds(x, y))
		return _parentBuff->getColor();

	// Get the bit from the parent
	return _parentBuff->getBit(x + _window->x0, y + _window->y0);
     f74:	12 96       	adiw	r26, 0x02	; 2
     f76:	ed 91       	ld	r30, X+
     f78:	fc 91       	ld	r31, X
     f7a:	13 97       	sbiw	r26, 0x03	; 3
     f7c:	a0 81       	ld	r26, Z
     f7e:	b1 81       	ldd	r27, Z+1	; 0x01
     f80:	62 0f       	add	r22, r18
     f82:	73 1f       	adc	r23, r19
     f84:	4c 0f       	add	r20, r28
     f86:	5d 1f       	adc	r21, r29
     f88:	54 96       	adiw	r26, 0x14	; 20
     f8a:	2d 91       	ld	r18, X+
     f8c:	3c 91       	ld	r19, X
     f8e:	55 97       	sbiw	r26, 0x15	; 21
     f90:	cf 01       	movw	r24, r30
     f92:	f9 01       	movw	r30, r18
     f94:	09 95       	icall
     f96:	eb cf       	rjmp	.-42     	; 0xf6e <_ZN7Display13ChildBuffer2D6getBitEii+0x5c>

00000f98 <_ZN7Display13ChildBuffer2D7set8BitEiih>:
}

void ChildBuffer2D::set8Bit(int x, int y, uint8_t data) {
     f98:	0f 93       	push	r16
     f9a:	dc 01       	movw	r26, r24
	set8Bit(x, y, data, 0xFF);
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	00 8c       	ldd	r0, Z+24	; 0x18
     fa2:	f1 8d       	ldd	r31, Z+25	; 0x19
     fa4:	e0 2d       	mov	r30, r0
     fa6:	0f ef       	ldi	r16, 0xFF	; 255
     fa8:	09 95       	icall
}
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <_ZN7Display13ChildBuffer2D7set8BitEiihh>:

// TODO Test this
void ChildBuffer2D::set8Bit(int x, int y, uint8_t data, uint8_t mask) {
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	fc 01       	movw	r30, r24
     fba:	eb 01       	movw	r28, r22
     fbc:	7a 01       	movw	r14, r20
	return (x >= _window->x0 + _window->width || x < _window->x0 || y >= _window->y0 + _window->height
			|| y < _window->y0);
}

bool ChildBuffer2D::_outOfBounds8Bit(int x, int y) {
	return (y >= _window->height || y < 0 || x < -8 || x >= _window->width);
     fbe:	44 81       	ldd	r20, Z+4	; 0x04
     fc0:	55 81       	ldd	r21, Z+5	; 0x05
     fc2:	da 01       	movw	r26, r20
     fc4:	16 96       	adiw	r26, 0x06	; 6
     fc6:	8d 91       	ld	r24, X+
     fc8:	9c 91       	ld	r25, X
     fca:	17 97       	sbiw	r26, 0x07	; 7
     fcc:	e8 16       	cp	r14, r24
     fce:	f9 06       	cpc	r15, r25
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x26>
     fd2:	48 c0       	rjmp	.+144    	; 0x1064 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb6>
     fd4:	f7 fc       	sbrc	r15, 7
     fd6:	46 c0       	rjmp	.+140    	; 0x1064 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb6>
     fd8:	bf ef       	ldi	r27, 0xFF	; 255
     fda:	68 3f       	cpi	r22, 0xF8	; 248
     fdc:	7b 07       	cpc	r23, r27
     fde:	0c f4       	brge	.+2      	; 0xfe2 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x34>
     fe0:	41 c0       	rjmp	.+130    	; 0x1064 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb6>
     fe2:	da 01       	movw	r26, r20
     fe4:	14 96       	adiw	r26, 0x04	; 4
     fe6:	6d 91       	ld	r22, X+
     fe8:	7c 91       	ld	r23, X
     fea:	15 97       	sbiw	r26, 0x05	; 5
     fec:	c6 17       	cp	r28, r22
     fee:	d7 07       	cpc	r29, r23
     ff0:	cc f5       	brge	.+114    	; 0x1064 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb6>
     ff2:	35 c0       	rjmp	.+106    	; 0x105e <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb0>
	if (_outOfBounds8Bit(x, y))
		return;

	// Mask out left-most bits not in the child buffer
	if (x < 0)
		mask &= 0xFF >> -x;
     ff4:	22 27       	eor	r18, r18
     ff6:	33 27       	eor	r19, r19
     ff8:	2c 1b       	sub	r18, r28
     ffa:	3d 0b       	sbc	r19, r29
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x58>
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	2a 95       	dec	r18
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x54>
    100a:	08 23       	and	r16, r24

	// Mask out right-most bits not in the child buffer
	int xOvershoot = (x + 8) - _window->width;
    100c:	9e 01       	movw	r18, r28
    100e:	26 1b       	sub	r18, r22
    1010:	37 0b       	sbc	r19, r23
    1012:	28 5f       	subi	r18, 0xF8	; 248
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
	if (xOvershoot > 0)
    1016:	12 16       	cp	r1, r18
    1018:	13 06       	cpc	r1, r19
    101a:	44 f4       	brge	.+16     	; 0x102c <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x7e>
		mask &= 0xFF << xOvershoot;
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x78>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	2a 95       	dec	r18
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x74>
    102a:	08 23       	and	r16, r24

	// Set the bits in the parent
	_parentBuff->set8Bit(x + _window->x0, y + _window->y0, mask);
    102c:	02 80       	ldd	r0, Z+2	; 0x02
    102e:	f3 81       	ldd	r31, Z+3	; 0x03
    1030:	e0 2d       	mov	r30, r0
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	da 01       	movw	r26, r20
    1038:	6d 91       	ld	r22, X+
    103a:	7c 91       	ld	r23, X
    103c:	11 97       	sbiw	r26, 0x01	; 1
    103e:	6c 0f       	add	r22, r28
    1040:	7d 1f       	adc	r23, r29
    1042:	12 96       	adiw	r26, 0x02	; 2
    1044:	4d 91       	ld	r20, X+
    1046:	5c 91       	ld	r21, X
    1048:	13 97       	sbiw	r26, 0x03	; 3
    104a:	4e 0d       	add	r20, r14
    104c:	5f 1d       	adc	r21, r15
    104e:	ec 01       	movw	r28, r24
    1050:	ae 89       	ldd	r26, Y+22	; 0x16
    1052:	bf 89       	ldd	r27, Y+23	; 0x17
    1054:	cf 01       	movw	r24, r30
    1056:	20 2f       	mov	r18, r16
    1058:	fd 01       	movw	r30, r26
    105a:	09 95       	icall
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0xb6>
	// Return if no bits could possibly be within the child buffer
	if (_outOfBounds8Bit(x, y))
		return;

	// Mask out left-most bits not in the child buffer
	if (x < 0)
    105e:	d7 ff       	sbrs	r29, 7
    1060:	d5 cf       	rjmp	.-86     	; 0x100c <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x5e>
    1062:	c8 cf       	rjmp	.-112    	; 0xff4 <_ZN7Display13ChildBuffer2D7set8BitEiihh+0x46>
	if (xOvershoot > 0)
		mask &= 0xFF << xOvershoot;

	// Set the bits in the parent
	_parentBuff->set8Bit(x + _window->x0, y + _window->y0, mask);
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <_ZN7Display13ChildBuffer2D7get8BitEii>:

// TODO Test this
uint8_t ChildBuffer2D::get8Bit(int x, int y) {
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	7c 01       	movw	r14, r24
    1082:	eb 01       	movw	r28, r22
    1084:	6a 01       	movw	r12, r20

	// Get parent buffer color
	uint8_t byteColor = _parentBuff->getColor() == WHITE ? WHITEBYTE : BLACKBYTE;
    1086:	dc 01       	movw	r26, r24
    1088:	12 96       	adiw	r26, 0x02	; 2
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	13 97       	sbiw	r26, 0x03	; 3
    1090:	a0 81       	ld	r26, Z
    1092:	b1 81       	ldd	r27, Z+1	; 0x01
    1094:	1c 96       	adiw	r26, 0x0c	; 12
    1096:	2d 91       	ld	r18, X+
    1098:	3c 91       	ld	r19, X
    109a:	1d 97       	sbiw	r26, 0x0d	; 13
    109c:	cf 01       	movw	r24, r30
    109e:	f9 01       	movw	r30, r18
    10a0:	09 95       	icall
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	11 f0       	breq	.+4      	; 0x10aa <_ZN7Display13ChildBuffer2D7get8BitEii+0x3a>
    10a6:	0f ef       	ldi	r16, 0xFF	; 255
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <_ZN7Display13ChildBuffer2D7get8BitEii+0x3c>
    10aa:	00 e0       	ldi	r16, 0x00	; 0
	return (x >= _window->x0 + _window->width || x < _window->x0 || y >= _window->y0 + _window->height
			|| y < _window->y0);
}

bool ChildBuffer2D::_outOfBounds8Bit(int x, int y) {
	return (y >= _window->height || y < 0 || x < -8 || x >= _window->width);
    10ac:	d7 01       	movw	r26, r14
    10ae:	14 96       	adiw	r26, 0x04	; 4
    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	15 97       	sbiw	r26, 0x05	; 5
    10b6:	86 81       	ldd	r24, Z+6	; 0x06
    10b8:	97 81       	ldd	r25, Z+7	; 0x07
    10ba:	c8 16       	cp	r12, r24
    10bc:	d9 06       	cpc	r13, r25
    10be:	d4 f5       	brge	.+116    	; 0x1134 <_ZN7Display13ChildBuffer2D7get8BitEii+0xc4>
    10c0:	d7 fc       	sbrc	r13, 7
    10c2:	38 c0       	rjmp	.+112    	; 0x1134 <_ZN7Display13ChildBuffer2D7get8BitEii+0xc4>
    10c4:	bf ef       	ldi	r27, 0xFF	; 255
    10c6:	c8 3f       	cpi	r28, 0xF8	; 248
    10c8:	db 07       	cpc	r29, r27
    10ca:	a4 f1       	brlt	.+104    	; 0x1134 <_ZN7Display13ChildBuffer2D7get8BitEii+0xc4>
    10cc:	44 81       	ldd	r20, Z+4	; 0x04
    10ce:	55 81       	ldd	r21, Z+5	; 0x05
    10d0:	c4 17       	cp	r28, r20
    10d2:	d5 07       	cpc	r29, r21
    10d4:	7c f5       	brge	.+94     	; 0x1134 <_ZN7Display13ChildBuffer2D7get8BitEii+0xc4>
    10d6:	38 c0       	rjmp	.+112    	; 0x1148 <_ZN7Display13ChildBuffer2D7get8BitEii+0xd8>

uint8_t ChildBuffer2D::_createMask8Bit(int x) {
	// Mask out left-most bits not in the child buffer
	uint8_t mask(0xFF);
	if (x < 0)
		mask &= 0xFF >> -x;
    10d8:	22 27       	eor	r18, r18
    10da:	33 27       	eor	r19, r19
    10dc:	2c 1b       	sub	r18, r28
    10de:	3d 0b       	sbc	r19, r29
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <_ZN7Display13ChildBuffer2D7get8BitEii+0x7a>
    10e6:	95 95       	asr	r25
    10e8:	87 95       	ror	r24
    10ea:	2a 95       	dec	r18
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <_ZN7Display13ChildBuffer2D7get8BitEii+0x76>
    10ee:	18 2f       	mov	r17, r24

	// Mask out right-most bits not in the child buffer
	int xOvershoot = (x + 8) - _window->width;
    10f0:	9e 01       	movw	r18, r28
    10f2:	24 1b       	sub	r18, r20
    10f4:	35 0b       	sbc	r19, r21
    10f6:	28 5f       	subi	r18, 0xF8	; 248
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
	if (xOvershoot > 0)
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	44 f4       	brge	.+16     	; 0x1110 <_ZN7Display13ChildBuffer2D7get8BitEii+0xa0>
		mask &= 0xFF << xOvershoot;
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <_ZN7Display13ChildBuffer2D7get8BitEii+0x9a>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	2a 95       	dec	r18
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <_ZN7Display13ChildBuffer2D7get8BitEii+0x96>
    110e:	18 23       	and	r17, r24

	// Get the mask bits for where to mask to background color
	uint8_t mask = _createMask8Bit(x);

	// Get the parent buffer bits
	uint8_t retBits = _parentBuff->get8Bit(x, y);
    1110:	f7 01       	movw	r30, r14
    1112:	a2 81       	ldd	r26, Z+2	; 0x02
    1114:	b3 81       	ldd	r27, Z+3	; 0x03
    1116:	ed 91       	ld	r30, X+
    1118:	fc 91       	ld	r31, X
    111a:	11 97       	sbiw	r26, 0x01	; 1
    111c:	02 8c       	ldd	r0, Z+26	; 0x1a
    111e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1120:	e0 2d       	mov	r30, r0
    1122:	cd 01       	movw	r24, r26
    1124:	be 01       	movw	r22, r28
    1126:	a6 01       	movw	r20, r12
    1128:	09 95       	icall

	// Perform masking
	retBits &= mask;
	byteColor &= ~mask;
    112a:	91 2f       	mov	r25, r17
    112c:	90 95       	com	r25
    112e:	09 23       	and	r16, r25

	// Return the combined bits
	return retBits | byteColor;
    1130:	18 23       	and	r17, r24
    1132:	01 2b       	or	r16, r17
}
    1134:	80 2f       	mov	r24, r16
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret
}

uint8_t ChildBuffer2D::_createMask8Bit(int x) {
	// Mask out left-most bits not in the child buffer
	uint8_t mask(0xFF);
	if (x < 0)
    1148:	d7 fd       	sbrc	r29, 7
    114a:	c6 cf       	rjmp	.-116    	; 0x10d8 <_ZN7Display13ChildBuffer2D7get8BitEii+0x68>
    114c:	1f ef       	ldi	r17, 0xFF	; 255
    114e:	d0 cf       	rjmp	.-96     	; 0x10f0 <_ZN7Display13ChildBuffer2D7get8BitEii+0x80>

00001150 <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE>:

	// Return the combined bits
	return retBits | byteColor;
}

void ChildBuffer2D::fastHLine(int x, int y, int width, Color color) {
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	fc 01       	movw	r30, r24
    1162:	eb 01       	movw	r28, r22
    1164:	7a 01       	movw	r14, r20
    1166:	68 01       	movw	r12, r16

	// Fix negative width
	if (width < 0) {
    1168:	37 ff       	sbrs	r19, 7
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x26>
		width = abs(width);
    116c:	30 95       	com	r19
    116e:	21 95       	neg	r18
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
		x -= width;
    1172:	c2 1b       	sub	r28, r18
    1174:	d3 0b       	sbc	r29, r19
	}

	// Fix negative x
	if (x < 0) {
    1176:	d7 ff       	sbrs	r29, 7
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x32>
		width += x;
    117a:	2c 0f       	add	r18, r28
    117c:	3d 1f       	adc	r19, r29
    117e:	c0 e0       	ldi	r28, 0x00	; 0
    1180:	d0 e0       	ldi	r29, 0x00	; 0
		x = 0;
	}

	// Handle out-of-bounds
	if (x >= _window->width || y < 0 || y >= _window->height) {
    1182:	04 81       	ldd	r16, Z+4	; 0x04
    1184:	15 81       	ldd	r17, Z+5	; 0x05
    1186:	d8 01       	movw	r26, r16
    1188:	14 96       	adiw	r26, 0x04	; 4
    118a:	4d 91       	ld	r20, X+
    118c:	5c 91       	ld	r21, X
    118e:	15 97       	sbiw	r26, 0x05	; 5
    1190:	c4 17       	cp	r28, r20
    1192:	d5 07       	cpc	r29, r21
    1194:	54 f5       	brge	.+84     	; 0x11ea <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x9a>
    1196:	f7 fc       	sbrc	r15, 7
    1198:	28 c0       	rjmp	.+80     	; 0x11ea <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x9a>
    119a:	16 96       	adiw	r26, 0x06	; 6
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	17 97       	sbiw	r26, 0x07	; 7
    11a2:	e8 16       	cp	r14, r24
    11a4:	f9 06       	cpc	r15, r25
    11a6:	0c f5       	brge	.+66     	; 0x11ea <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x9a>
		return;
	}

	// Fix out-of-bounds width
	if (x + width >= _window->width) {
    11a8:	c9 01       	movw	r24, r18
    11aa:	8c 0f       	add	r24, r28
    11ac:	9d 1f       	adc	r25, r29
    11ae:	84 17       	cp	r24, r20
    11b0:	95 07       	cpc	r25, r21
    11b2:	1c f0       	brlt	.+6      	; 0x11ba <_ZN7Display13ChildBuffer2D9fastHLineEiiiNS_5ColorE+0x6a>
		width = _window->width - x;
    11b4:	9a 01       	movw	r18, r20
    11b6:	2c 1b       	sub	r18, r28
    11b8:	3d 0b       	sbc	r19, r29
	}

	// Actually draw the line in the parent
	_parentBuff->fastHLine(x + _window->x0, y + _window->y0, width, color);
    11ba:	02 80       	ldd	r0, Z+2	; 0x02
    11bc:	f3 81       	ldd	r31, Z+3	; 0x03
    11be:	e0 2d       	mov	r30, r0
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	d8 01       	movw	r26, r16
    11c6:	6d 91       	ld	r22, X+
    11c8:	7c 91       	ld	r23, X
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	6c 0f       	add	r22, r28
    11ce:	7d 1f       	adc	r23, r29
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	4d 91       	ld	r20, X+
    11d4:	5c 91       	ld	r21, X
    11d6:	13 97       	sbiw	r26, 0x03	; 3
    11d8:	4e 0d       	add	r20, r14
    11da:	5f 1d       	adc	r21, r15
    11dc:	ec 01       	movw	r28, r24
    11de:	a8 a1       	ldd	r26, Y+32	; 0x20
    11e0:	b9 a1       	ldd	r27, Y+33	; 0x21
    11e2:	cf 01       	movw	r24, r30
    11e4:	86 01       	movw	r16, r12
    11e6:	fd 01       	movw	r30, r26
    11e8:	09 95       	icall
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	08 95       	ret

000011fc <_ZN7Display13ChildBuffer2D8getWidthEv>:

int ChildBuffer2D::getWidth() {
    11fc:	dc 01       	movw	r26, r24
    11fe:	14 96       	adiw	r26, 0x04	; 4
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	15 97       	sbiw	r26, 0x05	; 5
	return _window->width;
}
    1206:	84 81       	ldd	r24, Z+4	; 0x04
    1208:	95 81       	ldd	r25, Z+5	; 0x05
    120a:	08 95       	ret

0000120c <_ZN7Display13ChildBuffer2D9getHeightEv>:

int ChildBuffer2D::getHeight() {
    120c:	dc 01       	movw	r26, r24
    120e:	14 96       	adiw	r26, 0x04	; 4
    1210:	ed 91       	ld	r30, X+
    1212:	fc 91       	ld	r31, X
    1214:	15 97       	sbiw	r26, 0x05	; 5
	return _window->height;
}
    1216:	86 81       	ldd	r24, Z+6	; 0x06
    1218:	97 81       	ldd	r25, Z+7	; 0x07
    121a:	08 95       	ret

0000121c <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE>:
		mask &= 0xFF << xOvershoot;

	return mask;
}

bool ChildBuffer2D::_constrainRect(Rect& r) {
    121c:	dc 01       	movw	r26, r24
    121e:	fb 01       	movw	r30, r22

	// Fix negative width
	if (r.width < 0) {
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	95 81       	ldd	r25, Z+5	; 0x05
    1224:	97 ff       	sbrs	r25, 7
    1226:	0c c0       	rjmp	.+24     	; 0x1240 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0x24>
		r.width = abs(r.width);
    1228:	22 27       	eor	r18, r18
    122a:	33 27       	eor	r19, r19
    122c:	28 1b       	sub	r18, r24
    122e:	39 0b       	sbc	r19, r25
    1230:	35 83       	std	Z+5, r19	; 0x05
    1232:	24 83       	std	Z+4, r18	; 0x04
		r.x0 -= r.width;
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	82 1b       	sub	r24, r18
    123a:	93 0b       	sbc	r25, r19
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
	}

	// Fix negative height
	if (r.height < 0) {
    1240:	86 81       	ldd	r24, Z+6	; 0x06
    1242:	97 81       	ldd	r25, Z+7	; 0x07
    1244:	97 ff       	sbrs	r25, 7
    1246:	0c c0       	rjmp	.+24     	; 0x1260 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0x44>
		r.height = abs(r.height);
    1248:	22 27       	eor	r18, r18
    124a:	33 27       	eor	r19, r19
    124c:	28 1b       	sub	r18, r24
    124e:	39 0b       	sbc	r19, r25
    1250:	37 83       	std	Z+7, r19	; 0x07
    1252:	26 83       	std	Z+6, r18	; 0x06
		r.y0 -= r.height;
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	82 1b       	sub	r24, r18
    125a:	93 0b       	sbc	r25, r19
    125c:	93 83       	std	Z+3, r25	; 0x03
    125e:	82 83       	std	Z+2, r24	; 0x02
	}

	// Handle negative x0
	if (r.x0 < 0) {
    1260:	20 81       	ld	r18, Z
    1262:	31 81       	ldd	r19, Z+1	; 0x01
    1264:	37 ff       	sbrs	r19, 7
    1266:	0a c0       	rjmp	.+20     	; 0x127c <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0x60>
		if (r.x0 + r.width < 0)
    1268:	84 81       	ldd	r24, Z+4	; 0x04
    126a:	95 81       	ldd	r25, Z+5	; 0x05
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	97 fd       	sbrc	r25, 7
    1272:	4a c0       	rjmp	.+148    	; 0x1308 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xec>
			return false;

		r.width += r.x0;
    1274:	95 83       	std	Z+5, r25	; 0x05
    1276:	84 83       	std	Z+4, r24	; 0x04
		r.x0 = 0;
    1278:	11 82       	std	Z+1, r1	; 0x01
    127a:	10 82       	st	Z, r1
	}

	// Handle negative y0
	if (r.y0 < 0) {
    127c:	22 81       	ldd	r18, Z+2	; 0x02
    127e:	33 81       	ldd	r19, Z+3	; 0x03
    1280:	37 ff       	sbrs	r19, 7
    1282:	0a c0       	rjmp	.+20     	; 0x1298 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0x7c>
		if (r.y0 + r.height < 0)
    1284:	86 81       	ldd	r24, Z+6	; 0x06
    1286:	97 81       	ldd	r25, Z+7	; 0x07
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	97 fd       	sbrc	r25, 7
    128e:	3c c0       	rjmp	.+120    	; 0x1308 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xec>
			return false;

		r.height += r.y0;
    1290:	97 83       	std	Z+7, r25	; 0x07
    1292:	86 83       	std	Z+6, r24	; 0x06
		r.y0 = 0;
    1294:	13 82       	std	Z+3, r1	; 0x03
    1296:	12 82       	std	Z+2, r1	; 0x02
	}

	// Handle out-of-bounds x0
	if (r.x0 >= _window->width)
    1298:	60 81       	ld	r22, Z
    129a:	71 81       	ldd	r23, Z+1	; 0x01
    129c:	14 96       	adiw	r26, 0x04	; 4
    129e:	0d 90       	ld	r0, X+
    12a0:	bc 91       	ld	r27, X
    12a2:	a0 2d       	mov	r26, r0
    12a4:	14 96       	adiw	r26, 0x04	; 4
    12a6:	4d 91       	ld	r20, X+
    12a8:	5c 91       	ld	r21, X
    12aa:	15 97       	sbiw	r26, 0x05	; 5
    12ac:	64 17       	cp	r22, r20
    12ae:	75 07       	cpc	r23, r21
    12b0:	5c f5       	brge	.+86     	; 0x1308 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xec>
		return false;

	// Handle out-of-bounds y0
	if (r.y0 >= _window->height)
    12b2:	22 81       	ldd	r18, Z+2	; 0x02
    12b4:	33 81       	ldd	r19, Z+3	; 0x03
    12b6:	16 96       	adiw	r26, 0x06	; 6
    12b8:	8d 91       	ld	r24, X+
    12ba:	9c 91       	ld	r25, X
    12bc:	17 97       	sbiw	r26, 0x07	; 7
    12be:	28 17       	cp	r18, r24
    12c0:	39 07       	cpc	r19, r25
    12c2:	14 f5       	brge	.+68     	; 0x1308 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xec>
		return false;

	// Fix out-of-bounds width
	if (r.x0 + r.width >= _window->width)
    12c4:	84 81       	ldd	r24, Z+4	; 0x04
    12c6:	95 81       	ldd	r25, Z+5	; 0x05
    12c8:	86 0f       	add	r24, r22
    12ca:	97 1f       	adc	r25, r23
    12cc:	84 17       	cp	r24, r20
    12ce:	95 07       	cpc	r25, r21
    12d0:	34 f0       	brlt	.+12     	; 0x12de <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xc2>
		r.width = _window->width - r.x0 - 1;
    12d2:	41 50       	subi	r20, 0x01	; 1
    12d4:	50 40       	sbci	r21, 0x00	; 0
    12d6:	46 1b       	sub	r20, r22
    12d8:	57 0b       	sbc	r21, r23
    12da:	55 83       	std	Z+5, r21	; 0x05
    12dc:	44 83       	std	Z+4, r20	; 0x04

	// Fix out-of-bounds height
	if (r.y0 + r.height >= _window->height)
    12de:	42 81       	ldd	r20, Z+2	; 0x02
    12e0:	53 81       	ldd	r21, Z+3	; 0x03
    12e2:	16 96       	adiw	r26, 0x06	; 6
    12e4:	2d 91       	ld	r18, X+
    12e6:	3c 91       	ld	r19, X
    12e8:	17 97       	sbiw	r26, 0x07	; 7
    12ea:	86 81       	ldd	r24, Z+6	; 0x06
    12ec:	97 81       	ldd	r25, Z+7	; 0x07
    12ee:	84 0f       	add	r24, r20
    12f0:	95 1f       	adc	r25, r21
    12f2:	82 17       	cp	r24, r18
    12f4:	93 07       	cpc	r25, r19
    12f6:	34 f0       	brlt	.+12     	; 0x1304 <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE+0xe8>
		r.height = _window->height - r.y0 - 1;
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	30 40       	sbci	r19, 0x00	; 0
    12fc:	24 1b       	sub	r18, r20
    12fe:	35 0b       	sbc	r19, r21
    1300:	37 83       	std	Z+7, r19	; 0x07
    1302:	26 83       	std	Z+6, r18	; 0x06
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	08 95       	ret
    1308:	80 e0       	ldi	r24, 0x00	; 0

	return true;
}
    130a:	08 95       	ret

0000130c <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectENS_5ColorE>:
void ChildBuffer2D::clearRect(Rect& rect) {
	clearRect(rect, _parentBuff->getColor());
}

//TODO test this
void ChildBuffer2D::clearRect(Rect& rect, Color color) {
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	6c 01       	movw	r12, r24
    1332:	5a 01       	movw	r10, r20
	Rect r(rect);
    1334:	de 01       	movw	r26, r28
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	fb 01       	movw	r30, r22
    133a:	88 e0       	ldi	r24, 0x08	; 8
    133c:	01 90       	ld	r0, Z+
    133e:	0d 92       	st	X+, r0
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	e1 f7       	brne	.-8      	; 0x133c <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectENS_5ColorE+0x30>

	// If we can clear the Rect region
	if (_constrainRect(r)) {
    1344:	c6 01       	movw	r24, r12
    1346:	be 01       	movw	r22, r28
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	0e 94 0e 09 	call	0x121c	; 0x121c <_ZN7Display13ChildBuffer2D14_constrainRectERNS_4RectE>
    1350:	88 23       	and	r24, r24
    1352:	b9 f1       	breq	.+110    	; 0x13c2 <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectENS_5ColorE+0xb6>

		// Put the Rect into parent buffer coordinates
		r.x0 += _window->x0;
    1354:	d6 01       	movw	r26, r12
    1356:	14 96       	adiw	r26, 0x04	; 4
    1358:	ed 91       	ld	r30, X+
    135a:	fc 91       	ld	r31, X
    135c:	15 97       	sbiw	r26, 0x05	; 5
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	9a 83       	std	Y+2, r25	; 0x02
    136c:	89 83       	std	Y+1, r24	; 0x01
		r.y0 += _window->y0;
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	22 81       	ldd	r18, Z+2	; 0x02
    1374:	33 81       	ldd	r19, Z+3	; 0x03
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	ee 24       	eor	r14, r14
    1380:	ff 24       	eor	r15, r15
    1382:	1a c0       	rjmp	.+52     	; 0x13b8 <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectENS_5ColorE+0xac>

		// Actually set the Rect region
		for (int h = 0; h < r.height; h++) {
			_parentBuff->fastHLine(r.x0, r.y0 + h, r.width, color);
    1384:	d6 01       	movw	r26, r12
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	13 97       	sbiw	r26, 0x03	; 3
    138e:	a0 81       	ld	r26, Z
    1390:	b1 81       	ldd	r27, Z+1	; 0x01
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	7a 81       	ldd	r23, Y+2	; 0x02
    1396:	4b 81       	ldd	r20, Y+3	; 0x03
    1398:	5c 81       	ldd	r21, Y+4	; 0x04
    139a:	4e 0d       	add	r20, r14
    139c:	5f 1d       	adc	r21, r15
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	90 96       	adiw	r26, 0x20	; 32
    13a4:	0d 90       	ld	r0, X+
    13a6:	bc 91       	ld	r27, X
    13a8:	a0 2d       	mov	r26, r0
    13aa:	cf 01       	movw	r24, r30
    13ac:	85 01       	movw	r16, r10
    13ae:	fd 01       	movw	r30, r26
    13b0:	09 95       	icall
		// Put the Rect into parent buffer coordinates
		r.x0 += _window->x0;
		r.y0 += _window->y0;

		// Actually set the Rect region
		for (int h = 0; h < r.height; h++) {
    13b2:	08 94       	sec
    13b4:	e1 1c       	adc	r14, r1
    13b6:	f1 1c       	adc	r15, r1
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	98 85       	ldd	r25, Y+8	; 0x08
    13bc:	e8 16       	cp	r14, r24
    13be:	f9 06       	cpc	r15, r25
    13c0:	0c f3       	brlt	.-62     	; 0x1384 <_ZN7Display13ChildBuffer2D9clearRectERNS_4RectENS_5ColorE+0x78>
			_parentBuff->fastHLine(r.x0, r.y0 + h, r.width, color);
		}
	}
}
    13c2:	28 96       	adiw	r28, 0x08	; 8
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	08 95       	ret

000013e4 <_ZN7Display13ChildBuffer2DD0Ev>:

ChildBuffer2D::ChildBuffer2D(Rect& window, Buffer& buffer) :
		_parentBuff(&buffer), _window(&window) {
}

ChildBuffer2D::~ChildBuffer2D() {
    13e4:	fc 01       	movw	r30, r24
    13e6:	8c e0       	ldi	r24, 0x0C	; 12
    13e8:	91 e0       	ldi	r25, 0x01	; 1
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	80 83       	st	Z, r24
}
    13ee:	cf 01       	movw	r24, r30
    13f0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZdlPv>
    13f4:	08 95       	ret

000013f6 <_Z41__static_initialization_and_destruction_0ii>:
	Serial.begin(9600);
}

void loop() {
	test_ChildBuffer2D_clearRect();
}
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	ec 01       	movw	r28, r24
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	a9 f5       	brne	.+106    	; 0x1470 <_Z41__static_initialization_and_destruction_0ii+0x7a>
    1406:	6f 5f       	subi	r22, 0xFF	; 255
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	09 f0       	breq	.+2      	; 0x140e <_Z41__static_initialization_and_destruction_0ii+0x18>
    140c:	42 c0       	rjmp	.+132    	; 0x1492 <_Z41__static_initialization_and_destruction_0ii+0x9c>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
    140e:	8c e7       	ldi	r24, 0x7C	; 124
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	64 e6       	ldi	r22, 0x64	; 100
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	4c e0       	ldi	r20, 0x0C	; 12
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	2d e0       	ldi	r18, 0x0D	; 13
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	00 ee       	ldi	r16, 0xE0	; 224
    1420:	11 e0       	ldi	r17, 0x01	; 1
    1422:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN7Display8Buffer2DC1EiiiPh>
SimpleFont sFont(dispBuff);
    1426:	88 e8       	ldi	r24, 0x88	; 136
    1428:	92 e0       	ldi	r25, 0x02	; 2
    142a:	6c e7       	ldi	r22, 0x7C	; 124
    142c:	72 e0       	ldi	r23, 0x02	; 2
    142e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN7Display10SimpleFontC1ERNS_6BufferE>
	Rect() :
			x0(0), y0(0), width(1), height(1) {
	}

	Rect(int x0_, int y0_, int width_, int height_) :
			x0(x0_), y0(y0_), width(width_), height(height_) {
    1432:	8a e0       	ldi	r24, 0x0A	; 10
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	90 93 93 02 	sts	0x0293, r25
    143a:	80 93 92 02 	sts	0x0292, r24
    143e:	d0 93 95 02 	sts	0x0295, r29
    1442:	c0 93 94 02 	sts	0x0294, r28
    1446:	84 e0       	ldi	r24, 0x04	; 4
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	90 93 97 02 	sts	0x0297, r25
    144e:	80 93 96 02 	sts	0x0296, r24
    1452:	86 e0       	ldi	r24, 0x06	; 6
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	90 93 99 02 	sts	0x0299, r25
    145a:	80 93 98 02 	sts	0x0298, r24



Rect rect1(10, 1, 4, 6);
//Rect rect2(4, 4, 3, 5);
ChildBuffer2D childBuff(rect1, dispBuff);
    145e:	8a e9       	ldi	r24, 0x9A	; 154
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	62 e9       	ldi	r22, 0x92	; 146
    1464:	72 e0       	ldi	r23, 0x02	; 2
    1466:	4c e7       	ldi	r20, 0x7C	; 124
    1468:	52 e0       	ldi	r21, 0x02	; 2
    146a:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN7Display13ChildBuffer2DC1ERNS_4RectERNS_6BufferE>
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <_Z41__static_initialization_and_destruction_0ii+0x9c>
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	79 f4       	brne	.+30     	; 0x1492 <_Z41__static_initialization_and_destruction_0ii+0x9c>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	61 f4       	brne	.+24     	; 0x1492 <_Z41__static_initialization_and_destruction_0ii+0x9c>
    147a:	8a e9       	ldi	r24, 0x9A	; 154
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN7Display13ChildBuffer2DD1Ev>
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
SimpleFont sFont(dispBuff);
    1482:	88 e8       	ldi	r24, 0x88	; 136
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN7Display10SimpleFontD1Ev>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer2D dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
    148a:	8c e7       	ldi	r24, 0x7C	; 124
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN7Display8Buffer2DD1Ev>
	Serial.begin(9600);
}

void loop() {
	test_ChildBuffer2D_clearRect();
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <_GLOBAL__D_rawDispBuff>:
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	6f ef       	ldi	r22, 0xFF	; 255
    14a2:	7f ef       	ldi	r23, 0xFF	; 255
    14a4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z41__static_initialization_and_destruction_0ii>
    14a8:	08 95       	ret

000014aa <_GLOBAL__I_rawDispBuff>:
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	6f ef       	ldi	r22, 0xFF	; 255
    14b0:	7f ef       	ldi	r23, 0xFF	; 255
    14b2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_Z41__static_initialization_and_destruction_0ii>
    14b6:	08 95       	ret

000014b8 <setup>:

	delay(5000);
}

void setup() {
	Serial.begin(9600);
    14b8:	88 e2       	ldi	r24, 0x28	; 40
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	55 e2       	ldi	r21, 0x25	; 37
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	0e 94 91 0c 	call	0x1922	; 0x1922 <_ZN14HardwareSerial5beginEm>
}
    14c8:	08 95       	ret

000014ca <_Z28test_ChildBuffer2D_clearRectv>:

Rect rect1(10, 1, 4, 6);
//Rect rect2(4, 4, 3, 5);
ChildBuffer2D childBuff(rect1, dispBuff);

void test_ChildBuffer2D_clearRect() {
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
	dispBuff.clear(BLACK);
    14d2:	8c e7       	ldi	r24, 0x7C	; 124
    14d4:	e8 2e       	mov	r14, r24
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	f8 2e       	mov	r15, r24
    14da:	c7 01       	movw	r24, r14
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN7Display8Buffer2D5clearENS_5ColorE>
	sFont.setColor(WHITE);
    14e4:	08 e8       	ldi	r16, 0x88	; 136
    14e6:	12 e0       	ldi	r17, 0x02	; 2
    14e8:	c8 01       	movw	r24, r16
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN7Display4Font8setColorENS_5ColorE>
	sFont.drawChar(2, 2, 'X');
    14f2:	c8 01       	movw	r24, r16
    14f4:	62 e0       	ldi	r22, 0x02	; 2
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	42 e0       	ldi	r20, 0x02	; 2
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	28 e5       	ldi	r18, 0x58	; 88
    14fe:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZN7Display10SimpleFont8drawCharEiic>

	// Clear rect1
	//childBuff.setWindow(rect1);
	childBuff.clear(WHITE);
    1502:	8a e9       	ldi	r24, 0x9A	; 154
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	0e 94 ed 06 	call	0xdda	; 0xdda <_ZN7Display13ChildBuffer2D5clearENS_5ColorE>
	// Clear rect2
	//childBuff.setWindow(rect2);
	//childBuff.clear(WHITE);

	// Print out the full buffer
	dispBuff.printSerial('X','.');
    150e:	c7 01       	movw	r24, r14
    1510:	68 e5       	ldi	r22, 0x58	; 88
    1512:	4e e2       	ldi	r20, 0x2E	; 46
    1514:	0e 94 84 03 	call	0x708	; 0x708 <_ZN7Display8Buffer2D11printSerialEcc>
	Serial.println("");
    1518:	88 e2       	ldi	r24, 0x28	; 40
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	61 e0       	ldi	r22, 0x01	; 1
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <_ZN5Print7printlnEPKc>

	delay(5000);
    1524:	68 e8       	ldi	r22, 0x88	; 136
    1526:	73 e1       	ldi	r23, 0x13	; 19
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <delay>
}
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	08 95       	ret

0000153a <loop>:
void setup() {
	Serial.begin(9600);
}

void loop() {
	test_ChildBuffer2D_clearRect();
    153a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_Z28test_ChildBuffer2D_clearRectv>
}
    153e:	08 95       	ret

00001540 <_ZN7Display4FontC2ERNS_6BufferE>:
    1540:	fc 01       	movw	r30, r24
    1542:	84 e9       	ldi	r24, 0x94	; 148
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	73 83       	std	Z+3, r23	; 0x03
    154c:	62 83       	std	Z+2, r22	; 0x02
    154e:	14 82       	std	Z+4, r1	; 0x04
    1550:	15 82       	std	Z+5, r1	; 0x05
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	97 83       	std	Z+7, r25	; 0x07
    1558:	86 83       	std	Z+6, r24	; 0x06
    155a:	11 86       	std	Z+9, r1	; 0x09
    155c:	10 86       	std	Z+8, r1	; 0x08
    155e:	08 95       	ret

00001560 <_ZN7Display4FontD2Ev>:

Font::~Font() {}
    1560:	fc 01       	movw	r30, r24
    1562:	84 e9       	ldi	r24, 0x94	; 148
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
    156a:	08 95       	ret

0000156c <_ZN7Display4FontD1Ev>:
    156c:	fc 01       	movw	r30, r24
    156e:	84 e9       	ldi	r24, 0x94	; 148
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    1576:	08 95       	ret

00001578 <_ZN7Display4Font10getSpacingEv>:

uint8_t Font::getSpacing() {
	return _spacing;
}
    1578:	fc 01       	movw	r30, r24
    157a:	84 81       	ldd	r24, Z+4	; 0x04
    157c:	08 95       	ret

0000157e <_ZN7Display4Font10setSpacingEh>:

void Font::setSpacing(uint8_t spacing) {
	_spacing = spacing;
    157e:	fc 01       	movw	r30, r24
    1580:	64 83       	std	Z+4, r22	; 0x04
}
    1582:	08 95       	ret

00001584 <_ZN7Display4Font8setColorENS_5ColorE>:

void Font::setColor(Color color){
	_color = color;
    1584:	fc 01       	movw	r30, r24
    1586:	77 83       	std	Z+7, r23	; 0x07
    1588:	66 83       	std	Z+6, r22	; 0x06
}
    158a:	08 95       	ret

0000158c <_ZN7Display4Font8getColorEv>:

Color Display::Font::getColor() {
    158c:	fc 01       	movw	r30, r24
	return _color;
}
    158e:	86 81       	ldd	r24, Z+6	; 0x06
    1590:	97 81       	ldd	r25, Z+7	; 0x07
    1592:	08 95       	ret

00001594 <_ZN7Display4Font8setStyleENS_9FontStyleE>:

void Display::Font::setStyle(FontStyle style) {
	_style = style;
    1594:	fc 01       	movw	r30, r24
    1596:	71 87       	std	Z+9, r23	; 0x09
    1598:	60 87       	std	Z+8, r22	; 0x08
}
    159a:	08 95       	ret

0000159c <_ZN7Display4Font10getKerningEv>:

uint8_t Display::Font::getKerning() {
	return _kerning;
}
    159c:	fc 01       	movw	r30, r24
    159e:	85 81       	ldd	r24, Z+5	; 0x05
    15a0:	08 95       	ret

000015a2 <_ZN7Display4Font10setKerningEh>:

void Display::Font::setKerning(uint8_t kerning) {
	_kerning = kerning;
    15a2:	fc 01       	movw	r30, r24
    15a4:	65 83       	std	Z+5, r22	; 0x05
}
    15a6:	08 95       	ret

000015a8 <_ZN7Display4Font8getStyleEv>:

FontStyle Display::Font::getStyle() {
    15a8:	fc 01       	movw	r30, r24
	return _style;
}
    15aa:	80 85       	ldd	r24, Z+8	; 0x08
    15ac:	91 85       	ldd	r25, Z+9	; 0x09
    15ae:	08 95       	ret

000015b0 <_ZN7Display4FontD0Ev>:
#include "Font.h"
using namespace Display;

Font::Font(Buffer& buff) : _buff(&buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}

Font::~Font() {}
    15b0:	fc 01       	movw	r30, r24
    15b2:	84 e9       	ldi	r24, 0x94	; 148
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	80 83       	st	Z, r24
    15ba:	cf 01       	movw	r24, r30
    15bc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZdlPv>
    15c0:	08 95       	ret

000015c2 <_ZN7Display10SimpleFont10drawStringEiiPKc>:
//			bitmap >>= 1;
//		}
//	}
}

void SimpleFont::drawString(int x, int y, const char* string) {
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	8c 01       	movw	r16, r24
    15d4:	7b 01       	movw	r14, r22
    15d6:	6a 01       	movw	r12, r20
    15d8:	e9 01       	movw	r28, r18
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <_ZN7Display10SimpleFont10drawStringEiiPKc+0x3c>

	// Write one line
	while (*string != 0) {
		drawChar(x, y, *string);
    15dc:	d8 01       	movw	r26, r16
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	04 80       	ldd	r0, Z+4	; 0x04
    15e4:	f5 81       	ldd	r31, Z+5	; 0x05
    15e6:	e0 2d       	mov	r30, r0
    15e8:	c8 01       	movw	r24, r16
    15ea:	b7 01       	movw	r22, r14
    15ec:	a6 01       	movw	r20, r12
    15ee:	09 95       	icall
		string++;
    15f0:	21 96       	adiw	r28, 0x01	; 1
		x += (_width + _kerning);
    15f2:	f8 01       	movw	r30, r16
    15f4:	85 81       	ldd	r24, Z+5	; 0x05
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	04 96       	adiw	r24, 0x04	; 4
    15fa:	e8 0e       	add	r14, r24
    15fc:	f9 1e       	adc	r15, r25
}

void SimpleFont::drawString(int x, int y, const char* string) {

	// Write one line
	while (*string != 0) {
    15fe:	28 81       	ld	r18, Y
    1600:	22 23       	and	r18, r18
    1602:	61 f7       	brne	.-40     	; 0x15dc <_ZN7Display10SimpleFont10drawStringEiiPKc+0x1a>
		drawChar(x, y, *string);
		string++;
		x += (_width + _kerning);
	}
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	08 95       	ret

00001616 <_ZN7Display10SimpleFont9getHeightEv>:

uint8_t SimpleFont::getHeight() {
	return _height;
}
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	08 95       	ret

0000161a <_ZN7Display10SimpleFont8getWidthEv>:

uint8_t SimpleFont::getWidth() {
	return _width;
}
    161a:	84 e0       	ldi	r24, 0x04	; 4
    161c:	08 95       	ret

0000161e <_ZN7Display10SimpleFont9getBitmapEc>:

//see http://ascii-table.com/
uint32_t SimpleFont::getBitmap(char c) {
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24
    1624:	86 2f       	mov	r24, r22
    1626:	99 27       	eor	r25, r25
    1628:	87 fd       	sbrc	r24, 7
    162a:	90 95       	com	r25

	// Get digit bitmap
#ifdef _SF_DIGIT
	if (c >= '0' && c <= '9')
    162c:	60 53       	subi	r22, 0x30	; 48
    162e:	6a 30       	cpi	r22, 0x0A	; 10
    1630:	40 f4       	brcc	.+16     	; 0x1642 <_ZN7Display10SimpleFont9getBitmapEc+0x24>
    1632:	fc 01       	movw	r30, r24
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	e4 51       	subi	r30, 0x14	; 20
    163e:	f0 40       	sbci	r31, 0x00	; 0
    1640:	5b c0       	rjmp	.+182    	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>


// Converts the letter c to upper case, if possible.
inline int toUpperCase(int c)
{
  return toupper (c);
    1642:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <toupper>
    1646:	28 2f       	mov	r18, r24
#endif

	c = toUpperCase(c);

	// Get alpha bitmap
	if (c >= 'A' && c <= 'Z') {
    1648:	81 54       	subi	r24, 0x41	; 65
    164a:	8a 31       	cpi	r24, 0x1A	; 26
    164c:	b8 f4       	brcc	.+46     	; 0x167c <_ZN7Display10SimpleFont9getBitmapEc+0x5e>

		// Bold Style
#ifdef _SF_ALPHA_BOLD
		if (_style == BOLD)
    164e:	88 85       	ldd	r24, Y+8	; 0x08
    1650:	99 85       	ldd	r25, Y+9	; 0x09
    1652:	33 27       	eor	r19, r19
    1654:	27 fd       	sbrc	r18, 7
    1656:	30 95       	com	r19
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	41 f4       	brne	.+16     	; 0x166c <_ZN7Display10SimpleFont9getBitmapEc+0x4e>
    165c:	f9 01       	movw	r30, r18
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	e0 53       	subi	r30, 0x30	; 48
    1668:	f0 40       	sbci	r31, 0x00	; 0
    166a:	46 c0       	rjmp	.+140    	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
			return resolve(_alphaBold[c - 'A']);
    166c:	f9 01       	movw	r30, r18
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	e8 5c       	subi	r30, 0xC8	; 200
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	3e c0       	rjmp	.+124    	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
#endif
	}

	// Get punc1 bitmap
#ifdef _SF_PUNC1
	if (c >= ' ' && c <= '/')
    167c:	82 2f       	mov	r24, r18
    167e:	80 52       	subi	r24, 0x20	; 32
    1680:	80 31       	cpi	r24, 0x10	; 16
    1682:	58 f4       	brcc	.+22     	; 0x169a <_ZN7Display10SimpleFont9getBitmapEc+0x7c>
    1684:	e2 2f       	mov	r30, r18
    1686:	ff 27       	eor	r31, r31
    1688:	e7 fd       	sbrc	r30, 7
    168a:	f0 95       	com	r31
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ec 5d       	subi	r30, 0xDC	; 220
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	2f c0       	rjmp	.+94     	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc1[c - ' ']);
#endif

	// Get punc2 bitmap
#ifdef _SF_PUNC2
	if (c >= ':' && c <= '@')
    169a:	82 2f       	mov	r24, r18
    169c:	8a 53       	subi	r24, 0x3A	; 58
    169e:	87 30       	cpi	r24, 0x07	; 7
    16a0:	58 f4       	brcc	.+22     	; 0x16b8 <_ZN7Display10SimpleFont9getBitmapEc+0x9a>
    16a2:	e2 2f       	mov	r30, r18
    16a4:	ff 27       	eor	r31, r31
    16a6:	e7 fd       	sbrc	r30, 7
    16a8:	f0 95       	com	r31
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	e0 58       	subi	r30, 0x80	; 128
    16b4:	f0 40       	sbci	r31, 0x00	; 0
    16b6:	20 c0       	rjmp	.+64     	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc2[c - ':']);
#endif

	// Get punc3 bitmap
#ifdef _SF_PUNC3
	if (c >= '[' && c <= '`')
    16b8:	82 2f       	mov	r24, r18
    16ba:	8b 55       	subi	r24, 0x5B	; 91
    16bc:	86 30       	cpi	r24, 0x06	; 6
    16be:	58 f4       	brcc	.+22     	; 0x16d6 <_ZN7Display10SimpleFont9getBitmapEc+0xb8>
    16c0:	e2 2f       	mov	r30, r18
    16c2:	ff 27       	eor	r31, r31
    16c4:	e7 fd       	sbrc	r30, 7
    16c6:	f0 95       	com	r31
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	e8 5e       	subi	r30, 0xE8	; 232
    16d2:	f0 40       	sbci	r31, 0x00	; 0
    16d4:	11 c0       	rjmp	.+34     	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc3[c - '[']);
#endif

	// Get punc4 bitmap
#ifdef _SF_PUNC4
	if (c >= '{' && c <= '~')
    16d6:	82 2f       	mov	r24, r18
    16d8:	8b 57       	subi	r24, 0x7B	; 123
    16da:	84 30       	cpi	r24, 0x04	; 4
    16dc:	58 f4       	brcc	.+22     	; 0x16f4 <_ZN7Display10SimpleFont9getBitmapEc+0xd6>
    16de:	e2 2f       	mov	r30, r18
    16e0:	ff 27       	eor	r31, r31
    16e2:	e7 fd       	sbrc	r30, 7
    16e4:	f0 95       	com	r31
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	e0 55       	subi	r30, 0x50	; 80
    16f0:	f1 40       	sbci	r31, 0x01	; 1
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc4[c - '{']);
    16f4:	e4 ee       	ldi	r30, 0xE4	; 228
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	25 91       	lpm	r18, Z+
    16fa:	35 91       	lpm	r19, Z+
    16fc:	45 91       	lpm	r20, Z+
    16fe:	54 91       	lpm	r21, Z+
#endif

	// Return the "error" bitmap
	return resolve(_errBitmap);
}
    1700:	b9 01       	movw	r22, r18
    1702:	ca 01       	movw	r24, r20
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <_ZN7Display10SimpleFont8drawCharEiic>:
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}

void SimpleFont::drawChar(int x, int y, char c) {
    170a:	4f 92       	push	r4
    170c:	5f 92       	push	r5
    170e:	6f 92       	push	r6
    1710:	7f 92       	push	r7
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	5c 01       	movw	r10, r24
    172a:	2b 01       	movw	r4, r22
    172c:	3a 01       	movw	r6, r20

	// Get the character bitmap
	uint32_t bitmap = getBitmap(c);
    172e:	62 2f       	mov	r22, r18
    1730:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN7Display10SimpleFont9getBitmapEc>
    1734:	6b 01       	movw	r12, r22
    1736:	7c 01       	movw	r14, r24

	// Set the color of the bitmap
	if (_color == BLACK)
    1738:	f5 01       	movw	r30, r10
    173a:	86 81       	ldd	r24, Z+6	; 0x06
    173c:	97 81       	ldd	r25, Z+7	; 0x07
    173e:	89 2b       	or	r24, r25
    1740:	21 f4       	brne	.+8      	; 0x174a <_ZN7Display10SimpleFont8drawCharEiic+0x40>
		bitmap = ~bitmap;
    1742:	c0 94       	com	r12
    1744:	d0 94       	com	r13
    1746:	e0 94       	com	r14
    1748:	f0 94       	com	r15

	// Loop over the rows
	for (char y1 = y + _height - 1; y1 >= y; y1--) {
    174a:	86 2d       	mov	r24, r6
    174c:	8c 5f       	subi	r24, 0xFC	; 252
    174e:	c0 e0       	ldi	r28, 0x00	; 0
    1750:	d0 e0       	ldi	r29, 0x00	; 0

		// Draw the row
		_buff->set8Bit(x, y1, curRow, 0xf0);

		// Shift the bitmap
		bitmap >>= 4;
    1752:	88 2e       	mov	r8, r24
    1754:	99 24       	eor	r9, r9
    1756:	87 fc       	sbrc	r8, 7
    1758:	90 94       	com	r9
    175a:	18 c0       	rjmp	.+48     	; 0x178c <_ZN7Display10SimpleFont8drawCharEiic+0x82>

		// Get the row
		uint8_t curRow = (bitmap & 0x0f) << 4;

		// Draw the row
		_buff->set8Bit(x, y1, curRow, 0xf0);
    175c:	f5 01       	movw	r30, r10
    175e:	a2 81       	ldd	r26, Z+2	; 0x02
    1760:	b3 81       	ldd	r27, Z+3	; 0x03
    1762:	ed 91       	ld	r30, X+
    1764:	fc 91       	ld	r31, X
    1766:	11 97       	sbiw	r26, 0x01	; 1
    1768:	2c 2d       	mov	r18, r12
    176a:	22 95       	swap	r18
    176c:	20 7f       	andi	r18, 0xF0	; 240
    176e:	00 8c       	ldd	r0, Z+24	; 0x18
    1770:	f1 8d       	ldd	r31, Z+25	; 0x19
    1772:	e0 2d       	mov	r30, r0
    1774:	cd 01       	movw	r24, r26
    1776:	b2 01       	movw	r22, r4
    1778:	00 ef       	ldi	r16, 0xF0	; 240
    177a:	09 95       	icall

		// Shift the bitmap
		bitmap >>= 4;
    177c:	74 e0       	ldi	r23, 0x04	; 4
    177e:	f6 94       	lsr	r15
    1780:	e7 94       	ror	r14
    1782:	d7 94       	ror	r13
    1784:	c7 94       	ror	r12
    1786:	7a 95       	dec	r23
    1788:	d1 f7       	brne	.-12     	; 0x177e <_ZN7Display10SimpleFont8drawCharEiic+0x74>
    178a:	21 96       	adiw	r28, 0x01	; 1
    178c:	a4 01       	movw	r20, r8
    178e:	4c 1b       	sub	r20, r28
    1790:	5d 0b       	sbc	r21, r29
	// Set the color of the bitmap
	if (_color == BLACK)
		bitmap = ~bitmap;

	// Loop over the rows
	for (char y1 = y + _height - 1; y1 >= y; y1--) {
    1792:	46 15       	cp	r20, r6
    1794:	57 05       	cpc	r21, r7
    1796:	14 f7       	brge	.-60     	; 0x175c <_ZN7Display10SimpleFont8drawCharEiic+0x52>
//
//			// Shift out a bit
//			bitmap >>= 1;
//		}
//	}
}
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	cf 90       	pop	r12
    17a6:	bf 90       	pop	r11
    17a8:	af 90       	pop	r10
    17aa:	9f 90       	pop	r9
    17ac:	8f 90       	pop	r8
    17ae:	7f 90       	pop	r7
    17b0:	6f 90       	pop	r6
    17b2:	5f 90       	pop	r5
    17b4:	4f 90       	pop	r4
    17b6:	08 95       	ret

000017b8 <_ZN7Display10SimpleFontD1Ev>:
		Font(buff) {
	_spacing = _height + 1;
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}
    17b8:	fc 01       	movw	r30, r24
    17ba:	84 eb       	ldi	r24, 0xB4	; 180
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	cf 01       	movw	r24, r30
    17c4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7Display4FontD2Ev>
    17c8:	08 95       	ret

000017ca <_ZN7Display10SimpleFontD0Ev>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	8c 01       	movw	r16, r24
    17d0:	84 eb       	ldi	r24, 0xB4	; 180
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	f8 01       	movw	r30, r16
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	c8 01       	movw	r24, r16
    17dc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN7Display4FontD2Ev>
    17e0:	c8 01       	movw	r24, r16
    17e2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_ZdlPv>
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	08 95       	ret

000017ec <_ZN7Display10SimpleFontC1ERNS_6BufferE>:
#include "SimpleFont.h"
#include "SimpleFont_data.h"

using namespace Display;

SimpleFont::SimpleFont(Buffer& buff) :
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	8c 01       	movw	r16, r24
		Font(buff) {
    17f2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN7Display4FontC2ERNS_6BufferE>
    17f6:	84 eb       	ldi	r24, 0xB4	; 180
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	f8 01       	movw	r30, r16
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
	_spacing = _height + 1;
    1800:	86 e0       	ldi	r24, 0x06	; 6
    1802:	84 83       	std	Z+4, r24	; 0x04
	_kerning = 2;
    1804:	82 e0       	ldi	r24, 0x02	; 2
    1806:	85 83       	std	Z+5, r24	; 0x05
}
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    180e:	08 95       	ret

00001810 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    1810:	1f 92       	push	r1
    1812:	0f 92       	push	r0
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    1828:	80 91 c0 00 	lds	r24, 0x00C0
    182c:	82 fd       	sbrc	r24, 2
    182e:	1d c0       	rjmp	.+58     	; 0x186a <__vector_18+0x5a>
      unsigned char c = UDR0;
    1830:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1834:	20 91 e0 02 	lds	r18, 0x02E0
    1838:	30 91 e1 02 	lds	r19, 0x02E1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    183c:	2f 5f       	subi	r18, 0xFF	; 255
    183e:	3f 4f       	sbci	r19, 0xFF	; 255
    1840:	2f 73       	andi	r18, 0x3F	; 63
    1842:	30 70       	andi	r19, 0x00	; 0
    1844:	80 91 e2 02 	lds	r24, 0x02E2
    1848:	90 91 e3 02 	lds	r25, 0x02E3
    184c:	28 17       	cp	r18, r24
    184e:	39 07       	cpc	r19, r25
    1850:	71 f0       	breq	.+28     	; 0x186e <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    1852:	e0 91 e0 02 	lds	r30, 0x02E0
    1856:	f0 91 e1 02 	lds	r31, 0x02E1
    185a:	e0 56       	subi	r30, 0x60	; 96
    185c:	fd 4f       	sbci	r31, 0xFD	; 253
    185e:	40 83       	st	Z, r20
    buffer->head = i;
    1860:	30 93 e1 02 	sts	0x02E1, r19
    1864:	20 93 e0 02 	sts	0x02E0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    186a:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	4f 91       	pop	r20
    1878:	3f 91       	pop	r19
    187a:	2f 91       	pop	r18
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1886:	e0 91 34 03 	lds	r30, 0x0334
    188a:	f0 91 35 03 	lds	r31, 0x0335
    188e:	e0 5c       	subi	r30, 0xC0	; 192
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	81 91       	ld	r24, Z+
    1894:	91 91       	ld	r25, Z+
    1896:	20 81       	ld	r18, Z
    1898:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    189a:	82 1b       	sub	r24, r18
    189c:	93 0b       	sbc	r25, r19
    189e:	8f 73       	andi	r24, 0x3F	; 63
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	89 2b       	or	r24, r25
    18a4:	11 f0       	breq	.+4      	; 0x18aa <_Z14serialEventRunv+0x24>
    18a6:	0e 94 07 0c 	call	0x180e	; 0x180e <_Z11serialEventv>
    18aa:	08 95       	ret

000018ac <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	2f 93       	push	r18
    18b8:	3f 93       	push	r19
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    18c2:	20 91 24 03 	lds	r18, 0x0324
    18c6:	30 91 25 03 	lds	r19, 0x0325
    18ca:	80 91 26 03 	lds	r24, 0x0326
    18ce:	90 91 27 03 	lds	r25, 0x0327
    18d2:	28 17       	cp	r18, r24
    18d4:	39 07       	cpc	r19, r25
    18d6:	31 f4       	brne	.+12     	; 0x18e4 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    18d8:	80 91 c1 00 	lds	r24, 0x00C1
    18dc:	8f 7d       	andi	r24, 0xDF	; 223
    18de:	80 93 c1 00 	sts	0x00C1, r24
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    18e4:	e0 91 26 03 	lds	r30, 0x0326
    18e8:	f0 91 27 03 	lds	r31, 0x0327
    18ec:	ec 51       	subi	r30, 0x1C	; 28
    18ee:	fd 4f       	sbci	r31, 0xFD	; 253
    18f0:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    18f2:	80 91 26 03 	lds	r24, 0x0326
    18f6:	90 91 27 03 	lds	r25, 0x0327
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	8f 73       	andi	r24, 0x3F	; 63
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	90 93 27 03 	sts	0x0327, r25
    1904:	80 93 26 03 	sts	0x0326, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1908:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    190c:	ff 91       	pop	r31
    190e:	ef 91       	pop	r30
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1922:	af 92       	push	r10
    1924:	bf 92       	push	r11
    1926:	df 92       	push	r13
    1928:	ef 92       	push	r14
    192a:	ff 92       	push	r15
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	ec 01       	movw	r28, r24
    1936:	7a 01       	movw	r14, r20
    1938:	8b 01       	movw	r16, r22
    193a:	dd 24       	eor	r13, r13
    193c:	40 30       	cpi	r20, 0x00	; 0
    193e:	81 ee       	ldi	r24, 0xE1	; 225
    1940:	58 07       	cpc	r21, r24
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	68 07       	cpc	r22, r24
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	78 07       	cpc	r23, r24
    194a:	11 f0       	breq	.+4      	; 0x1950 <_ZN14HardwareSerial5beginEm+0x2e>
    194c:	dd 24       	eor	r13, r13
    194e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	a9 2e       	mov	r10, r25
    1954:	b1 2c       	mov	r11, r1
    1956:	ec 89       	ldd	r30, Y+20	; 0x14
    1958:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    195a:	dd 20       	and	r13, r13
    195c:	69 f0       	breq	.+26     	; 0x1978 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    195e:	c5 01       	movw	r24, r10
    1960:	08 a0       	ldd	r0, Y+32	; 0x20
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <_ZN14HardwareSerial5beginEm+0x46>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <_ZN14HardwareSerial5beginEm+0x42>
    196c:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	79 e0       	ldi	r23, 0x09	; 9
    1972:	8d e3       	ldi	r24, 0x3D	; 61
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1978:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    197a:	60 e8       	ldi	r22, 0x80	; 128
    197c:	74 e8       	ldi	r23, 0x84	; 132
    197e:	8e e1       	ldi	r24, 0x1E	; 30
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a8 01       	movw	r20, r16
    1984:	97 01       	movw	r18, r14
    1986:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__udivmodsi4>
    198a:	21 50       	subi	r18, 0x01	; 1
    198c:	30 40       	sbci	r19, 0x00	; 0
    198e:	40 40       	sbci	r20, 0x00	; 0
    1990:	50 40       	sbci	r21, 0x00	; 0
    1992:	56 95       	lsr	r21
    1994:	47 95       	ror	r20
    1996:	37 95       	ror	r19
    1998:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    199a:	80 e1       	ldi	r24, 0x10	; 16
    199c:	20 30       	cpi	r18, 0x00	; 0
    199e:	38 07       	cpc	r19, r24
    19a0:	20 f0       	brcs	.+8      	; 0x19aa <_ZN14HardwareSerial5beginEm+0x88>
    19a2:	dd 20       	and	r13, r13
    19a4:	11 f0       	breq	.+4      	; 0x19aa <_ZN14HardwareSerial5beginEm+0x88>
    19a6:	dd 24       	eor	r13, r13
    19a8:	d6 cf       	rjmp	.-84     	; 0x1956 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    19aa:	e8 89       	ldd	r30, Y+16	; 0x10
    19ac:	f9 89       	ldd	r31, Y+17	; 0x11
    19ae:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    19b0:	ea 89       	ldd	r30, Y+18	; 0x12
    19b2:	fb 89       	ldd	r31, Y+19	; 0x13
    19b4:	20 83       	st	Z, r18

  transmitting = false;
    19b6:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    19b8:	ee 89       	ldd	r30, Y+22	; 0x16
    19ba:	ff 89       	ldd	r31, Y+23	; 0x17
    19bc:	40 81       	ld	r20, Z
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	c9 01       	movw	r24, r18
    19c4:	0c 8c       	ldd	r0, Y+28	; 0x1c
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <_ZN14HardwareSerial5beginEm+0xaa>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <_ZN14HardwareSerial5beginEm+0xa6>
    19d0:	48 2b       	or	r20, r24
    19d2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    19d4:	ee 89       	ldd	r30, Y+22	; 0x16
    19d6:	ff 89       	ldd	r31, Y+23	; 0x17
    19d8:	40 81       	ld	r20, Z
    19da:	c9 01       	movw	r24, r18
    19dc:	0d 8c       	ldd	r0, Y+29	; 0x1d
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <_ZN14HardwareSerial5beginEm+0xc2>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <_ZN14HardwareSerial5beginEm+0xbe>
    19e8:	48 2b       	or	r20, r24
    19ea:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    19ec:	ee 89       	ldd	r30, Y+22	; 0x16
    19ee:	ff 89       	ldd	r31, Y+23	; 0x17
    19f0:	40 81       	ld	r20, Z
    19f2:	c9 01       	movw	r24, r18
    19f4:	0e 8c       	ldd	r0, Y+30	; 0x1e
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <_ZN14HardwareSerial5beginEm+0xda>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <_ZN14HardwareSerial5beginEm+0xd6>
    1a00:	48 2b       	or	r20, r24
    1a02:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1a04:	ee 89       	ldd	r30, Y+22	; 0x16
    1a06:	ff 89       	ldd	r31, Y+23	; 0x17
    1a08:	80 81       	ld	r24, Z
    1a0a:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <_ZN14HardwareSerial5beginEm+0xf0>
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <_ZN14HardwareSerial5beginEm+0xec>
    1a16:	20 95       	com	r18
    1a18:	28 23       	and	r18, r24
    1a1a:	20 83       	st	Z, r18
}
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	08 95       	ret

00001a30 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1a30:	dc 01       	movw	r26, r24
    1a32:	1c 96       	adiw	r26, 0x0c	; 12
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	1d 97       	sbiw	r26, 0x0d	; 13
    1a3a:	e0 5c       	subi	r30, 0xC0	; 192
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	21 91       	ld	r18, Z+
    1a40:	31 91       	ld	r19, Z+
    1a42:	80 81       	ld	r24, Z
    1a44:	91 81       	ldd	r25, Z+1	; 0x01
    1a46:	28 1b       	sub	r18, r24
    1a48:	39 0b       	sbc	r19, r25
    1a4a:	2f 73       	andi	r18, 0x3F	; 63
    1a4c:	30 70       	andi	r19, 0x00	; 0
}
    1a4e:	c9 01       	movw	r24, r18
    1a50:	08 95       	ret

00001a52 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1a52:	dc 01       	movw	r26, r24
    1a54:	1c 96       	adiw	r26, 0x0c	; 12
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	1d 97       	sbiw	r26, 0x0d	; 13
    1a5c:	e0 5c       	subi	r30, 0xC0	; 192
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	20 81       	ld	r18, Z
    1a62:	31 81       	ldd	r19, Z+1	; 0x01
    1a64:	e0 54       	subi	r30, 0x40	; 64
    1a66:	f0 40       	sbci	r31, 0x00	; 0
    1a68:	df 01       	movw	r26, r30
    1a6a:	ae 5b       	subi	r26, 0xBE	; 190
    1a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6e:	8d 91       	ld	r24, X+
    1a70:	9c 91       	ld	r25, X
    1a72:	11 97       	sbiw	r26, 0x01	; 1
    1a74:	28 17       	cp	r18, r24
    1a76:	39 07       	cpc	r19, r25
    1a78:	19 f4       	brne	.+6      	; 0x1a80 <_ZN14HardwareSerial4peekEv+0x2e>
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1a80:	8d 91       	ld	r24, X+
    1a82:	9c 91       	ld	r25, X
    1a84:	e8 0f       	add	r30, r24
    1a86:	f9 1f       	adc	r31, r25
    1a88:	80 81       	ld	r24, Z
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1a8e:	c9 01       	movw	r24, r18
    1a90:	08 95       	ret

00001a92 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1a92:	dc 01       	movw	r26, r24
    1a94:	1c 96       	adiw	r26, 0x0c	; 12
    1a96:	ed 91       	ld	r30, X+
    1a98:	fc 91       	ld	r31, X
    1a9a:	1d 97       	sbiw	r26, 0x0d	; 13
    1a9c:	e0 5c       	subi	r30, 0xC0	; 192
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	20 81       	ld	r18, Z
    1aa2:	31 81       	ldd	r19, Z+1	; 0x01
    1aa4:	e0 54       	subi	r30, 0x40	; 64
    1aa6:	f0 40       	sbci	r31, 0x00	; 0
    1aa8:	df 01       	movw	r26, r30
    1aaa:	ae 5b       	subi	r26, 0xBE	; 190
    1aac:	bf 4f       	sbci	r27, 0xFF	; 255
    1aae:	8d 91       	ld	r24, X+
    1ab0:	9c 91       	ld	r25, X
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	28 17       	cp	r18, r24
    1ab6:	39 07       	cpc	r19, r25
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <_ZN14HardwareSerial4readEv+0x2e>
    1aba:	2f ef       	ldi	r18, 0xFF	; 255
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	10 c0       	rjmp	.+32     	; 0x1ae0 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1ac0:	8d 91       	ld	r24, X+
    1ac2:	9c 91       	ld	r25, X
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f9 1f       	adc	r31, r25
    1aca:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1acc:	8d 91       	ld	r24, X+
    1ace:	9c 91       	ld	r25, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	8f 73       	andi	r24, 0x3F	; 63
    1ad6:	90 70       	andi	r25, 0x00	; 0
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24
    return c;
    1ade:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	08 95       	ret

00001ae4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    1ae4:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    1ae6:	91 96       	adiw	r26, 0x21	; 33
    1ae8:	8c 91       	ld	r24, X
    1aea:	91 97       	sbiw	r26, 0x21	; 33
    1aec:	88 23       	and	r24, r24
    1aee:	39 f0       	breq	.+14     	; 0x1afe <_ZN14HardwareSerial5flushEv+0x1a>
    1af0:	54 96       	adiw	r26, 0x14	; 20
    1af2:	ed 91       	ld	r30, X+
    1af4:	fc 91       	ld	r31, X
    1af6:	55 97       	sbiw	r26, 0x15	; 21
    1af8:	80 81       	ld	r24, Z
    1afa:	86 ff       	sbrs	r24, 6
    1afc:	f9 cf       	rjmp	.-14     	; 0x1af0 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    1afe:	91 96       	adiw	r26, 0x21	; 33
    1b00:	1c 92       	st	X, r1
}
    1b02:	08 95       	ret

00001b04 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1b0a:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b0c:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b0e:	e0 5c       	subi	r30, 0xC0	; 192
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	20 81       	ld	r18, Z
    1b14:	31 81       	ldd	r19, Z+1	; 0x01
    1b16:	e0 54       	subi	r30, 0x40	; 64
    1b18:	f0 40       	sbci	r31, 0x00	; 0
    1b1a:	2f 5f       	subi	r18, 0xFF	; 255
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	2f 73       	andi	r18, 0x3F	; 63
    1b20:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1b22:	df 01       	movw	r26, r30
    1b24:	ae 5b       	subi	r26, 0xBE	; 190
    1b26:	bf 4f       	sbci	r27, 0xFF	; 255
    1b28:	8d 91       	ld	r24, X+
    1b2a:	9c 91       	ld	r25, X
    1b2c:	11 97       	sbiw	r26, 0x01	; 1
    1b2e:	28 17       	cp	r18, r24
    1b30:	39 07       	cpc	r19, r25
    1b32:	d1 f3       	breq	.-12     	; 0x1b28 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1b34:	e0 5c       	subi	r30, 0xC0	; 192
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	e0 54       	subi	r30, 0x40	; 64
    1b3e:	f0 40       	sbci	r31, 0x00	; 0
    1b40:	e8 0f       	add	r30, r24
    1b42:	f9 1f       	adc	r31, r25
    1b44:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1b46:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b48:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b4a:	e0 5c       	subi	r30, 0xC0	; 192
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	31 83       	std	Z+1, r19	; 0x01
    1b50:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1b52:	ee 89       	ldd	r30, Y+22	; 0x16
    1b54:	ff 89       	ldd	r31, Y+23	; 0x17
    1b56:	20 81       	ld	r18, Z
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <_ZN14HardwareSerial5writeEh+0x60>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <_ZN14HardwareSerial5writeEh+0x5c>
    1b68:	28 2b       	or	r18, r24
    1b6a:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    1b70:	ec 89       	ldd	r30, Y+20	; 0x14
    1b72:	fd 89       	ldd	r31, Y+21	; 0x15
    1b74:	80 81       	ld	r24, Z
    1b76:	80 64       	ori	r24, 0x40	; 64
    1b78:	80 83       	st	Z, r24
  
  return 1;
}
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b84:	10 92 2b 03 	sts	0x032B, r1
    1b88:	10 92 2a 03 	sts	0x032A, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1b8c:	88 ee       	ldi	r24, 0xE8	; 232
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	80 93 2c 03 	sts	0x032C, r24
    1b98:	90 93 2d 03 	sts	0x032D, r25
    1b9c:	a0 93 2e 03 	sts	0x032E, r26
    1ba0:	b0 93 2f 03 	sts	0x032F, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1ba4:	84 ed       	ldi	r24, 0xD4	; 212
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	90 93 29 03 	sts	0x0329, r25
    1bac:	80 93 28 03 	sts	0x0328, r24
{
  _rx_buffer = rx_buffer;
    1bb0:	80 ea       	ldi	r24, 0xA0	; 160
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	90 93 35 03 	sts	0x0335, r25
    1bb8:	80 93 34 03 	sts	0x0334, r24
  _tx_buffer = tx_buffer;
    1bbc:	84 ee       	ldi	r24, 0xE4	; 228
    1bbe:	92 e0       	ldi	r25, 0x02	; 2
    1bc0:	90 93 37 03 	sts	0x0337, r25
    1bc4:	80 93 36 03 	sts	0x0336, r24
  _ubrrh = ubrrh;
    1bc8:	85 ec       	ldi	r24, 0xC5	; 197
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	90 93 39 03 	sts	0x0339, r25
    1bd0:	80 93 38 03 	sts	0x0338, r24
  _ubrrl = ubrrl;
    1bd4:	84 ec       	ldi	r24, 0xC4	; 196
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	90 93 3b 03 	sts	0x033B, r25
    1bdc:	80 93 3a 03 	sts	0x033A, r24
  _ucsra = ucsra;
    1be0:	80 ec       	ldi	r24, 0xC0	; 192
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	90 93 3d 03 	sts	0x033D, r25
    1be8:	80 93 3c 03 	sts	0x033C, r24
  _ucsrb = ucsrb;
    1bec:	81 ec       	ldi	r24, 0xC1	; 193
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	90 93 3f 03 	sts	0x033F, r25
    1bf4:	80 93 3e 03 	sts	0x033E, r24
  _ucsrc = ucsrc;
    1bf8:	82 ec       	ldi	r24, 0xC2	; 194
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	90 93 41 03 	sts	0x0341, r25
    1c00:	80 93 40 03 	sts	0x0340, r24
  _udr = udr;
    1c04:	86 ec       	ldi	r24, 0xC6	; 198
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	90 93 43 03 	sts	0x0343, r25
    1c0c:	80 93 42 03 	sts	0x0342, r24
  _rxen = rxen;
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	80 93 44 03 	sts	0x0344, r24
  _txen = txen;
    1c16:	83 e0       	ldi	r24, 0x03	; 3
    1c18:	80 93 45 03 	sts	0x0345, r24
  _rxcie = rxcie;
    1c1c:	87 e0       	ldi	r24, 0x07	; 7
    1c1e:	80 93 46 03 	sts	0x0346, r24
  _udrie = udrie;
    1c22:	85 e0       	ldi	r24, 0x05	; 5
    1c24:	80 93 47 03 	sts	0x0347, r24
  _u2x = u2x;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 48 03 	sts	0x0348, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1c2e:	08 95       	ret

00001c30 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	7c 01       	movw	r14, r24
    1c42:	6b 01       	movw	r12, r22
    1c44:	8a 01       	movw	r16, r20
    1c46:	c0 e0       	ldi	r28, 0x00	; 0
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1c4c:	d6 01       	movw	r26, r12
    1c4e:	6d 91       	ld	r22, X+
    1c50:	6d 01       	movw	r12, r26
    1c52:	d7 01       	movw	r26, r14
    1c54:	ed 91       	ld	r30, X+
    1c56:	fc 91       	ld	r31, X
    1c58:	01 90       	ld	r0, Z+
    1c5a:	f0 81       	ld	r31, Z
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	c7 01       	movw	r24, r14
    1c60:	09 95       	icall
    1c62:	c8 0f       	add	r28, r24
    1c64:	d9 1f       	adc	r29, r25
    1c66:	01 50       	subi	r16, 0x01	; 1
    1c68:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1c6a:	01 15       	cp	r16, r1
    1c6c:	11 05       	cpc	r17, r1
    1c6e:	71 f7       	brne	.-36     	; 0x1c4c <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1c70:	ce 01       	movw	r24, r28
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	ff 90       	pop	r15
    1c7c:	ef 90       	pop	r14
    1c7e:	df 90       	pop	r13
    1c80:	cf 90       	pop	r12
    1c82:	08 95       	ret

00001c84 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1c84:	dc 01       	movw	r26, r24
{
  return write(c);
    1c86:	ed 91       	ld	r30, X+
    1c88:	fc 91       	ld	r31, X
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	f0 81       	ld	r31, Z
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	09 95       	icall
}
    1c92:	08 95       	ret

00001c94 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	ed 91       	ld	r30, X+
    1ca2:	fc 91       	ld	r31, X
    1ca4:	01 90       	ld	r0, Z+
    1ca6:	f0 81       	ld	r31, Z
    1ca8:	e0 2d       	mov	r30, r0
    1caa:	6d e0       	ldi	r22, 0x0D	; 13
    1cac:	09 95       	icall
    1cae:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1cb0:	d8 01       	movw	r26, r16
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	fc 91       	ld	r31, X
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	f0 81       	ld	r31, Z
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	6a e0       	ldi	r22, 0x0A	; 10
    1cc0:	09 95       	icall
    1cc2:	9c 01       	movw	r18, r24
    1cc4:	2e 0d       	add	r18, r14
    1cc6:	3f 1d       	adc	r19, r15
    1cc8:	c9 01       	movw	r24, r18
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	08 95       	ret

00001cd4 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    1cda:	61 15       	cp	r22, r1
    1cdc:	71 05       	cpc	r23, r1
    1cde:	19 f4       	brne	.+6      	; 0x1ce6 <_ZN5Print5writeEPKc+0x12>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    1ce6:	db 01       	movw	r26, r22
    1ce8:	0d 90       	ld	r0, X+
    1cea:	00 20       	and	r0, r0
    1cec:	e9 f7       	brne	.-6      	; 0x1ce8 <_ZN5Print5writeEPKc+0x14>
    1cee:	11 97       	sbiw	r26, 0x01	; 1
    1cf0:	a6 1b       	sub	r26, r22
    1cf2:	b7 0b       	sbc	r27, r23
    1cf4:	e8 81       	ld	r30, Y
    1cf6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cf8:	02 80       	ldd	r0, Z+2	; 0x02
    1cfa:	f3 81       	ldd	r31, Z+3	; 0x03
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	ad 01       	movw	r20, r26
    1d00:	09 95       	icall
    1d02:	9c 01       	movw	r18, r24
    }
    1d04:	c9 01       	movw	r24, r18
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1d16:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <_ZN5Print5writeEPKc>
    1d1a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <_ZN5Print7printlnEv>
    1d22:	08 0f       	add	r16, r24
    1d24:	19 1f       	adc	r17, r25
  return n;
}
    1d26:	c8 01       	movw	r24, r16
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	08 95       	ret

00001d32 <main>:
#include <Arduino.h>

int main(void)
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
{
	init();
    1d36:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1d3a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1d3e:	c3 e4       	ldi	r28, 0x43	; 67
    1d40:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1d42:	0e 94 9d 0a 	call	0x153a	; 0x153a <loop>
		if (serialEventRun) serialEventRun();
    1d46:	20 97       	sbiw	r28, 0x00	; 0
    1d48:	e1 f3       	breq	.-8      	; 0x1d42 <main+0x10>
    1d4a:	0e 94 43 0c 	call	0x1886	; 0x1886 <_Z14serialEventRunv>
    1d4e:	f9 cf       	rjmp	.-14     	; 0x1d42 <main+0x10>

00001d50 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    1d50:	08 95       	ret

00001d52 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    1d52:	0e 94 cb 01 	call	0x396	; 0x396 <free>
} 
    1d56:	08 95       	ret

00001d58 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1d58:	1f 92       	push	r1
    1d5a:	0f 92       	push	r0
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	0f 92       	push	r0
    1d60:	11 24       	eor	r1, r1
    1d62:	2f 93       	push	r18
    1d64:	3f 93       	push	r19
    1d66:	8f 93       	push	r24
    1d68:	9f 93       	push	r25
    1d6a:	af 93       	push	r26
    1d6c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1d6e:	80 91 4e 03 	lds	r24, 0x034E
    1d72:	90 91 4f 03 	lds	r25, 0x034F
    1d76:	a0 91 50 03 	lds	r26, 0x0350
    1d7a:	b0 91 51 03 	lds	r27, 0x0351
	unsigned char f = timer0_fract;
    1d7e:	30 91 52 03 	lds	r19, 0x0352

	m += MILLIS_INC;
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	a1 1d       	adc	r26, r1
    1d86:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1d88:	23 2f       	mov	r18, r19
    1d8a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1d8c:	2d 37       	cpi	r18, 0x7D	; 125
    1d8e:	20 f0       	brcs	.+8      	; 0x1d98 <__vector_16+0x40>
		f -= FRACT_MAX;
    1d90:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	a1 1d       	adc	r26, r1
    1d96:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1d98:	20 93 52 03 	sts	0x0352, r18
	timer0_millis = m;
    1d9c:	80 93 4e 03 	sts	0x034E, r24
    1da0:	90 93 4f 03 	sts	0x034F, r25
    1da4:	a0 93 50 03 	sts	0x0350, r26
    1da8:	b0 93 51 03 	sts	0x0351, r27
	timer0_overflow_count++;
    1dac:	80 91 4a 03 	lds	r24, 0x034A
    1db0:	90 91 4b 03 	lds	r25, 0x034B
    1db4:	a0 91 4c 03 	lds	r26, 0x034C
    1db8:	b0 91 4d 03 	lds	r27, 0x034D
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	a1 1d       	adc	r26, r1
    1dc0:	b1 1d       	adc	r27, r1
    1dc2:	80 93 4a 03 	sts	0x034A, r24
    1dc6:	90 93 4b 03 	sts	0x034B, r25
    1dca:	a0 93 4c 03 	sts	0x034C, r26
    1dce:	b0 93 4d 03 	sts	0x034D, r27
}
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	3f 91       	pop	r19
    1ddc:	2f 91       	pop	r18
    1dde:	0f 90       	pop	r0
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	0f 90       	pop	r0
    1de4:	1f 90       	pop	r1
    1de6:	18 95       	reti

00001de8 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1dec:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    1dee:	f8 94       	cli
	m = timer0_overflow_count;
    1df0:	80 91 4a 03 	lds	r24, 0x034A
    1df4:	90 91 4b 03 	lds	r25, 0x034B
    1df8:	a0 91 4c 03 	lds	r26, 0x034C
    1dfc:	b0 91 4d 03 	lds	r27, 0x034D
#if defined(TCNT0)
	t = TCNT0;
    1e00:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1e02:	a8 9b       	sbis	0x15, 0	; 21
    1e04:	05 c0       	rjmp	.+10     	; 0x1e10 <delay+0x28>
    1e06:	6f 3f       	cpi	r22, 0xFF	; 255
    1e08:	19 f0       	breq	.+6      	; 0x1e10 <delay+0x28>
		m++;
    1e0a:	01 96       	adiw	r24, 0x01	; 1
    1e0c:	a1 1d       	adc	r26, r1
    1e0e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1e10:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    1e12:	ba 2f       	mov	r27, r26
    1e14:	a9 2f       	mov	r26, r25
    1e16:	98 2f       	mov	r25, r24
    1e18:	88 27       	eor	r24, r24
    1e1a:	86 0f       	add	r24, r22
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	a1 1d       	adc	r26, r1
    1e20:	b1 1d       	adc	r27, r1
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	aa 1f       	adc	r26, r26
    1e2a:	bb 1f       	adc	r27, r27
    1e2c:	6a 95       	dec	r22
    1e2e:	d1 f7       	brne	.-12     	; 0x1e24 <delay+0x3c>
    1e30:	bc 01       	movw	r22, r24
    1e32:	2d c0       	rjmp	.+90     	; 0x1e8e <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1e34:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    1e36:	f8 94       	cli
	m = timer0_overflow_count;
    1e38:	80 91 4a 03 	lds	r24, 0x034A
    1e3c:	90 91 4b 03 	lds	r25, 0x034B
    1e40:	a0 91 4c 03 	lds	r26, 0x034C
    1e44:	b0 91 4d 03 	lds	r27, 0x034D
#if defined(TCNT0)
	t = TCNT0;
    1e48:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1e4a:	a8 9b       	sbis	0x15, 0	; 21
    1e4c:	05 c0       	rjmp	.+10     	; 0x1e58 <delay+0x70>
    1e4e:	ef 3f       	cpi	r30, 0xFF	; 255
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <delay+0x70>
		m++;
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1e58:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1e5a:	ba 2f       	mov	r27, r26
    1e5c:	a9 2f       	mov	r26, r25
    1e5e:	98 2f       	mov	r25, r24
    1e60:	88 27       	eor	r24, r24
    1e62:	8e 0f       	add	r24, r30
    1e64:	91 1d       	adc	r25, r1
    1e66:	a1 1d       	adc	r26, r1
    1e68:	b1 1d       	adc	r27, r1
    1e6a:	e2 e0       	ldi	r30, 0x02	; 2
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	aa 1f       	adc	r26, r26
    1e72:	bb 1f       	adc	r27, r27
    1e74:	ea 95       	dec	r30
    1e76:	d1 f7       	brne	.-12     	; 0x1e6c <delay+0x84>
    1e78:	86 1b       	sub	r24, r22
    1e7a:	97 0b       	sbc	r25, r23
    1e7c:	88 5e       	subi	r24, 0xE8	; 232
    1e7e:	93 40       	sbci	r25, 0x03	; 3
    1e80:	c8 f2       	brcs	.-78     	; 0x1e34 <delay+0x4c>
			ms--;
    1e82:	21 50       	subi	r18, 0x01	; 1
    1e84:	30 40       	sbci	r19, 0x00	; 0
    1e86:	40 40       	sbci	r20, 0x00	; 0
    1e88:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1e8a:	68 51       	subi	r22, 0x18	; 24
    1e8c:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1e8e:	21 15       	cp	r18, r1
    1e90:	31 05       	cpc	r19, r1
    1e92:	41 05       	cpc	r20, r1
    1e94:	51 05       	cpc	r21, r1
    1e96:	71 f6       	brne	.-100    	; 0x1e34 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1e98:	08 95       	ret

00001e9a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1e9a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1e9c:	84 b5       	in	r24, 0x24	; 36
    1e9e:	82 60       	ori	r24, 0x02	; 2
    1ea0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1ea2:	84 b5       	in	r24, 0x24	; 36
    1ea4:	81 60       	ori	r24, 0x01	; 1
    1ea6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1ea8:	85 b5       	in	r24, 0x25	; 37
    1eaa:	82 60       	ori	r24, 0x02	; 2
    1eac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1eae:	85 b5       	in	r24, 0x25	; 37
    1eb0:	81 60       	ori	r24, 0x01	; 1
    1eb2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1eb4:	ee e6       	ldi	r30, 0x6E	; 110
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	81 60       	ori	r24, 0x01	; 1
    1ebc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1ebe:	e1 e8       	ldi	r30, 0x81	; 129
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 60       	ori	r24, 0x02	; 2
    1ec8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1eca:	80 81       	ld	r24, Z
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1ed0:	e0 e8       	ldi	r30, 0x80	; 128
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 60       	ori	r24, 0x01	; 1
    1ed8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1eda:	e1 eb       	ldi	r30, 0xB1	; 177
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	84 60       	ori	r24, 0x04	; 4
    1ee2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1ee4:	e0 eb       	ldi	r30, 0xB0	; 176
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	81 60       	ori	r24, 0x01	; 1
    1eec:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1eee:	ea e7       	ldi	r30, 0x7A	; 122
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	84 60       	ori	r24, 0x04	; 4
    1ef6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1ef8:	80 81       	ld	r24, Z
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1efe:	80 81       	ld	r24, Z
    1f00:	81 60       	ori	r24, 0x01	; 1
    1f02:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1f04:	80 81       	ld	r24, Z
    1f06:	80 68       	ori	r24, 0x80	; 128
    1f08:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1f0a:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1f0e:	08 95       	ret

00001f10 <__divmodhi4>:
    1f10:	97 fb       	bst	r25, 7
    1f12:	09 2e       	mov	r0, r25
    1f14:	07 26       	eor	r0, r23
    1f16:	0a d0       	rcall	.+20     	; 0x1f2c <__divmodhi4_neg1>
    1f18:	77 fd       	sbrc	r23, 7
    1f1a:	04 d0       	rcall	.+8      	; 0x1f24 <__divmodhi4_neg2>
    1f1c:	2e d0       	rcall	.+92     	; 0x1f7a <__udivmodhi4>
    1f1e:	06 d0       	rcall	.+12     	; 0x1f2c <__divmodhi4_neg1>
    1f20:	00 20       	and	r0, r0
    1f22:	1a f4       	brpl	.+6      	; 0x1f2a <__divmodhi4_exit>

00001f24 <__divmodhi4_neg2>:
    1f24:	70 95       	com	r23
    1f26:	61 95       	neg	r22
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255

00001f2a <__divmodhi4_exit>:
    1f2a:	08 95       	ret

00001f2c <__divmodhi4_neg1>:
    1f2c:	f6 f7       	brtc	.-4      	; 0x1f2a <__divmodhi4_exit>
    1f2e:	90 95       	com	r25
    1f30:	81 95       	neg	r24
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	08 95       	ret

00001f36 <__udivmodsi4>:
    1f36:	a1 e2       	ldi	r26, 0x21	; 33
    1f38:	1a 2e       	mov	r1, r26
    1f3a:	aa 1b       	sub	r26, r26
    1f3c:	bb 1b       	sub	r27, r27
    1f3e:	fd 01       	movw	r30, r26
    1f40:	0d c0       	rjmp	.+26     	; 0x1f5c <__udivmodsi4_ep>

00001f42 <__udivmodsi4_loop>:
    1f42:	aa 1f       	adc	r26, r26
    1f44:	bb 1f       	adc	r27, r27
    1f46:	ee 1f       	adc	r30, r30
    1f48:	ff 1f       	adc	r31, r31
    1f4a:	a2 17       	cp	r26, r18
    1f4c:	b3 07       	cpc	r27, r19
    1f4e:	e4 07       	cpc	r30, r20
    1f50:	f5 07       	cpc	r31, r21
    1f52:	20 f0       	brcs	.+8      	; 0x1f5c <__udivmodsi4_ep>
    1f54:	a2 1b       	sub	r26, r18
    1f56:	b3 0b       	sbc	r27, r19
    1f58:	e4 0b       	sbc	r30, r20
    1f5a:	f5 0b       	sbc	r31, r21

00001f5c <__udivmodsi4_ep>:
    1f5c:	66 1f       	adc	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	1a 94       	dec	r1
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <__udivmodsi4_loop>
    1f68:	60 95       	com	r22
    1f6a:	70 95       	com	r23
    1f6c:	80 95       	com	r24
    1f6e:	90 95       	com	r25
    1f70:	9b 01       	movw	r18, r22
    1f72:	ac 01       	movw	r20, r24
    1f74:	bd 01       	movw	r22, r26
    1f76:	cf 01       	movw	r24, r30
    1f78:	08 95       	ret

00001f7a <__udivmodhi4>:
    1f7a:	aa 1b       	sub	r26, r26
    1f7c:	bb 1b       	sub	r27, r27
    1f7e:	51 e1       	ldi	r21, 0x11	; 17
    1f80:	07 c0       	rjmp	.+14     	; 0x1f90 <__udivmodhi4_ep>

00001f82 <__udivmodhi4_loop>:
    1f82:	aa 1f       	adc	r26, r26
    1f84:	bb 1f       	adc	r27, r27
    1f86:	a6 17       	cp	r26, r22
    1f88:	b7 07       	cpc	r27, r23
    1f8a:	10 f0       	brcs	.+4      	; 0x1f90 <__udivmodhi4_ep>
    1f8c:	a6 1b       	sub	r26, r22
    1f8e:	b7 0b       	sbc	r27, r23

00001f90 <__udivmodhi4_ep>:
    1f90:	88 1f       	adc	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	5a 95       	dec	r21
    1f96:	a9 f7       	brne	.-22     	; 0x1f82 <__udivmodhi4_loop>
    1f98:	80 95       	com	r24
    1f9a:	90 95       	com	r25
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	08 95       	ret

00001fa2 <__tablejump2__>:
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31

00001fa6 <__tablejump__>:
    1fa6:	05 90       	lpm	r0, Z+
    1fa8:	f4 91       	lpm	r31, Z+
    1faa:	e0 2d       	mov	r30, r0
    1fac:	09 94       	ijmp

00001fae <toupper>:
    1fae:	91 11       	cpse	r25, r1
    1fb0:	08 95       	ret
    1fb2:	81 56       	subi	r24, 0x61	; 97
    1fb4:	8a 51       	subi	r24, 0x1A	; 26
    1fb6:	08 f4       	brcc	.+2      	; 0x1fba <toupper+0xc>
    1fb8:	80 52       	subi	r24, 0x20	; 32
    1fba:	85 58       	subi	r24, 0x85	; 133
    1fbc:	08 95       	ret

00001fbe <__do_global_dtors>:
    1fbe:	11 e0       	ldi	r17, 0x01	; 1
    1fc0:	cc ee       	ldi	r28, 0xEC	; 236
    1fc2:	d1 e0       	ldi	r29, 0x01	; 1
    1fc4:	04 c0       	rjmp	.+8      	; 0x1fce <.do_global_dtors_start>

00001fc6 <.do_global_dtors_loop>:
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__tablejump__>
    1fcc:	22 96       	adiw	r28, 0x02	; 2

00001fce <.do_global_dtors_start>:
    1fce:	ce 3e       	cpi	r28, 0xEE	; 238
    1fd0:	d1 07       	cpc	r29, r17
    1fd2:	c9 f7       	brne	.-14     	; 0x1fc6 <.do_global_dtors_loop>
    1fd4:	f8 94       	cli

00001fd6 <__stop_program>:
    1fd6:	ff cf       	rjmp	.-2      	; 0x1fd6 <__stop_program>

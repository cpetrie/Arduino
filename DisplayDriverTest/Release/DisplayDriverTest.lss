
DisplayDriverTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000ce6  00000d7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d9  00800120  00800120  00000d9a  2**0
                  ALLOC
  3 .debug_aranges 00000650  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f39  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000079f5  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000181e  00000000  00000000  00009d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000031cf  00000000  00000000  0000b536  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  0000e708  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bad  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b7f  00000000  00000000  00010df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000610  00000000  00000000  00014974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? true : false;
}

void Buffer::set8Bit(int x, int y, uint8_t data, BlendMode m) {
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_16>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_18>
  4c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	3a 01       	movw	r6, r20
  6a:	68 03       	fmul	r22, r16

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 ee       	ldi	r30, 0xE6	; 230
  80:	fc e0       	ldi	r31, 0x0C	; 12
  82:	02 c0       	rjmp	.+4      	; 0x88 <.do_copy_data_start>

00000084 <.do_copy_data_loop>:
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0

00000088 <.do_copy_data_start>:
  88:	a0 32       	cpi	r26, 0x20	; 32
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <.do_copy_data_loop>

0000008e <__do_clear_bss>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	a0 e2       	ldi	r26, 0x20	; 32
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a9 3f       	cpi	r26, 0xF9	; 249
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	cc e6       	ldi	r28, 0x6C	; 108
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <.do_global_ctors_start>

000000a6 <.do_global_ctors_loop>:
  a6:	22 97       	sbiw	r28, 0x02	; 2
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 6d 06 	call	0xcda	; 0xcda <__tablejump__>

000000ae <.do_global_ctors_start>:
  ae:	c8 36       	cpi	r28, 0x68	; 104
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <.do_global_ctors_loop>
  b4:	0e 94 18 05 	call	0xa30	; 0xa30 <main>
  b8:	0c 94 71 06 	jmp	0xce2	; 0xce2 <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <_ZN3Led6Buffer6setBitEiib>:
		// Print an end-line for each row
		Serial.println("");
	}
}

void Buffer::setBit(int x, int y, bool val) {
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	fc 01       	movw	r30, r24
  c8:	eb 01       	movw	r28, r22
  ca:	12 2f       	mov	r17, r18

	// Check input variables
	if (x > _width || y > _height)
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	86 17       	cp	r24, r22
  d2:	97 07       	cpc	r25, r23
  d4:	94 f1       	brlt	.+100    	; 0x13a <_ZN3Led6Buffer6setBitEiib+0x7a>
  d6:	82 81       	ldd	r24, Z+2	; 0x02
  d8:	93 81       	ldd	r25, Z+3	; 0x03
  da:	84 17       	cp	r24, r20
  dc:	95 07       	cpc	r25, r21
  de:	6c f1       	brlt	.+90     	; 0x13a <_ZN3Led6Buffer6setBitEiib+0x7a>
		return;

	// Get byte pointer that contains the bit
	uint8_t* bitBytePtr = _buff + (_pitchBytes * y) + x/8;
  e0:	84 81       	ldd	r24, Z+4	; 0x04
  e2:	95 81       	ldd	r25, Z+5	; 0x05
  e4:	48 9f       	mul	r20, r24
  e6:	90 01       	movw	r18, r0
  e8:	49 9f       	mul	r20, r25
  ea:	30 0d       	add	r19, r0
  ec:	58 9f       	mul	r21, r24
  ee:	30 0d       	add	r19, r0
  f0:	11 24       	eor	r1, r1
  f2:	cb 01       	movw	r24, r22
  f4:	68 e0       	ldi	r22, 0x08	; 8
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodhi4>
  fc:	26 0f       	add	r18, r22
  fe:	37 1f       	adc	r19, r23
 100:	06 80       	ldd	r0, Z+6	; 0x06
 102:	f7 81       	ldd	r31, Z+7	; 0x07
 104:	e0 2d       	mov	r30, r0
 106:	e2 0f       	add	r30, r18
 108:	f3 1f       	adc	r31, r19

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));
 10a:	ce 01       	movw	r24, r28
 10c:	68 e0       	ldi	r22, 0x08	; 8
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodhi4>
 114:	27 e0       	ldi	r18, 0x07	; 7
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	28 1b       	sub	r18, r24
 11a:	39 0b       	sbc	r19, r25
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <_ZN3Led6Buffer6setBitEiib+0x66>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	2a 95       	dec	r18
 128:	e2 f7       	brpl	.-8      	; 0x122 <_ZN3Led6Buffer6setBitEiib+0x62>
 12a:	20 81       	ld	r18, Z

	if (val) {
 12c:	11 23       	and	r17, r17
 12e:	11 f0       	breq	.+4      	; 0x134 <_ZN3Led6Buffer6setBitEiib+0x74>
		*bitBytePtr |= bit;  // set the bit
 130:	28 2b       	or	r18, r24
 132:	02 c0       	rjmp	.+4      	; 0x138 <_ZN3Led6Buffer6setBitEiib+0x78>
	} else {
		*bitBytePtr &= ~bit; // clear the bit
 134:	80 95       	com	r24
 136:	28 23       	and	r18, r24
 138:	20 83       	st	Z, r18
	}
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <_ZN3Led6Buffer6getBitEii>:

bool Buffer::getBit(int x, int y) {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	fc 01       	movw	r30, r24
 148:	eb 01       	movw	r28, r22

	// Check input variables
		if (x > _width || y > _height)
 14a:	80 81       	ld	r24, Z
 14c:	91 81       	ldd	r25, Z+1	; 0x01
 14e:	86 17       	cp	r24, r22
 150:	97 07       	cpc	r25, r23
 152:	5c f1       	brlt	.+86     	; 0x1aa <_ZN3Led6Buffer6getBitEii+0x68>
 154:	82 81       	ldd	r24, Z+2	; 0x02
 156:	93 81       	ldd	r25, Z+3	; 0x03
 158:	84 17       	cp	r24, r20
 15a:	95 07       	cpc	r25, r21
 15c:	34 f1       	brlt	.+76     	; 0x1aa <_ZN3Led6Buffer6getBitEii+0x68>
	uint8_t bitByte = *(_buff + (_pitchBytes * y) + x/8);

	// Shift the byte to extract the desired bit
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? true : false;
 15e:	84 81       	ldd	r24, Z+4	; 0x04
 160:	95 81       	ldd	r25, Z+5	; 0x05
 162:	48 9f       	mul	r20, r24
 164:	90 01       	movw	r18, r0
 166:	49 9f       	mul	r20, r25
 168:	30 0d       	add	r19, r0
 16a:	58 9f       	mul	r21, r24
 16c:	30 0d       	add	r19, r0
 16e:	11 24       	eor	r1, r1
 170:	cb 01       	movw	r24, r22
 172:	68 e0       	ldi	r22, 0x08	; 8
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodhi4>
 17a:	06 80       	ldd	r0, Z+6	; 0x06
 17c:	f7 81       	ldd	r31, Z+7	; 0x07
 17e:	e0 2d       	mov	r30, r0
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	e6 0f       	add	r30, r22
 186:	f7 1f       	adc	r31, r23
 188:	20 81       	ld	r18, Z
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	ce 01       	movw	r24, r28
 18e:	68 e0       	ldi	r22, 0x08	; 8
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	0e 94 22 06 	call	0xc44	; 0xc44 <__divmodhi4>
 196:	02 c0       	rjmp	.+4      	; 0x19c <_ZN3Led6Buffer6getBitEii+0x5a>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	8a 95       	dec	r24
 19e:	e2 f7       	brpl	.-8      	; 0x198 <_ZN3Led6Buffer6getBitEii+0x56>
 1a0:	82 2f       	mov	r24, r18
 1a2:	88 1f       	adc	r24, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	88 1f       	adc	r24, r24
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <_ZN3Led6Buffer6getBitEii+0x6a>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_ZN3Led6Buffer8getWidthEv>:
	}

	return bits;
}

int Buffer::getWidth() {
 1b2:	fc 01       	movw	r30, r24
return _width;
}
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	08 95       	ret

000001ba <_ZN3Led6Buffer9getHeightEv>:

int Buffer::getHeight() {
 1ba:	fc 01       	movw	r30, r24
return _height;
}
 1bc:	82 81       	ldd	r24, Z+2	; 0x02
 1be:	93 81       	ldd	r25, Z+3	; 0x03
 1c0:	08 95       	ret

000001c2 <_ZN3Led6Buffer11printSerialEcc>:

/**
 * Prints out the buffer to the serial port.  Note that the
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	7c 01       	movw	r14, r24
 1d4:	c6 2e       	mov	r12, r22
 1d6:	d4 2e       	mov	r13, r20
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	10 e0       	ldi	r17, 0x00	; 0
 1dc:	1d c0       	rjmp	.+58     	; 0x218 <_ZN3Led6Buffer11printSerialEcc+0x56>

		// Loop across the bits
		for (int w = 0; w < _width; w++) {

			// Get the bit
			bool bit = getBit(w, h);
 1de:	c7 01       	movw	r24, r14
 1e0:	be 01       	movw	r22, r28
 1e2:	a8 01       	movw	r20, r16
 1e4:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN3Led6Buffer6getBitEii>

			// Print the bit
			char bitChar = bit ? ones : zeros;
 1e8:	88 23       	and	r24, r24
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <_ZN3Led6Buffer11printSerialEcc+0x2e>
 1ec:	6d 2d       	mov	r22, r13
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <_ZN3Led6Buffer11printSerialEcc+0x30>
 1f0:	6c 2d       	mov	r22, r12
			Serial.print(bitChar);
 1f2:	8e ec       	ldi	r24, 0xCE	; 206
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN5Print5printEc>

	// Loop over the height
	for (int h = 0; h < _height; h++) {

		// Loop across the bits
		for (int w = 0; w < _width; w++) {
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	f7 01       	movw	r30, r14
 1fe:	80 81       	ld	r24, Z
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	c8 17       	cp	r28, r24
 204:	d9 07       	cpc	r29, r25
 206:	5c f3       	brlt	.-42     	; 0x1de <_ZN3Led6Buffer11printSerialEcc+0x1c>
			Serial.print(bitChar);

		}

		// Print an end-line for each row
		Serial.println("");
 208:	8e ec       	ldi	r24, 0xCE	; 206
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN5Print7printlnEPKc>
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {

	// Loop over the height
	for (int h = 0; h < _height; h++) {
 214:	0f 5f       	subi	r16, 0xFF	; 255
 216:	1f 4f       	sbci	r17, 0xFF	; 255
 218:	f7 01       	movw	r30, r14
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	93 81       	ldd	r25, Z+3	; 0x03
 21e:	08 17       	cp	r16, r24
 220:	19 07       	cpc	r17, r25
 222:	1c f4       	brge	.+6      	; 0x22a <_ZN3Led6Buffer11printSerialEcc+0x68>
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	e9 cf       	rjmp	.-46     	; 0x1fc <_ZN3Led6Buffer11printSerialEcc+0x3a>
		}

		// Print an end-line for each row
		Serial.println("");
	}
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	08 95       	ret

0000023c <_ZN3Led6Buffer5clearEb>:
Buffer::Buffer(const int width, const int height, const int pitchBytes, uint8_t* buff) :
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff) {
	clear();
}

void Buffer::clear(bool val) {
 23c:	fc 01       	movw	r30, r24
	uint8_t bits = val ? 0xFF : 0x00;
 23e:	66 23       	and	r22, r22
 240:	11 f4       	brne	.+4      	; 0x246 <_ZN3Led6Buffer5clearEb+0xa>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	01 c0       	rjmp	.+2      	; 0x248 <_ZN3Led6Buffer5clearEb+0xc>
 246:	8f ef       	ldi	r24, 0xFF	; 255
	memset(_buff, bits, sizeof(uint8_t));
 248:	06 80       	ldd	r0, Z+6	; 0x06
 24a:	f7 81       	ldd	r31, Z+7	; 0x07
 24c:	e0 2d       	mov	r30, r0
 24e:	80 83       	st	Z, r24
}
 250:	08 95       	ret

00000252 <_ZN3Led6BufferC1EiiiPh>:
 *  @param height The height of image buffer in pixels
 *  @param pitchBytes The number of bytes provided for each row.
 *  	This must be at least floor( (width + 7)/8 ) bytes
 *  @param buff pointer to the display buffer array
 */
Buffer::Buffer(const int width, const int height, const int pitchBytes, uint8_t* buff) :
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	fc 01       	movw	r30, r24
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff) {
 258:	71 83       	std	Z+1, r23	; 0x01
 25a:	60 83       	st	Z, r22
 25c:	53 83       	std	Z+3, r21	; 0x03
 25e:	42 83       	std	Z+2, r20	; 0x02
 260:	35 83       	std	Z+5, r19	; 0x05
 262:	24 83       	std	Z+4, r18	; 0x04
 264:	17 83       	std	Z+7, r17	; 0x07
 266:	06 83       	std	Z+6, r16	; 0x06
	clear();
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	0e 94 1e 01 	call	0x23c	; 0x23c <_ZN3Led6Buffer5clearEb>
}
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	08 95       	ret

00000274 <_GLOBAL__I_rawDispBuff>:
		}

		// Flip the value to write
		writeVal = !writeVal;
	}
}
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Led::Buffer dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
 278:	8e e3       	ldi	r24, 0x3E	; 62
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	64 e1       	ldi	r22, 0x14	; 20
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	50 e0       	ldi	r21, 0x00	; 0
 284:	23 e0       	ldi	r18, 0x03	; 3
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	00 e2       	ldi	r16, 0x20	; 32
 28a:	11 e0       	ldi	r17, 0x01	; 1
 28c:	0e 94 29 01 	call	0x252	; 0x252 <_ZN3Led6BufferC1EiiiPh>
		}

		// Flip the value to write
		writeVal = !writeVal;
	}
}
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <_Z25test_Buffer_setBit_getBitv>:
{
	test_Buffer_setBit_getBit();
}


void test_Buffer_setBit_getBit()
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ff 24       	eor	r15, r15
 2a4:	f3 94       	inc	r15
				delay(100);
			}
		}

		// Flip the value to write
		writeVal = !writeVal;
 2a6:	ee 24       	eor	r14, r14
 2a8:	e3 94       	inc	r14
{
	test_Buffer_setBit_getBit();
}


void test_Buffer_setBit_getBit()
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	3d c0       	rjmp	.+122    	; 0x32a <_Z25test_Buffer_setBit_getBitv+0x94>

			// Loop across the bits
			for (int w = 0; w < dispBuff.getWidth(); w++) {

				// Print current coord
				Serial.print("Set x: ");
 2b0:	8e ec       	ldi	r24, 0xCE	; 206
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN5Print5printEPKc>
				Serial.print(w);
 2bc:	8e ec       	ldi	r24, 0xCE	; 206
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	be 01       	movw	r22, r28
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <_ZN5Print5printEii>
				Serial.print(", y: ");
 2ca:	8e ec       	ldi	r24, 0xCE	; 206
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	69 e0       	ldi	r22, 0x09	; 9
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN5Print5printEPKc>
				Serial.println(h);
 2d6:	8e ec       	ldi	r24, 0xCE	; 206
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	b8 01       	movw	r22, r16
 2dc:	4a e0       	ldi	r20, 0x0A	; 10
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN5Print7printlnEii>

				// Modify the buffer
				dispBuff.setBit(w, h, writeVal);
 2e4:	8e e3       	ldi	r24, 0x3E	; 62
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	be 01       	movw	r22, r28
 2ea:	a8 01       	movw	r20, r16
 2ec:	2f 2d       	mov	r18, r15
 2ee:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN3Led6Buffer6setBitEiib>

				// Print out the buffer
				dispBuff.printSerial('X', '.');
 2f2:	8e e3       	ldi	r24, 0x3E	; 62
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	68 e5       	ldi	r22, 0x58	; 88
 2f8:	4e e2       	ldi	r20, 0x2E	; 46
 2fa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN3Led6Buffer11printSerialEcc>
				Serial.println("");
 2fe:	8e ec       	ldi	r24, 0xCE	; 206
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	6f e0       	ldi	r22, 0x0F	; 15
 304:	71 e0       	ldi	r23, 0x01	; 1
 306:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN5Print7printlnEPKc>

				// Delay between iterations
				delay(100);
 30a:	64 e6       	ldi	r22, 0x64	; 100
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 6f 05 	call	0xade	; 0xade <delay>
	{
		// Loop over the height
		for (int h = 0; h < dispBuff.getHeight(); h++) {

			// Loop across the bits
			for (int w = 0; w < dispBuff.getWidth(); w++) {
 316:	21 96       	adiw	r28, 0x01	; 1
 318:	8e e3       	ldi	r24, 0x3E	; 62
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN3Led6Buffer8getWidthEv>
 320:	c8 17       	cp	r28, r24
 322:	d9 07       	cpc	r29, r25
 324:	2c f2       	brlt	.-118    	; 0x2b0 <_Z25test_Buffer_setBit_getBitv+0x1a>
	bool writeVal(true);

	while (true)
	{
		// Loop over the height
		for (int h = 0; h < dispBuff.getHeight(); h++) {
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	8e e3       	ldi	r24, 0x3E	; 62
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_ZN3Led6Buffer9getHeightEv>
 332:	08 17       	cp	r16, r24
 334:	19 07       	cpc	r17, r25
 336:	1c f4       	brge	.+6      	; 0x33e <_Z25test_Buffer_setBit_getBitv+0xa8>
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	d0 e0       	ldi	r29, 0x00	; 0
 33c:	ed cf       	rjmp	.-38     	; 0x318 <_Z25test_Buffer_setBit_getBitv+0x82>
				delay(100);
			}
		}

		// Flip the value to write
		writeVal = !writeVal;
 33e:	fe 24       	eor	r15, r14
 340:	b4 cf       	rjmp	.-152    	; 0x2aa <_Z25test_Buffer_setBit_getBitv+0x14>

00000342 <loop>:
	Serial.begin(9600);
}

void loop()
{
	test_Buffer_setBit_getBit();
 342:	0e 94 4b 01 	call	0x296	; 0x296 <_Z25test_Buffer_setBit_getBitv>
}
 346:	08 95       	ret

00000348 <setup>:
// Prototypes
void test_Buffer_setBit_getBit();

void setup()
{
	Serial.begin(9600);
 348:	8e ec       	ldi	r24, 0xCE	; 206
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	40 e8       	ldi	r20, 0x80	; 128
 34e:	55 e2       	ldi	r21, 0x25	; 37
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	0e 94 37 02 	call	0x46e	; 0x46e <_ZN14HardwareSerial5beginEm>
}
 358:	08 95       	ret

0000035a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 35a:	08 95       	ret

0000035c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 374:	80 91 c0 00 	lds	r24, 0x00C0
 378:	82 fd       	sbrc	r24, 2
 37a:	1d c0       	rjmp	.+58     	; 0x3b6 <__vector_18+0x5a>
      unsigned char c = UDR0;
 37c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 380:	20 91 86 01 	lds	r18, 0x0186
 384:	30 91 87 01 	lds	r19, 0x0187

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 388:	2f 5f       	subi	r18, 0xFF	; 255
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	2f 73       	andi	r18, 0x3F	; 63
 38e:	30 70       	andi	r19, 0x00	; 0
 390:	80 91 88 01 	lds	r24, 0x0188
 394:	90 91 89 01 	lds	r25, 0x0189
 398:	28 17       	cp	r18, r24
 39a:	39 07       	cpc	r19, r25
 39c:	71 f0       	breq	.+28     	; 0x3ba <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 39e:	e0 91 86 01 	lds	r30, 0x0186
 3a2:	f0 91 87 01 	lds	r31, 0x0187
 3a6:	ea 5b       	subi	r30, 0xBA	; 186
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	40 83       	st	Z, r20
    buffer->head = i;
 3ac:	30 93 87 01 	sts	0x0187, r19
 3b0:	20 93 86 01 	sts	0x0186, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 3b6:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 3ba:	ff 91       	pop	r31
 3bc:	ef 91       	pop	r30
 3be:	9f 91       	pop	r25
 3c0:	8f 91       	pop	r24
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	0f 90       	pop	r0
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	0f 90       	pop	r0
 3ce:	1f 90       	pop	r1
 3d0:	18 95       	reti

000003d2 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 3d2:	e0 91 da 01 	lds	r30, 0x01DA
 3d6:	f0 91 db 01 	lds	r31, 0x01DB
 3da:	e0 5c       	subi	r30, 0xC0	; 192
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	81 91       	ld	r24, Z+
 3e0:	91 91       	ld	r25, Z+
 3e2:	20 81       	ld	r18, Z
 3e4:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 3e6:	82 1b       	sub	r24, r18
 3e8:	93 0b       	sbc	r25, r19
 3ea:	8f 73       	andi	r24, 0x3F	; 63
 3ec:	90 70       	andi	r25, 0x00	; 0
 3ee:	89 2b       	or	r24, r25
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <_Z14serialEventRunv+0x24>
 3f2:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z11serialEventv>
 3f6:	08 95       	ret

000003f8 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 40e:	20 91 ca 01 	lds	r18, 0x01CA
 412:	30 91 cb 01 	lds	r19, 0x01CB
 416:	80 91 cc 01 	lds	r24, 0x01CC
 41a:	90 91 cd 01 	lds	r25, 0x01CD
 41e:	28 17       	cp	r18, r24
 420:	39 07       	cpc	r19, r25
 422:	31 f4       	brne	.+12     	; 0x430 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 424:	80 91 c1 00 	lds	r24, 0x00C1
 428:	8f 7d       	andi	r24, 0xDF	; 223
 42a:	80 93 c1 00 	sts	0x00C1, r24
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 430:	e0 91 cc 01 	lds	r30, 0x01CC
 434:	f0 91 cd 01 	lds	r31, 0x01CD
 438:	e6 57       	subi	r30, 0x76	; 118
 43a:	fe 4f       	sbci	r31, 0xFE	; 254
 43c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 43e:	80 91 cc 01 	lds	r24, 0x01CC
 442:	90 91 cd 01 	lds	r25, 0x01CD
 446:	01 96       	adiw	r24, 0x01	; 1
 448:	8f 73       	andi	r24, 0x3F	; 63
 44a:	90 70       	andi	r25, 0x00	; 0
 44c:	90 93 cd 01 	sts	0x01CD, r25
 450:	80 93 cc 01 	sts	0x01CC, r24
	
  #if defined(UDR0)
    UDR0 = c;
 454:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 46e:	af 92       	push	r10
 470:	bf 92       	push	r11
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
 482:	7a 01       	movw	r14, r20
 484:	8b 01       	movw	r16, r22
 486:	dd 24       	eor	r13, r13
 488:	40 30       	cpi	r20, 0x00	; 0
 48a:	81 ee       	ldi	r24, 0xE1	; 225
 48c:	58 07       	cpc	r21, r24
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	68 07       	cpc	r22, r24
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	78 07       	cpc	r23, r24
 496:	11 f0       	breq	.+4      	; 0x49c <_ZN14HardwareSerial5beginEm+0x2e>
 498:	dd 24       	eor	r13, r13
 49a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	a9 2e       	mov	r10, r25
 4a0:	b1 2c       	mov	r11, r1
 4a2:	ec 89       	ldd	r30, Y+20	; 0x14
 4a4:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 4a6:	dd 20       	and	r13, r13
 4a8:	69 f0       	breq	.+26     	; 0x4c4 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 4aa:	c5 01       	movw	r24, r10
 4ac:	08 a0       	ldd	r0, Y+32	; 0x20
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN14HardwareSerial5beginEm+0x46>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <_ZN14HardwareSerial5beginEm+0x42>
 4b8:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	79 e0       	ldi	r23, 0x09	; 9
 4be:	8d e3       	ldi	r24, 0x3D	; 61
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
 4c4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4c6:	60 e8       	ldi	r22, 0x80	; 128
 4c8:	74 e8       	ldi	r23, 0x84	; 132
 4ca:	8e e1       	ldi	r24, 0x1E	; 30
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	a8 01       	movw	r20, r16
 4d0:	97 01       	movw	r18, r14
 4d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <__udivmodsi4>
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	30 40       	sbci	r19, 0x00	; 0
 4da:	40 40       	sbci	r20, 0x00	; 0
 4dc:	50 40       	sbci	r21, 0x00	; 0
 4de:	56 95       	lsr	r21
 4e0:	47 95       	ror	r20
 4e2:	37 95       	ror	r19
 4e4:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 4e6:	80 e1       	ldi	r24, 0x10	; 16
 4e8:	20 30       	cpi	r18, 0x00	; 0
 4ea:	38 07       	cpc	r19, r24
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <_ZN14HardwareSerial5beginEm+0x88>
 4ee:	dd 20       	and	r13, r13
 4f0:	11 f0       	breq	.+4      	; 0x4f6 <_ZN14HardwareSerial5beginEm+0x88>
 4f2:	dd 24       	eor	r13, r13
 4f4:	d6 cf       	rjmp	.-84     	; 0x4a2 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4f6:	e8 89       	ldd	r30, Y+16	; 0x10
 4f8:	f9 89       	ldd	r31, Y+17	; 0x11
 4fa:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4fc:	ea 89       	ldd	r30, Y+18	; 0x12
 4fe:	fb 89       	ldd	r31, Y+19	; 0x13
 500:	20 83       	st	Z, r18

  transmitting = false;
 502:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 504:	ee 89       	ldd	r30, Y+22	; 0x16
 506:	ff 89       	ldd	r31, Y+23	; 0x17
 508:	40 81       	ld	r20, Z
 50a:	21 e0       	ldi	r18, 0x01	; 1
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	c9 01       	movw	r24, r18
 510:	0c 8c       	ldd	r0, Y+28	; 0x1c
 512:	02 c0       	rjmp	.+4      	; 0x518 <__stack+0x19>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__stack+0x15>
 51c:	48 2b       	or	r20, r24
 51e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 520:	ee 89       	ldd	r30, Y+22	; 0x16
 522:	ff 89       	ldd	r31, Y+23	; 0x17
 524:	40 81       	ld	r20, Z
 526:	c9 01       	movw	r24, r18
 528:	0d 8c       	ldd	r0, Y+29	; 0x1d
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__stack+0x31>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <__stack+0x2d>
 534:	48 2b       	or	r20, r24
 536:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 538:	ee 89       	ldd	r30, Y+22	; 0x16
 53a:	ff 89       	ldd	r31, Y+23	; 0x17
 53c:	40 81       	ld	r20, Z
 53e:	c9 01       	movw	r24, r18
 540:	0e 8c       	ldd	r0, Y+30	; 0x1e
 542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0x49>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__stack+0x45>
 54c:	48 2b       	or	r20, r24
 54e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 550:	ee 89       	ldd	r30, Y+22	; 0x16
 552:	ff 89       	ldd	r31, Y+23	; 0x17
 554:	80 81       	ld	r24, Z
 556:	0f 8c       	ldd	r0, Y+31	; 0x1f
 558:	02 c0       	rjmp	.+4      	; 0x55e <__stack+0x5f>
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <__stack+0x5b>
 562:	20 95       	com	r18
 564:	28 23       	and	r18, r24
 566:	20 83       	st	Z, r18
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	df 90       	pop	r13
 576:	bf 90       	pop	r11
 578:	af 90       	pop	r10
 57a:	08 95       	ret

0000057c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 57c:	dc 01       	movw	r26, r24
 57e:	1c 96       	adiw	r26, 0x0c	; 12
 580:	ed 91       	ld	r30, X+
 582:	fc 91       	ld	r31, X
 584:	1d 97       	sbiw	r26, 0x0d	; 13
 586:	e0 5c       	subi	r30, 0xC0	; 192
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	21 91       	ld	r18, Z+
 58c:	31 91       	ld	r19, Z+
 58e:	80 81       	ld	r24, Z
 590:	91 81       	ldd	r25, Z+1	; 0x01
 592:	28 1b       	sub	r18, r24
 594:	39 0b       	sbc	r19, r25
 596:	2f 73       	andi	r18, 0x3F	; 63
 598:	30 70       	andi	r19, 0x00	; 0
}
 59a:	c9 01       	movw	r24, r18
 59c:	08 95       	ret

0000059e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 59e:	dc 01       	movw	r26, r24
 5a0:	1c 96       	adiw	r26, 0x0c	; 12
 5a2:	ed 91       	ld	r30, X+
 5a4:	fc 91       	ld	r31, X
 5a6:	1d 97       	sbiw	r26, 0x0d	; 13
 5a8:	e0 5c       	subi	r30, 0xC0	; 192
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	20 81       	ld	r18, Z
 5ae:	31 81       	ldd	r19, Z+1	; 0x01
 5b0:	e0 54       	subi	r30, 0x40	; 64
 5b2:	f0 40       	sbci	r31, 0x00	; 0
 5b4:	df 01       	movw	r26, r30
 5b6:	ae 5b       	subi	r26, 0xBE	; 190
 5b8:	bf 4f       	sbci	r27, 0xFF	; 255
 5ba:	8d 91       	ld	r24, X+
 5bc:	9c 91       	ld	r25, X
 5be:	11 97       	sbiw	r26, 0x01	; 1
 5c0:	28 17       	cp	r18, r24
 5c2:	39 07       	cpc	r19, r25
 5c4:	19 f4       	brne	.+6      	; 0x5cc <_ZN14HardwareSerial4peekEv+0x2e>
 5c6:	2f ef       	ldi	r18, 0xFF	; 255
 5c8:	3f ef       	ldi	r19, 0xFF	; 255
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 5cc:	8d 91       	ld	r24, X+
 5ce:	9c 91       	ld	r25, X
 5d0:	e8 0f       	add	r30, r24
 5d2:	f9 1f       	adc	r31, r25
 5d4:	80 81       	ld	r24, Z
 5d6:	28 2f       	mov	r18, r24
 5d8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 5da:	c9 01       	movw	r24, r18
 5dc:	08 95       	ret

000005de <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 5de:	dc 01       	movw	r26, r24
 5e0:	1c 96       	adiw	r26, 0x0c	; 12
 5e2:	ed 91       	ld	r30, X+
 5e4:	fc 91       	ld	r31, X
 5e6:	1d 97       	sbiw	r26, 0x0d	; 13
 5e8:	e0 5c       	subi	r30, 0xC0	; 192
 5ea:	ff 4f       	sbci	r31, 0xFF	; 255
 5ec:	20 81       	ld	r18, Z
 5ee:	31 81       	ldd	r19, Z+1	; 0x01
 5f0:	e0 54       	subi	r30, 0x40	; 64
 5f2:	f0 40       	sbci	r31, 0x00	; 0
 5f4:	df 01       	movw	r26, r30
 5f6:	ae 5b       	subi	r26, 0xBE	; 190
 5f8:	bf 4f       	sbci	r27, 0xFF	; 255
 5fa:	8d 91       	ld	r24, X+
 5fc:	9c 91       	ld	r25, X
 5fe:	11 97       	sbiw	r26, 0x01	; 1
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	19 f4       	brne	.+6      	; 0x60c <_ZN14HardwareSerial4readEv+0x2e>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	3f ef       	ldi	r19, 0xFF	; 255
 60a:	10 c0       	rjmp	.+32     	; 0x62c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 60c:	8d 91       	ld	r24, X+
 60e:	9c 91       	ld	r25, X
 610:	11 97       	sbiw	r26, 0x01	; 1
 612:	e8 0f       	add	r30, r24
 614:	f9 1f       	adc	r31, r25
 616:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 618:	8d 91       	ld	r24, X+
 61a:	9c 91       	ld	r25, X
 61c:	11 97       	sbiw	r26, 0x01	; 1
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	8f 73       	andi	r24, 0x3F	; 63
 622:	90 70       	andi	r25, 0x00	; 0
 624:	11 96       	adiw	r26, 0x01	; 1
 626:	9c 93       	st	X, r25
 628:	8e 93       	st	-X, r24
    return c;
 62a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 62c:	c9 01       	movw	r24, r18
 62e:	08 95       	ret

00000630 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 630:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 632:	91 96       	adiw	r26, 0x21	; 33
 634:	8c 91       	ld	r24, X
 636:	91 97       	sbiw	r26, 0x21	; 33
 638:	88 23       	and	r24, r24
 63a:	39 f0       	breq	.+14     	; 0x64a <_ZN14HardwareSerial5flushEv+0x1a>
 63c:	54 96       	adiw	r26, 0x14	; 20
 63e:	ed 91       	ld	r30, X+
 640:	fc 91       	ld	r31, X
 642:	55 97       	sbiw	r26, 0x15	; 21
 644:	80 81       	ld	r24, Z
 646:	86 ff       	sbrs	r24, 6
 648:	f9 cf       	rjmp	.-14     	; 0x63c <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 64a:	91 96       	adiw	r26, 0x21	; 33
 64c:	1c 92       	st	X, r1
}
 64e:	08 95       	ret

00000650 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 656:	ee 85       	ldd	r30, Y+14	; 0x0e
 658:	ff 85       	ldd	r31, Y+15	; 0x0f
 65a:	e0 5c       	subi	r30, 0xC0	; 192
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	20 81       	ld	r18, Z
 660:	31 81       	ldd	r19, Z+1	; 0x01
 662:	e0 54       	subi	r30, 0x40	; 64
 664:	f0 40       	sbci	r31, 0x00	; 0
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	3f 4f       	sbci	r19, 0xFF	; 255
 66a:	2f 73       	andi	r18, 0x3F	; 63
 66c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 66e:	df 01       	movw	r26, r30
 670:	ae 5b       	subi	r26, 0xBE	; 190
 672:	bf 4f       	sbci	r27, 0xFF	; 255
 674:	8d 91       	ld	r24, X+
 676:	9c 91       	ld	r25, X
 678:	11 97       	sbiw	r26, 0x01	; 1
 67a:	28 17       	cp	r18, r24
 67c:	39 07       	cpc	r19, r25
 67e:	d1 f3       	breq	.-12     	; 0x674 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 680:	e0 5c       	subi	r30, 0xC0	; 192
 682:	ff 4f       	sbci	r31, 0xFF	; 255
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	e0 54       	subi	r30, 0x40	; 64
 68a:	f0 40       	sbci	r31, 0x00	; 0
 68c:	e8 0f       	add	r30, r24
 68e:	f9 1f       	adc	r31, r25
 690:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 692:	ee 85       	ldd	r30, Y+14	; 0x0e
 694:	ff 85       	ldd	r31, Y+15	; 0x0f
 696:	e0 5c       	subi	r30, 0xC0	; 192
 698:	ff 4f       	sbci	r31, 0xFF	; 255
 69a:	31 83       	std	Z+1, r19	; 0x01
 69c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 69e:	ee 89       	ldd	r30, Y+22	; 0x16
 6a0:	ff 89       	ldd	r31, Y+23	; 0x17
 6a2:	20 81       	ld	r18, Z
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0f 8c       	ldd	r0, Y+31	; 0x1f
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <_ZN14HardwareSerial5writeEh+0x60>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <_ZN14HardwareSerial5writeEh+0x5c>
 6b4:	28 2b       	or	r18, r24
 6b6:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 6bc:	ec 89       	ldd	r30, Y+20	; 0x14
 6be:	fd 89       	ldd	r31, Y+21	; 0x15
 6c0:	80 81       	ld	r24, Z
 6c2:	80 64       	ori	r24, 0x40	; 64
 6c4:	80 83       	st	Z, r24
  
  return 1;
}
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 6d0:	10 92 d1 01 	sts	0x01D1, r1
 6d4:	10 92 d0 01 	sts	0x01D0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 6d8:	88 ee       	ldi	r24, 0xE8	; 232
 6da:	93 e0       	ldi	r25, 0x03	; 3
 6dc:	a0 e0       	ldi	r26, 0x00	; 0
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	80 93 d2 01 	sts	0x01D2, r24
 6e4:	90 93 d3 01 	sts	0x01D3, r25
 6e8:	a0 93 d4 01 	sts	0x01D4, r26
 6ec:	b0 93 d5 01 	sts	0x01D5, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 6f0:	84 e1       	ldi	r24, 0x14	; 20
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	90 93 cf 01 	sts	0x01CF, r25
 6f8:	80 93 ce 01 	sts	0x01CE, r24
{
  _rx_buffer = rx_buffer;
 6fc:	86 e4       	ldi	r24, 0x46	; 70
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	90 93 db 01 	sts	0x01DB, r25
 704:	80 93 da 01 	sts	0x01DA, r24
  _tx_buffer = tx_buffer;
 708:	8a e8       	ldi	r24, 0x8A	; 138
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	90 93 dd 01 	sts	0x01DD, r25
 710:	80 93 dc 01 	sts	0x01DC, r24
  _ubrrh = ubrrh;
 714:	85 ec       	ldi	r24, 0xC5	; 197
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	90 93 df 01 	sts	0x01DF, r25
 71c:	80 93 de 01 	sts	0x01DE, r24
  _ubrrl = ubrrl;
 720:	84 ec       	ldi	r24, 0xC4	; 196
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	90 93 e1 01 	sts	0x01E1, r25
 728:	80 93 e0 01 	sts	0x01E0, r24
  _ucsra = ucsra;
 72c:	80 ec       	ldi	r24, 0xC0	; 192
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 e3 01 	sts	0x01E3, r25
 734:	80 93 e2 01 	sts	0x01E2, r24
  _ucsrb = ucsrb;
 738:	81 ec       	ldi	r24, 0xC1	; 193
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	90 93 e5 01 	sts	0x01E5, r25
 740:	80 93 e4 01 	sts	0x01E4, r24
  _ucsrc = ucsrc;
 744:	82 ec       	ldi	r24, 0xC2	; 194
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	90 93 e7 01 	sts	0x01E7, r25
 74c:	80 93 e6 01 	sts	0x01E6, r24
  _udr = udr;
 750:	86 ec       	ldi	r24, 0xC6	; 198
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	90 93 e9 01 	sts	0x01E9, r25
 758:	80 93 e8 01 	sts	0x01E8, r24
  _rxen = rxen;
 75c:	84 e0       	ldi	r24, 0x04	; 4
 75e:	80 93 ea 01 	sts	0x01EA, r24
  _txen = txen;
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	80 93 eb 01 	sts	0x01EB, r24
  _rxcie = rxcie;
 768:	87 e0       	ldi	r24, 0x07	; 7
 76a:	80 93 ec 01 	sts	0x01EC, r24
  _udrie = udrie;
 76e:	85 e0       	ldi	r24, 0x05	; 5
 770:	80 93 ed 01 	sts	0x01ED, r24
  _u2x = u2x;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 ee 01 	sts	0x01EE, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 77a:	08 95       	ret

0000077c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 77c:	cf 92       	push	r12
 77e:	df 92       	push	r13
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	7c 01       	movw	r14, r24
 78e:	6b 01       	movw	r12, r22
 790:	8a 01       	movw	r16, r20
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	0f c0       	rjmp	.+30     	; 0x7b6 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 798:	d6 01       	movw	r26, r12
 79a:	6d 91       	ld	r22, X+
 79c:	6d 01       	movw	r12, r26
 79e:	d7 01       	movw	r26, r14
 7a0:	ed 91       	ld	r30, X+
 7a2:	fc 91       	ld	r31, X
 7a4:	01 90       	ld	r0, Z+
 7a6:	f0 81       	ld	r31, Z
 7a8:	e0 2d       	mov	r30, r0
 7aa:	c7 01       	movw	r24, r14
 7ac:	09 95       	icall
 7ae:	c8 0f       	add	r28, r24
 7b0:	d9 1f       	adc	r29, r25
 7b2:	01 50       	subi	r16, 0x01	; 1
 7b4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 7b6:	01 15       	cp	r16, r1
 7b8:	11 05       	cpc	r17, r1
 7ba:	71 f7       	brne	.-36     	; 0x798 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 7bc:	ce 01       	movw	r24, r28
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	ff 90       	pop	r15
 7c8:	ef 90       	pop	r14
 7ca:	df 90       	pop	r13
 7cc:	cf 90       	pop	r12
 7ce:	08 95       	ret

000007d0 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
 7d0:	dc 01       	movw	r26, r24
{
  return write(c);
 7d2:	ed 91       	ld	r30, X+
 7d4:	fc 91       	ld	r31, X
 7d6:	01 90       	ld	r0, Z+
 7d8:	f0 81       	ld	r31, Z
 7da:	e0 2d       	mov	r30, r0
 7dc:	09 95       	icall
}
 7de:	08 95       	ret

000007e0 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 7ea:	dc 01       	movw	r26, r24
 7ec:	ed 91       	ld	r30, X+
 7ee:	fc 91       	ld	r31, X
 7f0:	01 90       	ld	r0, Z+
 7f2:	f0 81       	ld	r31, Z
 7f4:	e0 2d       	mov	r30, r0
 7f6:	6d e0       	ldi	r22, 0x0D	; 13
 7f8:	09 95       	icall
 7fa:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 7fc:	d8 01       	movw	r26, r16
 7fe:	ed 91       	ld	r30, X+
 800:	fc 91       	ld	r31, X
 802:	01 90       	ld	r0, Z+
 804:	f0 81       	ld	r31, Z
 806:	e0 2d       	mov	r30, r0
 808:	c8 01       	movw	r24, r16
 80a:	6a e0       	ldi	r22, 0x0A	; 10
 80c:	09 95       	icall
 80e:	9c 01       	movw	r18, r24
 810:	2e 0d       	add	r18, r14
 812:	3f 1d       	adc	r19, r15
 814:	c9 01       	movw	r24, r18
 816:	1f 91       	pop	r17
 818:	0f 91       	pop	r16
 81a:	ff 90       	pop	r15
 81c:	ef 90       	pop	r14
 81e:	08 95       	ret

00000820 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 826:	61 15       	cp	r22, r1
 828:	71 05       	cpc	r23, r1
 82a:	19 f4       	brne	.+6      	; 0x832 <_ZN5Print5writeEPKc+0x12>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	0f c0       	rjmp	.+30     	; 0x850 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 832:	db 01       	movw	r26, r22
 834:	0d 90       	ld	r0, X+
 836:	00 20       	and	r0, r0
 838:	e9 f7       	brne	.-6      	; 0x834 <_ZN5Print5writeEPKc+0x14>
 83a:	11 97       	sbiw	r26, 0x01	; 1
 83c:	a6 1b       	sub	r26, r22
 83e:	b7 0b       	sbc	r27, r23
 840:	e8 81       	ld	r30, Y
 842:	f9 81       	ldd	r31, Y+1	; 0x01
 844:	02 80       	ldd	r0, Z+2	; 0x02
 846:	f3 81       	ldd	r31, Z+3	; 0x03
 848:	e0 2d       	mov	r30, r0
 84a:	ad 01       	movw	r20, r26
 84c:	09 95       	icall
 84e:	9c 01       	movw	r18, r24
    }
 850:	c9 01       	movw	r24, r18
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 858:	4f 92       	push	r4
 85a:	5f 92       	push	r5
 85c:	7f 92       	push	r7
 85e:	8f 92       	push	r8
 860:	9f 92       	push	r9
 862:	af 92       	push	r10
 864:	bf 92       	push	r11
 866:	cf 92       	push	r12
 868:	df 92       	push	r13
 86a:	ef 92       	push	r14
 86c:	ff 92       	push	r15
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	df 93       	push	r29
 874:	cf 93       	push	r28
 876:	cd b7       	in	r28, 0x3d	; 61
 878:	de b7       	in	r29, 0x3e	; 62
 87a:	a1 97       	sbiw	r28, 0x21	; 33
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	de bf       	out	0x3e, r29	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	cd bf       	out	0x3d, r28	; 61
 886:	2c 01       	movw	r4, r24
 888:	74 2e       	mov	r7, r20
 88a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 88c:	22 30       	cpi	r18, 0x02	; 2
 88e:	08 f4       	brcc	.+2      	; 0x892 <_ZN5Print11printNumberEmh+0x3a>
 890:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 892:	19 a2       	std	Y+33, r1	; 0x21
 894:	31 e2       	ldi	r19, 0x21	; 33
 896:	c3 2e       	mov	r12, r19
 898:	d1 2c       	mov	r13, r1
 89a:	cc 0e       	add	r12, r28
 89c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 89e:	82 2e       	mov	r8, r18
 8a0:	99 24       	eor	r9, r9
 8a2:	aa 24       	eor	r10, r10
 8a4:	bb 24       	eor	r11, r11
 8a6:	67 2d       	mov	r22, r7
 8a8:	75 2f       	mov	r23, r21
 8aa:	a5 01       	movw	r20, r10
 8ac:	94 01       	movw	r18, r8
 8ae:	0e 94 35 06 	call	0xc6a	; 0xc6a <__udivmodsi4>
 8b2:	79 01       	movw	r14, r18
 8b4:	8a 01       	movw	r16, r20
    char c = m - base * n;
 8b6:	c8 01       	movw	r24, r16
 8b8:	b7 01       	movw	r22, r14
 8ba:	a5 01       	movw	r20, r10
 8bc:	94 01       	movw	r18, r8
 8be:	0e 94 03 06 	call	0xc06	; 0xc06 <__mulsi3>
 8c2:	47 2d       	mov	r20, r7
 8c4:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8c6:	08 94       	sec
 8c8:	c1 08       	sbc	r12, r1
 8ca:	d1 08       	sbc	r13, r1
 8cc:	4a 30       	cpi	r20, 0x0A	; 10
 8ce:	14 f4       	brge	.+4      	; 0x8d4 <_ZN5Print11printNumberEmh+0x7c>
 8d0:	40 5d       	subi	r20, 0xD0	; 208
 8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <_ZN5Print11printNumberEmh+0x7e>
 8d4:	49 5c       	subi	r20, 0xC9	; 201
 8d6:	f6 01       	movw	r30, r12
 8d8:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8da:	e1 14       	cp	r14, r1
 8dc:	f1 04       	cpc	r15, r1
 8de:	01 05       	cpc	r16, r1
 8e0:	11 05       	cpc	r17, r1
 8e2:	21 f0       	breq	.+8      	; 0x8ec <_ZN5Print11printNumberEmh+0x94>
 8e4:	7e 2c       	mov	r7, r14
 8e6:	5f 2d       	mov	r21, r15
 8e8:	c8 01       	movw	r24, r16
 8ea:	dd cf       	rjmp	.-70     	; 0x8a6 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8ec:	c2 01       	movw	r24, r4
 8ee:	b6 01       	movw	r22, r12
 8f0:	0e 94 10 04 	call	0x820	; 0x820 <_ZN5Print5writeEPKc>
}
 8f4:	a1 96       	adiw	r28, 0x21	; 33
 8f6:	0f b6       	in	r0, 0x3f	; 63
 8f8:	f8 94       	cli
 8fa:	de bf       	out	0x3e, r29	; 62
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	cd bf       	out	0x3d, r28	; 61
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	ff 90       	pop	r15
 90a:	ef 90       	pop	r14
 90c:	df 90       	pop	r13
 90e:	cf 90       	pop	r12
 910:	bf 90       	pop	r11
 912:	af 90       	pop	r10
 914:	9f 90       	pop	r9
 916:	8f 90       	pop	r8
 918:	7f 90       	pop	r7
 91a:	5f 90       	pop	r5
 91c:	4f 90       	pop	r4
 91e:	08 95       	ret

00000920 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
 920:	cf 92       	push	r12
 922:	df 92       	push	r13
 924:	ef 92       	push	r14
 926:	ff 92       	push	r15
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	ec 01       	movw	r28, r24
 932:	6a 01       	movw	r12, r20
 934:	7b 01       	movw	r14, r22
{
  if (base == 0) {
 936:	21 15       	cp	r18, r1
 938:	31 05       	cpc	r19, r1
 93a:	41 f4       	brne	.+16     	; 0x94c <_ZN5Print5printEli+0x2c>
    return write(n);
 93c:	e8 81       	ld	r30, Y
 93e:	f9 81       	ldd	r31, Y+1	; 0x01
 940:	01 90       	ld	r0, Z+
 942:	f0 81       	ld	r31, Z
 944:	e0 2d       	mov	r30, r0
 946:	64 2f       	mov	r22, r20
 948:	09 95       	icall
 94a:	1f c0       	rjmp	.+62     	; 0x98a <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
 94c:	2a 30       	cpi	r18, 0x0A	; 10
 94e:	31 05       	cpc	r19, r1
 950:	d1 f4       	brne	.+52     	; 0x986 <_ZN5Print5printEli+0x66>
    if (n < 0) {
 952:	77 ff       	sbrs	r23, 7
 954:	17 c0       	rjmp	.+46     	; 0x984 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 956:	e8 81       	ld	r30, Y
 958:	f9 81       	ldd	r31, Y+1	; 0x01
 95a:	01 90       	ld	r0, Z+
 95c:	f0 81       	ld	r31, Z
 95e:	e0 2d       	mov	r30, r0
 960:	6d e2       	ldi	r22, 0x2D	; 45
 962:	09 95       	icall
 964:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
 966:	44 27       	eor	r20, r20
 968:	55 27       	eor	r21, r21
 96a:	ba 01       	movw	r22, r20
 96c:	4c 19       	sub	r20, r12
 96e:	5d 09       	sbc	r21, r13
 970:	6e 09       	sbc	r22, r14
 972:	7f 09       	sbc	r23, r15
 974:	ce 01       	movw	r24, r28
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN5Print11printNumberEmh>
 97c:	98 01       	movw	r18, r16
 97e:	28 0f       	add	r18, r24
 980:	39 1f       	adc	r19, r25
 982:	04 c0       	rjmp	.+8      	; 0x98c <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
 984:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 986:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN5Print11printNumberEmh>
 98a:	9c 01       	movw	r18, r24
  }
}
 98c:	c9 01       	movw	r24, r18
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	ff 90       	pop	r15
 998:	ef 90       	pop	r14
 99a:	df 90       	pop	r13
 99c:	cf 90       	pop	r12
 99e:	08 95       	ret

000009a0 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
 9a0:	ef 92       	push	r14
 9a2:	ff 92       	push	r15
 9a4:	0f 93       	push	r16
 9a6:	1f 93       	push	r17
 9a8:	7b 01       	movw	r14, r22
 9aa:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
 9ac:	00 27       	eor	r16, r16
 9ae:	f7 fc       	sbrc	r15, 7
 9b0:	00 95       	com	r16
 9b2:	10 2f       	mov	r17, r16
 9b4:	b8 01       	movw	r22, r16
 9b6:	a7 01       	movw	r20, r14
 9b8:	0e 94 90 04 	call	0x920	; 0x920 <_ZN5Print5printEli>
}
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	ff 90       	pop	r15
 9c2:	ef 90       	pop	r14
 9c4:	08 95       	ret

000009c6 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
 9c6:	cf 92       	push	r12
 9c8:	df 92       	push	r13
 9ca:	ef 92       	push	r14
 9cc:	ff 92       	push	r15
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	6c 01       	movw	r12, r24
 9d4:	7b 01       	movw	r14, r22
 9d6:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 9d8:	00 27       	eor	r16, r16
 9da:	f7 fc       	sbrc	r15, 7
 9dc:	00 95       	com	r16
 9de:	10 2f       	mov	r17, r16
 9e0:	b8 01       	movw	r22, r16
 9e2:	a7 01       	movw	r20, r14
 9e4:	0e 94 90 04 	call	0x920	; 0x920 <_ZN5Print5printEli>
 9e8:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 9ea:	c6 01       	movw	r24, r12
 9ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print7printlnEv>
 9f0:	08 0f       	add	r16, r24
 9f2:	19 1f       	adc	r17, r25
  return n;
}
 9f4:	c8 01       	movw	r24, r16
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	ff 90       	pop	r15
 9fc:	ef 90       	pop	r14
 9fe:	df 90       	pop	r13
 a00:	cf 90       	pop	r12
 a02:	08 95       	ret

00000a04 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 a04:	0e 94 10 04 	call	0x820	; 0x820 <_ZN5Print5writeEPKc>
}
 a08:	08 95       	ret

00000a0a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 a0a:	ef 92       	push	r14
 a0c:	ff 92       	push	r15
 a0e:	0f 93       	push	r16
 a10:	1f 93       	push	r17
 a12:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 a14:	0e 94 10 04 	call	0x820	; 0x820 <_ZN5Print5writeEPKc>
 a18:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 a1a:	c7 01       	movw	r24, r14
 a1c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_ZN5Print7printlnEv>
 a20:	08 0f       	add	r16, r24
 a22:	19 1f       	adc	r17, r25
  return n;
}
 a24:	c8 01       	movw	r24, r16
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	ff 90       	pop	r15
 a2c:	ef 90       	pop	r14
 a2e:	08 95       	ret

00000a30 <main>:
#include <Arduino.h>

int main(void)
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
{
	init();
 a34:	0e 94 c8 05 	call	0xb90	; 0xb90 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a38:	0e 94 a4 01 	call	0x348	; 0x348 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a3c:	c9 ee       	ldi	r28, 0xE9	; 233
 a3e:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 a40:	0e 94 a1 01 	call	0x342	; 0x342 <loop>
		if (serialEventRun) serialEventRun();
 a44:	20 97       	sbiw	r28, 0x00	; 0
 a46:	e1 f3       	breq	.-8      	; 0xa40 <main+0x10>
 a48:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z14serialEventRunv>
 a4c:	f9 cf       	rjmp	.-14     	; 0xa40 <main+0x10>

00000a4e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 a4e:	1f 92       	push	r1
 a50:	0f 92       	push	r0
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	0f 92       	push	r0
 a56:	11 24       	eor	r1, r1
 a58:	2f 93       	push	r18
 a5a:	3f 93       	push	r19
 a5c:	8f 93       	push	r24
 a5e:	9f 93       	push	r25
 a60:	af 93       	push	r26
 a62:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 a64:	80 91 f4 01 	lds	r24, 0x01F4
 a68:	90 91 f5 01 	lds	r25, 0x01F5
 a6c:	a0 91 f6 01 	lds	r26, 0x01F6
 a70:	b0 91 f7 01 	lds	r27, 0x01F7
	unsigned char f = timer0_fract;
 a74:	30 91 f8 01 	lds	r19, 0x01F8

	m += MILLIS_INC;
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 a7e:	23 2f       	mov	r18, r19
 a80:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 a82:	2d 37       	cpi	r18, 0x7D	; 125
 a84:	20 f0       	brcs	.+8      	; 0xa8e <__vector_16+0x40>
		f -= FRACT_MAX;
 a86:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	a1 1d       	adc	r26, r1
 a8c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 a8e:	20 93 f8 01 	sts	0x01F8, r18
	timer0_millis = m;
 a92:	80 93 f4 01 	sts	0x01F4, r24
 a96:	90 93 f5 01 	sts	0x01F5, r25
 a9a:	a0 93 f6 01 	sts	0x01F6, r26
 a9e:	b0 93 f7 01 	sts	0x01F7, r27
	timer0_overflow_count++;
 aa2:	80 91 f0 01 	lds	r24, 0x01F0
 aa6:	90 91 f1 01 	lds	r25, 0x01F1
 aaa:	a0 91 f2 01 	lds	r26, 0x01F2
 aae:	b0 91 f3 01 	lds	r27, 0x01F3
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	a1 1d       	adc	r26, r1
 ab6:	b1 1d       	adc	r27, r1
 ab8:	80 93 f0 01 	sts	0x01F0, r24
 abc:	90 93 f1 01 	sts	0x01F1, r25
 ac0:	a0 93 f2 01 	sts	0x01F2, r26
 ac4:	b0 93 f3 01 	sts	0x01F3, r27
}
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	3f 91       	pop	r19
 ad2:	2f 91       	pop	r18
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 ade:	9b 01       	movw	r18, r22
 ae0:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 ae2:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 ae4:	f8 94       	cli
	m = timer0_overflow_count;
 ae6:	80 91 f0 01 	lds	r24, 0x01F0
 aea:	90 91 f1 01 	lds	r25, 0x01F1
 aee:	a0 91 f2 01 	lds	r26, 0x01F2
 af2:	b0 91 f3 01 	lds	r27, 0x01F3
#if defined(TCNT0)
	t = TCNT0;
 af6:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 af8:	a8 9b       	sbis	0x15, 0	; 21
 afa:	05 c0       	rjmp	.+10     	; 0xb06 <delay+0x28>
 afc:	6f 3f       	cpi	r22, 0xFF	; 255
 afe:	19 f0       	breq	.+6      	; 0xb06 <delay+0x28>
		m++;
 b00:	01 96       	adiw	r24, 0x01	; 1
 b02:	a1 1d       	adc	r26, r1
 b04:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 b06:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 b08:	ba 2f       	mov	r27, r26
 b0a:	a9 2f       	mov	r26, r25
 b0c:	98 2f       	mov	r25, r24
 b0e:	88 27       	eor	r24, r24
 b10:	86 0f       	add	r24, r22
 b12:	91 1d       	adc	r25, r1
 b14:	a1 1d       	adc	r26, r1
 b16:	b1 1d       	adc	r27, r1
 b18:	62 e0       	ldi	r22, 0x02	; 2
 b1a:	88 0f       	add	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	aa 1f       	adc	r26, r26
 b20:	bb 1f       	adc	r27, r27
 b22:	6a 95       	dec	r22
 b24:	d1 f7       	brne	.-12     	; 0xb1a <delay+0x3c>
 b26:	bc 01       	movw	r22, r24
 b28:	2d c0       	rjmp	.+90     	; 0xb84 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 b2a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 b2c:	f8 94       	cli
	m = timer0_overflow_count;
 b2e:	80 91 f0 01 	lds	r24, 0x01F0
 b32:	90 91 f1 01 	lds	r25, 0x01F1
 b36:	a0 91 f2 01 	lds	r26, 0x01F2
 b3a:	b0 91 f3 01 	lds	r27, 0x01F3
#if defined(TCNT0)
	t = TCNT0;
 b3e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 b40:	a8 9b       	sbis	0x15, 0	; 21
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <delay+0x70>
 b44:	ef 3f       	cpi	r30, 0xFF	; 255
 b46:	19 f0       	breq	.+6      	; 0xb4e <delay+0x70>
		m++;
 b48:	01 96       	adiw	r24, 0x01	; 1
 b4a:	a1 1d       	adc	r26, r1
 b4c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 b4e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 b50:	ba 2f       	mov	r27, r26
 b52:	a9 2f       	mov	r26, r25
 b54:	98 2f       	mov	r25, r24
 b56:	88 27       	eor	r24, r24
 b58:	8e 0f       	add	r24, r30
 b5a:	91 1d       	adc	r25, r1
 b5c:	a1 1d       	adc	r26, r1
 b5e:	b1 1d       	adc	r27, r1
 b60:	e2 e0       	ldi	r30, 0x02	; 2
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	ea 95       	dec	r30
 b6c:	d1 f7       	brne	.-12     	; 0xb62 <delay+0x84>
 b6e:	86 1b       	sub	r24, r22
 b70:	97 0b       	sbc	r25, r23
 b72:	88 5e       	subi	r24, 0xE8	; 232
 b74:	93 40       	sbci	r25, 0x03	; 3
 b76:	c8 f2       	brcs	.-78     	; 0xb2a <delay+0x4c>
			ms--;
 b78:	21 50       	subi	r18, 0x01	; 1
 b7a:	30 40       	sbci	r19, 0x00	; 0
 b7c:	40 40       	sbci	r20, 0x00	; 0
 b7e:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 b80:	68 51       	subi	r22, 0x18	; 24
 b82:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 b84:	21 15       	cp	r18, r1
 b86:	31 05       	cpc	r19, r1
 b88:	41 05       	cpc	r20, r1
 b8a:	51 05       	cpc	r21, r1
 b8c:	71 f6       	brne	.-100    	; 0xb2a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 b8e:	08 95       	ret

00000b90 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b90:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b92:	84 b5       	in	r24, 0x24	; 36
 b94:	82 60       	ori	r24, 0x02	; 2
 b96:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b98:	84 b5       	in	r24, 0x24	; 36
 b9a:	81 60       	ori	r24, 0x01	; 1
 b9c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b9e:	85 b5       	in	r24, 0x25	; 37
 ba0:	82 60       	ori	r24, 0x02	; 2
 ba2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 ba4:	85 b5       	in	r24, 0x25	; 37
 ba6:	81 60       	ori	r24, 0x01	; 1
 ba8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 baa:	ee e6       	ldi	r30, 0x6E	; 110
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	80 81       	ld	r24, Z
 bb0:	81 60       	ori	r24, 0x01	; 1
 bb2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 bb4:	e1 e8       	ldi	r30, 0x81	; 129
 bb6:	f0 e0       	ldi	r31, 0x00	; 0
 bb8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 bba:	80 81       	ld	r24, Z
 bbc:	82 60       	ori	r24, 0x02	; 2
 bbe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 bc0:	80 81       	ld	r24, Z
 bc2:	81 60       	ori	r24, 0x01	; 1
 bc4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 bc6:	e0 e8       	ldi	r30, 0x80	; 128
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	81 60       	ori	r24, 0x01	; 1
 bce:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bd0:	e1 eb       	ldi	r30, 0xB1	; 177
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	84 60       	ori	r24, 0x04	; 4
 bd8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 bda:	e0 eb       	ldi	r30, 0xB0	; 176
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	81 60       	ori	r24, 0x01	; 1
 be2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 be4:	ea e7       	ldi	r30, 0x7A	; 122
 be6:	f0 e0       	ldi	r31, 0x00	; 0
 be8:	80 81       	ld	r24, Z
 bea:	84 60       	ori	r24, 0x04	; 4
 bec:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 bee:	80 81       	ld	r24, Z
 bf0:	82 60       	ori	r24, 0x02	; 2
 bf2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 bf4:	80 81       	ld	r24, Z
 bf6:	81 60       	ori	r24, 0x01	; 1
 bf8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bfa:	80 81       	ld	r24, Z
 bfc:	80 68       	ori	r24, 0x80	; 128
 bfe:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 c00:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 c04:	08 95       	ret

00000c06 <__mulsi3>:
 c06:	62 9f       	mul	r22, r18
 c08:	d0 01       	movw	r26, r0
 c0a:	73 9f       	mul	r23, r19
 c0c:	f0 01       	movw	r30, r0
 c0e:	82 9f       	mul	r24, r18
 c10:	e0 0d       	add	r30, r0
 c12:	f1 1d       	adc	r31, r1
 c14:	64 9f       	mul	r22, r20
 c16:	e0 0d       	add	r30, r0
 c18:	f1 1d       	adc	r31, r1
 c1a:	92 9f       	mul	r25, r18
 c1c:	f0 0d       	add	r31, r0
 c1e:	83 9f       	mul	r24, r19
 c20:	f0 0d       	add	r31, r0
 c22:	74 9f       	mul	r23, r20
 c24:	f0 0d       	add	r31, r0
 c26:	65 9f       	mul	r22, r21
 c28:	f0 0d       	add	r31, r0
 c2a:	99 27       	eor	r25, r25
 c2c:	72 9f       	mul	r23, r18
 c2e:	b0 0d       	add	r27, r0
 c30:	e1 1d       	adc	r30, r1
 c32:	f9 1f       	adc	r31, r25
 c34:	63 9f       	mul	r22, r19
 c36:	b0 0d       	add	r27, r0
 c38:	e1 1d       	adc	r30, r1
 c3a:	f9 1f       	adc	r31, r25
 c3c:	bd 01       	movw	r22, r26
 c3e:	cf 01       	movw	r24, r30
 c40:	11 24       	eor	r1, r1
 c42:	08 95       	ret

00000c44 <__divmodhi4>:
 c44:	97 fb       	bst	r25, 7
 c46:	09 2e       	mov	r0, r25
 c48:	07 26       	eor	r0, r23
 c4a:	0a d0       	rcall	.+20     	; 0xc60 <__divmodhi4_neg1>
 c4c:	77 fd       	sbrc	r23, 7
 c4e:	04 d0       	rcall	.+8      	; 0xc58 <__divmodhi4_neg2>
 c50:	2e d0       	rcall	.+92     	; 0xcae <__udivmodhi4>
 c52:	06 d0       	rcall	.+12     	; 0xc60 <__divmodhi4_neg1>
 c54:	00 20       	and	r0, r0
 c56:	1a f4       	brpl	.+6      	; 0xc5e <__divmodhi4_exit>

00000c58 <__divmodhi4_neg2>:
 c58:	70 95       	com	r23
 c5a:	61 95       	neg	r22
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c5e <__divmodhi4_exit>:
 c5e:	08 95       	ret

00000c60 <__divmodhi4_neg1>:
 c60:	f6 f7       	brtc	.-4      	; 0xc5e <__divmodhi4_exit>
 c62:	90 95       	com	r25
 c64:	81 95       	neg	r24
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	08 95       	ret

00000c6a <__udivmodsi4>:
 c6a:	a1 e2       	ldi	r26, 0x21	; 33
 c6c:	1a 2e       	mov	r1, r26
 c6e:	aa 1b       	sub	r26, r26
 c70:	bb 1b       	sub	r27, r27
 c72:	fd 01       	movw	r30, r26
 c74:	0d c0       	rjmp	.+26     	; 0xc90 <__udivmodsi4_ep>

00000c76 <__udivmodsi4_loop>:
 c76:	aa 1f       	adc	r26, r26
 c78:	bb 1f       	adc	r27, r27
 c7a:	ee 1f       	adc	r30, r30
 c7c:	ff 1f       	adc	r31, r31
 c7e:	a2 17       	cp	r26, r18
 c80:	b3 07       	cpc	r27, r19
 c82:	e4 07       	cpc	r30, r20
 c84:	f5 07       	cpc	r31, r21
 c86:	20 f0       	brcs	.+8      	; 0xc90 <__udivmodsi4_ep>
 c88:	a2 1b       	sub	r26, r18
 c8a:	b3 0b       	sbc	r27, r19
 c8c:	e4 0b       	sbc	r30, r20
 c8e:	f5 0b       	sbc	r31, r21

00000c90 <__udivmodsi4_ep>:
 c90:	66 1f       	adc	r22, r22
 c92:	77 1f       	adc	r23, r23
 c94:	88 1f       	adc	r24, r24
 c96:	99 1f       	adc	r25, r25
 c98:	1a 94       	dec	r1
 c9a:	69 f7       	brne	.-38     	; 0xc76 <__udivmodsi4_loop>
 c9c:	60 95       	com	r22
 c9e:	70 95       	com	r23
 ca0:	80 95       	com	r24
 ca2:	90 95       	com	r25
 ca4:	9b 01       	movw	r18, r22
 ca6:	ac 01       	movw	r20, r24
 ca8:	bd 01       	movw	r22, r26
 caa:	cf 01       	movw	r24, r30
 cac:	08 95       	ret

00000cae <__udivmodhi4>:
 cae:	aa 1b       	sub	r26, r26
 cb0:	bb 1b       	sub	r27, r27
 cb2:	51 e1       	ldi	r21, 0x11	; 17
 cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <__udivmodhi4_ep>

00000cb6 <__udivmodhi4_loop>:
 cb6:	aa 1f       	adc	r26, r26
 cb8:	bb 1f       	adc	r27, r27
 cba:	a6 17       	cp	r26, r22
 cbc:	b7 07       	cpc	r27, r23
 cbe:	10 f0       	brcs	.+4      	; 0xcc4 <__udivmodhi4_ep>
 cc0:	a6 1b       	sub	r26, r22
 cc2:	b7 0b       	sbc	r27, r23

00000cc4 <__udivmodhi4_ep>:
 cc4:	88 1f       	adc	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	5a 95       	dec	r21
 cca:	a9 f7       	brne	.-22     	; 0xcb6 <__udivmodhi4_loop>
 ccc:	80 95       	com	r24
 cce:	90 95       	com	r25
 cd0:	bc 01       	movw	r22, r24
 cd2:	cd 01       	movw	r24, r26
 cd4:	08 95       	ret

00000cd6 <__tablejump2__>:
 cd6:	ee 0f       	add	r30, r30
 cd8:	ff 1f       	adc	r31, r31

00000cda <__tablejump__>:
 cda:	05 90       	lpm	r0, Z+
 cdc:	f4 91       	lpm	r31, Z+
 cde:	e0 2d       	mov	r30, r0
 ce0:	09 94       	ijmp

00000ce2 <_exit>:
 ce2:	f8 94       	cli

00000ce4 <__stop_program>:
 ce4:	ff cf       	rjmp	.-2      	; 0xce4 <__stop_program>

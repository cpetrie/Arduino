
DisplayDriverTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001394  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014d  00800164  00800164  0000148c  2**0
                  ALLOC
  3 .debug_aranges 000006e0  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000011be  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000884c  00000000  00000000  00002d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018eb  00000000  00000000  0000b576  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000038ce  00000000  00000000  0000ce61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c60  00000000  00000000  00010730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e47  00000000  00000000  00011390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004893  00000000  00000000  000131d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006b8  00000000  00000000  00017a6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	// Set data, if not over end of buffer
	if (i < getSize())
		retVal = _buff[i];

	return retVal;
}
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__dtors_end>
 */

#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
#ifdef _SF_PUNC4
prog_uint32_t PROGMEM_ _punc4[] = {
	0x024242 /*{*/, 0x066666 /*|*/, 0x042424 /*}*/, 0x000db0 /*~*/};
#endif

uint32_t resolve(uint32_t& data) { return pgm_read_dword(&data); }
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_16>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_18>
      4c:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__vector_19>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

00000068 <_punc2>:
      68:	66 60 06 00 24 60 06 00 63 6c 03 00 f0 f0 00 00     f`..$`..cl......
      78:	6c 63 0c 00 06 92 06 00 56 93 06 00                 lc......V...

00000084 <_punc3>:
      84:	46 44 06 00 21 46 08 00 26 22 06 00 00 90 06 00     FD..!F..&"......
      94:	0f 00 00 00 00 62 0c 00                             .....b..

0000009c <_punc4>:
      9c:	42 42 02 00 66 66 06 00 24 24 04 00 b0 0d 00 00     BB..ff..$$......

000000ac <_ZL6_digit>:
      ac:	d6 b9 06 00 27 62 02 00 8f 17 0e 00 1f 17 0f 00     ....'b..........
      bc:	11 9f 09 00 1f 8e 0f 00 9f 8f 07 00 24 12 0f 00     ............$...
      cc:	9f 96 0f 00 11 9f 0f 00                             ........

000000d4 <_ZL10_alphaBold>:
      d4:	dd df 06 00 de df 0e 00 d6 dc 06 00 de dd 0e 00     ................
      e4:	cf ce 0f 00 cc ce 0f 00 d7 cf 07 00 dd df 0d 00     ................
      f4:	6f 66 0f 00 bf 33 0f 00 dd de 0d 00 cf cc 0c 00     of...3..........
     104:	99 ff 09 00 b9 df 09 00 d6 dd 06 00 cc df 0e 00     ................
     114:	a7 99 06 00 ed dd 0e 00 1e cf 07 00 66 66 0f 00     ............ff..
     124:	d6 dd 0d 00 52 dd 0d 00 f6 99 09 00 69 96 09 00     ....R.......i...
     134:	2c 97 09 00 cf 36 0f 00                             ,....6..

0000013c <_ZL6_alpha>:
     13c:	99 9f 06 00 9e 9f 0e 00 96 98 06 00 9e 99 0e 00     ................
     14c:	8f 8e 0f 00 88 8e 0f 00 97 8b 07 00 99 9f 09 00     ................
     15c:	4f 44 0f 00 ae 22 0f 00 a9 ac 09 00 8f 88 08 00     OD..."..........
     16c:	99 ff 09 00 b9 df 09 00 96 99 06 00 88 9f 0e 00     ................
     17c:	a7 99 06 00 e9 99 0e 00 1e 8f 07 00 44 44 0f 00     ............DD..
     18c:	96 99 09 00 52 99 09 00 f6 99 09 00 69 96 09 00     ....R.......i...
     19c:	2c 97 09 00 4f 12 0f 00                             ,...O...

000001a4 <_ZL6_punc1>:
     1a4:	00 00 00 00 02 66 06 00 00 55 05 00 f5 f5 05 00     .....f...U......
     1b4:	5e af 07 00 4d 26 0b 00 bd 5e 07 00 00 24 06 00     ^...M&...^...$..
     1c4:	42 44 02 00 24 22 04 00 a0 a4 00 00 40 4e 00 00     BD..$"......@N..
     1d4:	24 06 00 00 00 0f 00 00 66 00 00 00 48 26 01 00     $.......f...H&..

000001e4 <_ZL10_errBitmap>:
     1e4:	5a 5a 0a 00                                         ZZ..

000001e8 <__ctors_start>:
     1e8:	3f 04       	cpc	r3, r15
     1ea:	a0 07       	cpc	r26, r16

000001ec <__ctors_end>:
     1ec:	38 04       	cpc	r3, r8

000001ee <__dtors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	d4 e0       	ldi	r29, 0x04	; 4
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	cd bf       	out	0x3d, r28	; 61

000001fa <__do_copy_data>:
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	e4 e9       	ldi	r30, 0x94	; 148
     202:	f3 e1       	ldi	r31, 0x13	; 19
     204:	02 c0       	rjmp	.+4      	; 0x20a <.do_copy_data_start>

00000206 <.do_copy_data_loop>:
     206:	05 90       	lpm	r0, Z+
     208:	0d 92       	st	X+, r0

0000020a <.do_copy_data_start>:
     20a:	a4 36       	cpi	r26, 0x64	; 100
     20c:	b1 07       	cpc	r27, r17
     20e:	d9 f7       	brne	.-10     	; 0x206 <.do_copy_data_loop>

00000210 <__do_clear_bss>:
     210:	12 e0       	ldi	r17, 0x02	; 2
     212:	a4 e6       	ldi	r26, 0x64	; 100
     214:	b1 e0       	ldi	r27, 0x01	; 1
     216:	01 c0       	rjmp	.+2      	; 0x21a <.do_clear_bss_start>

00000218 <.do_clear_bss_loop>:
     218:	1d 92       	st	X+, r1

0000021a <.do_clear_bss_start>:
     21a:	a1 3b       	cpi	r26, 0xB1	; 177
     21c:	b1 07       	cpc	r27, r17
     21e:	e1 f7       	brne	.-8      	; 0x218 <.do_clear_bss_loop>

00000220 <__do_global_ctors>:
     220:	11 e0       	ldi	r17, 0x01	; 1
     222:	cc ee       	ldi	r28, 0xEC	; 236
     224:	d1 e0       	ldi	r29, 0x01	; 1
     226:	04 c0       	rjmp	.+8      	; 0x230 <.do_global_ctors_start>

00000228 <.do_global_ctors_loop>:
     228:	22 97       	sbiw	r28, 0x02	; 2
     22a:	fe 01       	movw	r30, r28
     22c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__tablejump__>

00000230 <.do_global_ctors_start>:
     230:	c8 3e       	cpi	r28, 0xE8	; 232
     232:	d1 07       	cpc	r29, r17
     234:	c9 f7       	brne	.-14     	; 0x228 <.do_global_ctors_loop>
     236:	0e 94 77 08 	call	0x10ee	; 0x10ee <main>
     23a:	0c 94 bd 09 	jmp	0x137a	; 0x137a <__do_global_dtors>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <malloc>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	bc 01       	movw	r22, r24
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	91 05       	cpc	r25, r1
     24c:	10 f4       	brcc	.+4      	; 0x252 <malloc+0x10>
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	a0 91 af 02 	lds	r26, 0x02AF
     256:	b0 91 b0 02 	lds	r27, 0x02B0
     25a:	ed 01       	movw	r28, r26
     25c:	e0 e0       	ldi	r30, 0x00	; 0
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	21 c0       	rjmp	.+66     	; 0x2a8 <malloc+0x66>
     266:	88 81       	ld	r24, Y
     268:	99 81       	ldd	r25, Y+1	; 0x01
     26a:	86 17       	cp	r24, r22
     26c:	97 07       	cpc	r25, r23
     26e:	69 f4       	brne	.+26     	; 0x28a <malloc+0x48>
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	9b 81       	ldd	r25, Y+3	; 0x03
     274:	30 97       	sbiw	r30, 0x00	; 0
     276:	19 f0       	breq	.+6      	; 0x27e <malloc+0x3c>
     278:	93 83       	std	Z+3, r25	; 0x03
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	04 c0       	rjmp	.+8      	; 0x286 <malloc+0x44>
     27e:	90 93 b0 02 	sts	0x02B0, r25
     282:	80 93 af 02 	sts	0x02AF, r24
     286:	fe 01       	movw	r30, r28
     288:	34 c0       	rjmp	.+104    	; 0x2f2 <malloc+0xb0>
     28a:	68 17       	cp	r22, r24
     28c:	79 07       	cpc	r23, r25
     28e:	38 f4       	brcc	.+14     	; 0x29e <malloc+0x5c>
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	19 f0       	breq	.+6      	; 0x29c <malloc+0x5a>
     296:	84 17       	cp	r24, r20
     298:	95 07       	cpc	r25, r21
     29a:	08 f4       	brcc	.+2      	; 0x29e <malloc+0x5c>
     29c:	ac 01       	movw	r20, r24
     29e:	fe 01       	movw	r30, r28
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	9b 81       	ldd	r25, Y+3	; 0x03
     2a4:	9c 01       	movw	r18, r24
     2a6:	e9 01       	movw	r28, r18
     2a8:	20 97       	sbiw	r28, 0x00	; 0
     2aa:	e9 f6       	brne	.-70     	; 0x266 <malloc+0x24>
     2ac:	41 15       	cp	r20, r1
     2ae:	51 05       	cpc	r21, r1
     2b0:	a9 f1       	breq	.+106    	; 0x31c <malloc+0xda>
     2b2:	ca 01       	movw	r24, r20
     2b4:	86 1b       	sub	r24, r22
     2b6:	97 0b       	sbc	r25, r23
     2b8:	04 97       	sbiw	r24, 0x04	; 4
     2ba:	08 f4       	brcc	.+2      	; 0x2be <malloc+0x7c>
     2bc:	ba 01       	movw	r22, r20
     2be:	e0 e0       	ldi	r30, 0x00	; 0
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	2a c0       	rjmp	.+84     	; 0x318 <malloc+0xd6>
     2c4:	8d 91       	ld	r24, X+
     2c6:	9c 91       	ld	r25, X
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	84 17       	cp	r24, r20
     2cc:	95 07       	cpc	r25, r21
     2ce:	f9 f4       	brne	.+62     	; 0x30e <malloc+0xcc>
     2d0:	64 17       	cp	r22, r20
     2d2:	75 07       	cpc	r23, r21
     2d4:	81 f4       	brne	.+32     	; 0x2f6 <malloc+0xb4>
     2d6:	12 96       	adiw	r26, 0x02	; 2
     2d8:	8d 91       	ld	r24, X+
     2da:	9c 91       	ld	r25, X
     2dc:	13 97       	sbiw	r26, 0x03	; 3
     2de:	30 97       	sbiw	r30, 0x00	; 0
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <malloc+0xa6>
     2e2:	93 83       	std	Z+3, r25	; 0x03
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <malloc+0xae>
     2e8:	90 93 b0 02 	sts	0x02B0, r25
     2ec:	80 93 af 02 	sts	0x02AF, r24
     2f0:	fd 01       	movw	r30, r26
     2f2:	32 96       	adiw	r30, 0x02	; 2
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <malloc+0x14c>
     2f6:	ca 01       	movw	r24, r20
     2f8:	86 1b       	sub	r24, r22
     2fa:	97 0b       	sbc	r25, r23
     2fc:	fd 01       	movw	r30, r26
     2fe:	e8 0f       	add	r30, r24
     300:	f9 1f       	adc	r31, r25
     302:	61 93       	st	Z+, r22
     304:	71 93       	st	Z+, r23
     306:	02 97       	sbiw	r24, 0x02	; 2
     308:	8d 93       	st	X+, r24
     30a:	9c 93       	st	X, r25
     30c:	40 c0       	rjmp	.+128    	; 0x38e <malloc+0x14c>
     30e:	fd 01       	movw	r30, r26
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	9c 01       	movw	r18, r24
     316:	d9 01       	movw	r26, r18
     318:	10 97       	sbiw	r26, 0x00	; 0
     31a:	a1 f6       	brne	.-88     	; 0x2c4 <malloc+0x82>
     31c:	80 91 ad 02 	lds	r24, 0x02AD
     320:	90 91 ae 02 	lds	r25, 0x02AE
     324:	89 2b       	or	r24, r25
     326:	41 f4       	brne	.+16     	; 0x338 <malloc+0xf6>
     328:	80 91 10 01 	lds	r24, 0x0110
     32c:	90 91 11 01 	lds	r25, 0x0111
     330:	90 93 ae 02 	sts	0x02AE, r25
     334:	80 93 ad 02 	sts	0x02AD, r24
     338:	40 91 12 01 	lds	r20, 0x0112
     33c:	50 91 13 01 	lds	r21, 0x0113
     340:	41 15       	cp	r20, r1
     342:	51 05       	cpc	r21, r1
     344:	41 f4       	brne	.+16     	; 0x356 <malloc+0x114>
     346:	4d b7       	in	r20, 0x3d	; 61
     348:	5e b7       	in	r21, 0x3e	; 62
     34a:	80 91 0e 01 	lds	r24, 0x010E
     34e:	90 91 0f 01 	lds	r25, 0x010F
     352:	48 1b       	sub	r20, r24
     354:	59 0b       	sbc	r21, r25
     356:	20 91 ad 02 	lds	r18, 0x02AD
     35a:	30 91 ae 02 	lds	r19, 0x02AE
     35e:	ca 01       	movw	r24, r20
     360:	82 1b       	sub	r24, r18
     362:	93 0b       	sbc	r25, r19
     364:	86 17       	cp	r24, r22
     366:	97 07       	cpc	r25, r23
     368:	80 f0       	brcs	.+32     	; 0x38a <malloc+0x148>
     36a:	ab 01       	movw	r20, r22
     36c:	4e 5f       	subi	r20, 0xFE	; 254
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	84 17       	cp	r24, r20
     372:	95 07       	cpc	r25, r21
     374:	50 f0       	brcs	.+20     	; 0x38a <malloc+0x148>
     376:	42 0f       	add	r20, r18
     378:	53 1f       	adc	r21, r19
     37a:	50 93 ae 02 	sts	0x02AE, r21
     37e:	40 93 ad 02 	sts	0x02AD, r20
     382:	f9 01       	movw	r30, r18
     384:	61 93       	st	Z+, r22
     386:	71 93       	st	Z+, r23
     388:	02 c0       	rjmp	.+4      	; 0x38e <malloc+0x14c>
     38a:	e0 e0       	ldi	r30, 0x00	; 0
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	cf 01       	movw	r24, r30
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <free>:
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	09 f4       	brne	.+2      	; 0x3a0 <free+0xa>
     39e:	50 c0       	rjmp	.+160    	; 0x440 <free+0xaa>
     3a0:	ec 01       	movw	r28, r24
     3a2:	22 97       	sbiw	r28, 0x02	; 2
     3a4:	1b 82       	std	Y+3, r1	; 0x03
     3a6:	1a 82       	std	Y+2, r1	; 0x02
     3a8:	a0 91 af 02 	lds	r26, 0x02AF
     3ac:	b0 91 b0 02 	lds	r27, 0x02B0
     3b0:	10 97       	sbiw	r26, 0x00	; 0
     3b2:	09 f1       	breq	.+66     	; 0x3f6 <free+0x60>
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	ac 17       	cp	r26, r28
     3ba:	bd 07       	cpc	r27, r29
     3bc:	08 f1       	brcs	.+66     	; 0x400 <free+0x6a>
     3be:	bb 83       	std	Y+3, r27	; 0x03
     3c0:	aa 83       	std	Y+2, r26	; 0x02
     3c2:	fe 01       	movw	r30, r28
     3c4:	21 91       	ld	r18, Z+
     3c6:	31 91       	ld	r19, Z+
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	ae 17       	cp	r26, r30
     3ce:	bf 07       	cpc	r27, r31
     3d0:	79 f4       	brne	.+30     	; 0x3f0 <free+0x5a>
     3d2:	8d 91       	ld	r24, X+
     3d4:	9c 91       	ld	r25, X
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	28 0f       	add	r18, r24
     3da:	39 1f       	adc	r19, r25
     3dc:	2e 5f       	subi	r18, 0xFE	; 254
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
     3e0:	39 83       	std	Y+1, r19	; 0x01
     3e2:	28 83       	st	Y, r18
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	8d 91       	ld	r24, X+
     3e8:	9c 91       	ld	r25, X
     3ea:	13 97       	sbiw	r26, 0x03	; 3
     3ec:	9b 83       	std	Y+3, r25	; 0x03
     3ee:	8a 83       	std	Y+2, r24	; 0x02
     3f0:	41 15       	cp	r20, r1
     3f2:	51 05       	cpc	r21, r1
     3f4:	71 f4       	brne	.+28     	; 0x412 <free+0x7c>
     3f6:	d0 93 b0 02 	sts	0x02B0, r29
     3fa:	c0 93 af 02 	sts	0x02AF, r28
     3fe:	20 c0       	rjmp	.+64     	; 0x440 <free+0xaa>
     400:	12 96       	adiw	r26, 0x02	; 2
     402:	8d 91       	ld	r24, X+
     404:	9c 91       	ld	r25, X
     406:	13 97       	sbiw	r26, 0x03	; 3
     408:	ad 01       	movw	r20, r26
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	11 f0       	breq	.+4      	; 0x412 <free+0x7c>
     40e:	dc 01       	movw	r26, r24
     410:	d3 cf       	rjmp	.-90     	; 0x3b8 <free+0x22>
     412:	fa 01       	movw	r30, r20
     414:	d3 83       	std	Z+3, r29	; 0x03
     416:	c2 83       	std	Z+2, r28	; 0x02
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	e2 0f       	add	r30, r18
     41e:	f3 1f       	adc	r31, r19
     420:	ce 17       	cp	r28, r30
     422:	df 07       	cpc	r29, r31
     424:	69 f4       	brne	.+26     	; 0x440 <free+0xaa>
     426:	88 81       	ld	r24, Y
     428:	99 81       	ldd	r25, Y+1	; 0x01
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
     42e:	2e 5f       	subi	r18, 0xFE	; 254
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	fa 01       	movw	r30, r20
     434:	31 83       	std	Z+1, r19	; 0x01
     436:	20 83       	st	Z, r18
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	93 83       	std	Z+3, r25	; 0x03
     43e:	82 83       	std	Z+2, r24	; 0x02
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <memset>:
     446:	dc 01       	movw	r26, r24
     448:	01 c0       	rjmp	.+2      	; 0x44c <memset+0x6>
     44a:	6d 93       	st	X+, r22
     44c:	41 50       	subi	r20, 0x01	; 1
     44e:	50 40       	sbci	r21, 0x00	; 0
     450:	e0 f7       	brcc	.-8      	; 0x44a <memset+0x4>
     452:	08 95       	ret

00000454 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>:
		// Print an end-line for each row
		Serial.println("");
	}
}

void Buffer::setBit(int x, int y, Color color) {
     454:	fc 01       	movw	r30, r24
     456:	d9 01       	movw	r26, r18

	// Check input variables
	if (x >= _width || x < 0 || y >= _height || y < 0)
     458:	80 81       	ld	r24, Z
     45a:	91 81       	ldd	r25, Z+1	; 0x01
     45c:	68 17       	cp	r22, r24
     45e:	79 07       	cpc	r23, r25
     460:	a4 f5       	brge	.+104    	; 0x4ca <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     462:	77 fd       	sbrc	r23, 7
     464:	32 c0       	rjmp	.+100    	; 0x4ca <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     466:	82 81       	ldd	r24, Z+2	; 0x02
     468:	93 81       	ldd	r25, Z+3	; 0x03
     46a:	48 17       	cp	r20, r24
     46c:	59 07       	cpc	r21, r25
     46e:	6c f5       	brge	.+90     	; 0x4ca <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     470:	57 fd       	sbrc	r21, 7
     472:	2b c0       	rjmp	.+86     	; 0x4ca <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
		return;

	// Get byte pointer that contains the bit
	uint8_t* bitBytePtr = _buff + (_pitchBytes * y) + (x / 8);
     474:	84 81       	ldd	r24, Z+4	; 0x04
     476:	95 81       	ldd	r25, Z+5	; 0x05
     478:	9c 01       	movw	r18, r24
     47a:	42 9f       	mul	r20, r18
     47c:	c0 01       	movw	r24, r0
     47e:	43 9f       	mul	r20, r19
     480:	90 0d       	add	r25, r0
     482:	52 9f       	mul	r21, r18
     484:	90 0d       	add	r25, r0
     486:	11 24       	eor	r1, r1
     488:	9b 01       	movw	r18, r22
     48a:	43 e0       	ldi	r20, 0x03	; 3
     48c:	35 95       	asr	r19
     48e:	27 95       	ror	r18
     490:	4a 95       	dec	r20
     492:	e1 f7       	brne	.-8      	; 0x48c <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x38>
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	06 80       	ldd	r0, Z+6	; 0x06
     49a:	f7 81       	ldd	r31, Z+7	; 0x07
     49c:	e0 2d       	mov	r30, r0
     49e:	e8 0f       	add	r30, r24
     4a0:	f9 1f       	adc	r31, r25

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));
     4a2:	60 95       	com	r22
     4a4:	70 95       	com	r23
     4a6:	67 70       	andi	r22, 0x07	; 7
     4a8:	70 70       	andi	r23, 0x00	; 0
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x60>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x5c>
     4b8:	20 81       	ld	r18, Z

	if (color == WHITE) {
     4ba:	11 97       	sbiw	r26, 0x01	; 1
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x70>
		*bitBytePtr |= bit;  // set the bit
     4be:	28 2b       	or	r18, r24
     4c0:	20 83       	st	Z, r18
     4c2:	08 95       	ret
	} else {
		*bitBytePtr &= ~bit; // clear the bit
     4c4:	80 95       	com	r24
     4c6:	28 23       	and	r18, r24
     4c8:	20 83       	st	Z, r18
     4ca:	08 95       	ret

000004cc <_ZN7Display6Buffer6getBitEii>:
	}
}

Color Buffer::getBit(int x, int y) {
     4cc:	fc 01       	movw	r30, r24

	// Check input variables
	if (x >= _width || x < 0 || y >= _height || y < 0)
     4ce:	80 81       	ld	r24, Z
     4d0:	91 81       	ldd	r25, Z+1	; 0x01
     4d2:	68 17       	cp	r22, r24
     4d4:	79 07       	cpc	r23, r25
     4d6:	4c f4       	brge	.+18     	; 0x4ea <_ZN7Display6Buffer6getBitEii+0x1e>
     4d8:	77 fd       	sbrc	r23, 7
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <_ZN7Display6Buffer6getBitEii+0x1e>
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	48 17       	cp	r20, r24
     4e2:	59 07       	cpc	r21, r25
     4e4:	14 f4       	brge	.+4      	; 0x4ea <_ZN7Display6Buffer6getBitEii+0x1e>
     4e6:	57 ff       	sbrs	r21, 7
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <_ZN7Display6Buffer6getBitEii+0x24>
		return _color;
     4ea:	80 85       	ldd	r24, Z+8	; 0x08
     4ec:	91 85       	ldd	r25, Z+9	; 0x09
     4ee:	08 95       	ret
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	95 81       	ldd	r25, Z+5	; 0x05
     4f4:	9c 01       	movw	r18, r24
     4f6:	42 9f       	mul	r20, r18
     4f8:	c0 01       	movw	r24, r0
     4fa:	43 9f       	mul	r20, r19
     4fc:	90 0d       	add	r25, r0
     4fe:	52 9f       	mul	r21, r18
     500:	90 0d       	add	r25, r0
     502:	11 24       	eor	r1, r1
     504:	9b 01       	movw	r18, r22
     506:	53 e0       	ldi	r21, 0x03	; 3
     508:	35 95       	asr	r19
     50a:	27 95       	ror	r18
     50c:	5a 95       	dec	r21
     50e:	e1 f7       	brne	.-8      	; 0x508 <__stack+0x9>
     510:	06 80       	ldd	r0, Z+6	; 0x06
     512:	f7 81       	ldd	r31, Z+7	; 0x07
     514:	e0 2d       	mov	r30, r0
     516:	e8 0f       	add	r30, r24
     518:	f9 1f       	adc	r31, r25
     51a:	e2 0f       	add	r30, r18
     51c:	f3 1f       	adc	r31, r19
     51e:	80 81       	ld	r24, Z
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	67 70       	andi	r22, 0x07	; 7
     524:	70 70       	andi	r23, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <__stack+0x2d>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	6a 95       	dec	r22
     52e:	e2 f7       	brpl	.-8      	; 0x528 <__stack+0x29>
     530:	88 1f       	adc	r24, r24
     532:	88 27       	eor	r24, r24
     534:	88 1f       	adc	r24, r24
     536:	90 e0       	ldi	r25, 0x00	; 0

	// Shift the byte to extract the desired bit
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}
     538:	08 95       	ret

0000053a <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj>:
			setBit(lastBitsX + i, y, color);
	}
}

void Buffer::memsetColor(uint8_t* buff, Color color, size_t bytes) {
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
     53a:	41 30       	cpi	r20, 0x01	; 1
     53c:	51 05       	cpc	r21, r1
     53e:	11 f0       	breq	.+4      	; 0x544 <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj+0xa>
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	01 c0       	rjmp	.+2      	; 0x546 <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj+0xc>
     544:	4f ef       	ldi	r20, 0xFF	; 255
	memset(buff, writeVal, bytes);
     546:	cb 01       	movw	r24, r22
     548:	64 2f       	mov	r22, r20
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	a9 01       	movw	r20, r18
     54e:	0e 94 23 02 	call	0x446	; 0x446 <memset>
}
     552:	08 95       	ret

00000554 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE>:
	}

	return bits1 | bits2;
}

void Buffer::fastHLine(int x, int y, int width, Color color) {
     554:	2f 92       	push	r2
     556:	3f 92       	push	r3
     558:	4f 92       	push	r4
     55a:	5f 92       	push	r5
     55c:	6f 92       	push	r6
     55e:	7f 92       	push	r7
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	00 d0       	rcall	.+0      	; 0x57a <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x26>
     57a:	0f 92       	push	r0
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	5c 01       	movw	r10, r24
     582:	7b 83       	std	Y+3, r23	; 0x03
     584:	6a 83       	std	Y+2, r22	; 0x02
     586:	2a 01       	movw	r4, r20
     588:	79 01       	movw	r14, r18
     58a:	18 01       	movw	r2, r16

	// Handle out-of-bounds X
	if (x > _width)
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	e6 17       	cp	r30, r22
     596:	f7 07       	cpc	r31, r23
     598:	0c f4       	brge	.+2      	; 0x59c <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x48>
     59a:	b5 c0       	rjmp	.+362    	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
		return;

	// Handle out-of-bounds Y
	if (y < 0 || y >= _height)
     59c:	57 fd       	sbrc	r21, 7
     59e:	b3 c0       	rjmp	.+358    	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
     5a0:	12 96       	adiw	r26, 0x02	; 2
     5a2:	8d 91       	ld	r24, X+
     5a4:	9c 91       	ld	r25, X
     5a6:	13 97       	sbiw	r26, 0x03	; 3
     5a8:	48 17       	cp	r20, r24
     5aa:	59 07       	cpc	r21, r25
     5ac:	0c f0       	brlt	.+2      	; 0x5b0 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x5c>
     5ae:	ab c0       	rjmp	.+342    	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
		return;

	// Handle 0-width
	if (width == 0)
     5b0:	21 15       	cp	r18, r1
     5b2:	31 05       	cpc	r19, r1
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x64>
     5b6:	a7 c0       	rjmp	.+334    	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
		return;

	// Handle negative width
	if (width < 0) {
     5b8:	37 ff       	sbrs	r19, 7
     5ba:	09 c0       	rjmp	.+18     	; 0x5ce <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x7a>
		width = abs(width);
     5bc:	f0 94       	com	r15
     5be:	e1 94       	neg	r14
     5c0:	f1 08       	sbc	r15, r1
     5c2:	f3 94       	inc	r15
		x -= width;
     5c4:	ab 01       	movw	r20, r22
     5c6:	4e 19       	sub	r20, r14
     5c8:	5f 09       	sbc	r21, r15
     5ca:	5b 83       	std	Y+3, r21	; 0x03
     5cc:	4a 83       	std	Y+2, r20	; 0x02
	}

	// Handle negative X
	if (x < 0) {
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	97 ff       	sbrs	r25, 7
     5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x8e>
		if (x + width < 0)
     5d6:	e8 0e       	add	r14, r24
     5d8:	f9 1e       	adc	r15, r25
     5da:	f7 fc       	sbrc	r15, 7
     5dc:	94 c0       	rjmp	.+296    	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
			return;
     5de:	1b 82       	std	Y+3, r1	; 0x03
     5e0:	1a 82       	std	Y+2, r1	; 0x02
		width = x + width;
		x = 0;
	}

	// Handle out-of-bounds width
	if (x + width > _width)
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	9b 81       	ldd	r25, Y+3	; 0x03
     5e6:	8e 0d       	add	r24, r14
     5e8:	9f 1d       	adc	r25, r15
     5ea:	e8 17       	cp	r30, r24
     5ec:	f9 07       	cpc	r31, r25
     5ee:	2c f4       	brge	.+10     	; 0x5fa <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xa6>
		width = _width - x;
     5f0:	7f 01       	movw	r14, r30
     5f2:	aa 81       	ldd	r26, Y+2	; 0x02
     5f4:	bb 81       	ldd	r27, Y+3	; 0x03
     5f6:	ea 1a       	sub	r14, r26
     5f8:	fb 0a       	sbc	r15, r27

	// Calculate indexes
	uint8_t startRem = x % 8;
     5fa:	2a 81       	ldd	r18, Y+2	; 0x02
     5fc:	3b 81       	ldd	r19, Y+3	; 0x03
     5fe:	27 70       	andi	r18, 0x07	; 7
     600:	30 70       	andi	r19, 0x00	; 0
     602:	62 2e       	mov	r6, r18
	uint8_t endRem = (x + width) % 8;
     604:	8a 80       	ldd	r8, Y+2	; 0x02
     606:	9b 80       	ldd	r9, Y+3	; 0x03
     608:	8e 0c       	add	r8, r14
     60a:	9f 1c       	adc	r9, r15
     60c:	c4 01       	movw	r24, r8
     60e:	68 e0       	ldi	r22, 0x08	; 8
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	0e 94 66 09 	call	0x12cc	; 0x12cc <__divmodhi4>
     616:	89 83       	std	Y+1, r24	; 0x01

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
     618:	22 23       	and	r18, r18
     61a:	59 f4       	brne	.+22     	; 0x632 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xde>
     61c:	b8 e0       	ldi	r27, 0x08	; 8
     61e:	eb 16       	cp	r14, r27
     620:	f1 04       	cpc	r15, r1
     622:	3c f0       	brlt	.+14     	; 0x632 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xde>
     624:	77 24       	eor	r7, r7
     626:	e8 15       	cp	r30, r8
     628:	f9 05       	cpc	r31, r9
     62a:	24 f0       	brlt	.+8      	; 0x634 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xe0>
     62c:	77 24       	eor	r7, r7
     62e:	73 94       	inc	r7
     630:	1a c0       	rjmp	.+52     	; 0x666 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x112>
     632:	77 24       	eor	r7, r7
	if (!fullByte1) {
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     638:	b8 e0       	ldi	r27, 0x08	; 8
     63a:	cb 2e       	mov	r12, r27
     63c:	d1 2c       	mov	r13, r1
     63e:	c6 18       	sub	r12, r6
     640:	d1 08       	sbc	r13, r1
     642:	0b c0       	rjmp	.+22     	; 0x65a <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x106>
			setBit(x + i, y, color);
     644:	6a 81       	ldd	r22, Y+2	; 0x02
     646:	7b 81       	ldd	r23, Y+3	; 0x03
     648:	60 0f       	add	r22, r16
     64a:	71 1f       	adc	r23, r17
     64c:	c5 01       	movw	r24, r10
     64e:	a2 01       	movw	r20, r4
     650:	91 01       	movw	r18, r2
     652:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>
	uint8_t endRem = (x + width) % 8;

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
	if (!fullByte1) {
		for (int i = 0; (i < width) && (i < 8 - startRem); i++)
     656:	0f 5f       	subi	r16, 0xFF	; 255
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	0e 15       	cp	r16, r14
     65c:	1f 05       	cpc	r17, r15
     65e:	1c f4       	brge	.+6      	; 0x666 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x112>
     660:	0c 15       	cp	r16, r12
     662:	1d 05       	cpc	r17, r13
     664:	7c f3       	brlt	.-34     	; 0x644 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xf0>
			setBit(x + i, y, color);
	}

	// Write the middle byte-aligned 8-bit blocks (fast)
	uint8_t nMiddleBytes = (width - (8 - startRem) - endRem) / 8 + fullByte1;
     666:	06 2d       	mov	r16, r6
     668:	10 e0       	ldi	r17, 0x00	; 0
     66a:	e9 81       	ldd	r30, Y+1	; 0x01
     66c:	ce 2e       	mov	r12, r30
     66e:	dd 24       	eor	r13, r13
     670:	c8 01       	movw	r24, r16
     672:	08 97       	sbiw	r24, 0x08	; 8
     674:	8e 0d       	add	r24, r14
     676:	9f 1d       	adc	r25, r15
     678:	8c 19       	sub	r24, r12
     67a:	9d 09       	sbc	r25, r13
     67c:	68 e0       	ldi	r22, 0x08	; 8
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	0e 94 66 09 	call	0x12cc	; 0x12cc <__divmodhi4>
     684:	26 2f       	mov	r18, r22
     686:	27 0d       	add	r18, r7
	if (nMiddleBytes > 0) {
     688:	19 f1       	breq	.+70     	; 0x6d0 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x17c>
		uint8_t* middleByte = _buff + (y * _pitchBytes) + ((x + 7) / 8);
		memsetColor(middleByte, color, nMiddleBytes);
     68a:	4a 81       	ldd	r20, Y+2	; 0x02
     68c:	5b 81       	ldd	r21, Y+3	; 0x03
     68e:	49 5f       	subi	r20, 0xF9	; 249
     690:	5f 4f       	sbci	r21, 0xFF	; 255
     692:	a3 e0       	ldi	r26, 0x03	; 3
     694:	55 95       	asr	r21
     696:	47 95       	ror	r20
     698:	aa 95       	dec	r26
     69a:	e1 f7       	brne	.-8      	; 0x694 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x140>
     69c:	d5 01       	movw	r26, r10
     69e:	14 96       	adiw	r26, 0x04	; 4
     6a0:	8d 91       	ld	r24, X+
     6a2:	9c 91       	ld	r25, X
     6a4:	15 97       	sbiw	r26, 0x05	; 5
     6a6:	fc 01       	movw	r30, r24
     6a8:	4e 9e       	mul	r4, r30
     6aa:	c0 01       	movw	r24, r0
     6ac:	4f 9e       	mul	r4, r31
     6ae:	90 0d       	add	r25, r0
     6b0:	5e 9e       	mul	r5, r30
     6b2:	90 0d       	add	r25, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	84 0f       	add	r24, r20
     6b8:	95 1f       	adc	r25, r21
     6ba:	16 96       	adiw	r26, 0x06	; 6
     6bc:	6d 91       	ld	r22, X+
     6be:	7c 91       	ld	r23, X
     6c0:	17 97       	sbiw	r26, 0x07	; 7
     6c2:	68 0f       	add	r22, r24
     6c4:	79 1f       	adc	r23, r25
     6c6:	c5 01       	movw	r24, r10
     6c8:	a1 01       	movw	r20, r2
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
     6d0:	f9 81       	ldd	r31, Y+1	; 0x01
     6d2:	ff 23       	and	r31, r31
     6d4:	c1 f0       	breq	.+48     	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
     6d6:	0e 0d       	add	r16, r14
     6d8:	1f 1d       	adc	r17, r15
     6da:	09 30       	cpi	r16, 0x09	; 9
     6dc:	11 05       	cpc	r17, r1
     6de:	9c f0       	brlt	.+38     	; 0x706 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1b2>
		int lastBitsX = x + width - endRem;
     6e0:	74 01       	movw	r14, r8
     6e2:	ec 18       	sub	r14, r12
     6e4:	fd 08       	sbc	r15, r13
     6e6:	00 e0       	ldi	r16, 0x00	; 0
     6e8:	10 e0       	ldi	r17, 0x00	; 0
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x1ac>
		for (int i = 0; i < endRem; i++)
			setBit(lastBitsX + i, y, color);
     6ec:	b8 01       	movw	r22, r16
     6ee:	6e 0d       	add	r22, r14
     6f0:	7f 1d       	adc	r23, r15
     6f2:	c5 01       	movw	r24, r10
     6f4:	a2 01       	movw	r20, r4
     6f6:	91 01       	movw	r18, r2
     6f8:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
		int lastBitsX = x + width - endRem;
		for (int i = 0; i < endRem; i++)
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	0c 15       	cp	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	9c f3       	brlt	.-26     	; 0x6ec <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x198>
			setBit(lastBitsX + i, y, color);
	}
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	bf 90       	pop	r11
     71e:	af 90       	pop	r10
     720:	9f 90       	pop	r9
     722:	8f 90       	pop	r8
     724:	7f 90       	pop	r7
     726:	6f 90       	pop	r6
     728:	5f 90       	pop	r5
     72a:	4f 90       	pop	r4
     72c:	3f 90       	pop	r3
     72e:	2f 90       	pop	r2
     730:	08 95       	ret

00000732 <_ZN7Display6Buffer5clearENS_5ColorE>:

void Buffer::clear() {
	clear(_color);
}

void Buffer::clear(Color color) {
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	7c 01       	movw	r14, r24
     744:	6b 01       	movw	r12, r22
     746:	c0 e0       	ldi	r28, 0x00	; 0
     748:	d0 e0       	ldi	r29, 0x00	; 0
     74a:	0b c0       	rjmp	.+22     	; 0x762 <_ZN7Display6Buffer5clearENS_5ColorE+0x30>

	for (int y = 0; y < _height; y++)
		fastHLine(0, y, _width, color);
     74c:	f7 01       	movw	r30, r14
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	c7 01       	movw	r24, r14
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	ae 01       	movw	r20, r28
     75a:	86 01       	movw	r16, r12
     75c:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE>
	clear(_color);
}

void Buffer::clear(Color color) {

	for (int y = 0; y < _height; y++)
     760:	21 96       	adiw	r28, 0x01	; 1
     762:	f7 01       	movw	r30, r14
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	c8 17       	cp	r28, r24
     76a:	d9 07       	cpc	r29, r25
     76c:	7c f3       	brlt	.-34     	; 0x74c <_ZN7Display6Buffer5clearENS_5ColorE+0x1a>
		fastHLine(0, y, _width, color);
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	08 95       	ret

00000780 <_ZN7Display6BufferC1EiiiPh>:
 *  \param height The height of image buffer in pixels
 *  \param pitchBytes The number of bytes provided for each row.
 *  	This must be at least floor( (width + 7)/8 ) bytes
 *  \param buff pointer to the display buffer array
 */
Buffer::Buffer(const int width, const int height, const int pitchBytes, uint8_t* buff) :
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	fc 01       	movw	r30, r24
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
     786:	71 83       	std	Z+1, r23	; 0x01
     788:	60 83       	st	Z, r22
     78a:	53 83       	std	Z+3, r21	; 0x03
     78c:	42 83       	std	Z+2, r20	; 0x02
     78e:	35 83       	std	Z+5, r19	; 0x05
     790:	24 83       	std	Z+4, r18	; 0x04
     792:	17 83       	std	Z+7, r17	; 0x07
     794:	06 83       	std	Z+6, r16	; 0x06
     796:	11 86       	std	Z+9, r1	; 0x09
     798:	10 86       	std	Z+8, r1	; 0x08
	clear(_color);
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	0e 94 99 03 	call	0x732	; 0x732 <_ZN7Display6Buffer5clearENS_5ColorE>
}
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	08 95       	ret

000007a8 <_ZN7Display6Buffer11printSerialEcc>:

/**
 * Prints out the buffer to the serial port.  Note that the
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	7c 01       	movw	r14, r24
     7ba:	c6 2e       	mov	r12, r22
     7bc:	d4 2e       	mov	r13, r20
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	1d c0       	rjmp	.+58     	; 0x7fe <_ZN7Display6Buffer11printSerialEcc+0x56>

		// Loop across the bits
		for (int w = 0; w < _width; w++) {

			// Get the bit
			Color color = getBit(w, h);
     7c4:	c7 01       	movw	r24, r14
     7c6:	be 01       	movw	r22, r28
     7c8:	a8 01       	movw	r20, r16
     7ca:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN7Display6Buffer6getBitEii>

			// Print the bit
			char bitChar = (color == WHITE) ? ones : zeros;
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <_ZN7Display6Buffer11printSerialEcc+0x2e>
     7d2:	6d 2d       	mov	r22, r13
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <_ZN7Display6Buffer11printSerialEcc+0x30>
     7d6:	6c 2d       	mov	r22, r12
			Serial.print(bitChar);
     7d8:	82 e8       	ldi	r24, 0x82	; 130
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN5Print5printEc>

	// Loop over the height
	for (int h = 0; h < _height; h++) {

		// Loop across the bits
		for (int w = 0; w < _width; w++) {
     7e0:	21 96       	adiw	r28, 0x01	; 1
     7e2:	f7 01       	movw	r30, r14
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	c8 17       	cp	r28, r24
     7ea:	d9 07       	cpc	r29, r25
     7ec:	5c f3       	brlt	.-42     	; 0x7c4 <_ZN7Display6Buffer11printSerialEcc+0x1c>
			char bitChar = (color == WHITE) ? ones : zeros;
			Serial.print(bitChar);
		}

		// Print an end-line for each row
		Serial.println("");
     7ee:	82 e8       	ldi	r24, 0x82	; 130
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN5Print7printlnEPKc>
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {

	// Loop over the height
	for (int h = 0; h < _height; h++) {
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	f7 01       	movw	r30, r14
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	93 81       	ldd	r25, Z+3	; 0x03
     804:	08 17       	cp	r16, r24
     806:	19 07       	cpc	r17, r25
     808:	1c f4       	brge	.+6      	; 0x810 <_ZN7Display6Buffer11printSerialEcc+0x68>
     80a:	c0 e0       	ldi	r28, 0x00	; 0
     80c:	d0 e0       	ldi	r29, 0x00	; 0
     80e:	e9 cf       	rjmp	.-46     	; 0x7e2 <_ZN7Display6Buffer11printSerialEcc+0x3a>
		}

		// Print an end-line for each row
		Serial.println("");
	}
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <_Z41__static_initialization_and_destruction_0ii>:
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
}
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
     82a:	b1 f4       	brne	.+44     	; 0x858 <_Z41__static_initialization_and_destruction_0ii+0x36>
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	e1 f4       	brne	.+56     	; 0x86a <_Z41__static_initialization_and_destruction_0ii+0x48>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
     832:	86 ee       	ldi	r24, 0xE6	; 230
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	64 e6       	ldi	r22, 0x64	; 100
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	4a e0       	ldi	r20, 0x0A	; 10
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	2d e0       	ldi	r18, 0x0D	; 13
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	04 e6       	ldi	r16, 0x64	; 100
     844:	11 e0       	ldi	r17, 0x01	; 1
     846:	0e 94 c0 03 	call	0x780	; 0x780 <_ZN7Display6BufferC1EiiiPh>
SimpleFont sFont(&dispBuff);
     84a:	80 ef       	ldi	r24, 0xF0	; 240
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	66 ee       	ldi	r22, 0xE6	; 230
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	0e 94 d4 05 	call	0xba8	; 0xba8 <_ZN7Display10SimpleFontC1EPNS_6BufferE>
     856:	09 c0       	rjmp	.+18     	; 0x86a <_Z41__static_initialization_and_destruction_0ii+0x48>
     858:	89 2b       	or	r24, r25
     85a:	39 f4       	brne	.+14     	; 0x86a <_Z41__static_initialization_and_destruction_0ii+0x48>
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	21 f4       	brne	.+8      	; 0x86a <_Z41__static_initialization_and_destruction_0ii+0x48>
     862:	80 ef       	ldi	r24, 0xF0	; 240
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 ba 05 	call	0xb74	; 0xb74 <_ZN7Display10SimpleFontD1Ev>
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
}
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <_GLOBAL__D_rawDispBuff>:
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	6f ef       	ldi	r22, 0xFF	; 255
     876:	7f ef       	ldi	r23, 0xFF	; 255
     878:	0e 94 11 04 	call	0x822	; 0x822 <_Z41__static_initialization_and_destruction_0ii>
     87c:	08 95       	ret

0000087e <_GLOBAL__I_rawDispBuff>:
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	6f ef       	ldi	r22, 0xFF	; 255
     884:	7f ef       	ldi	r23, 0xFF	; 255
     886:	0e 94 11 04 	call	0x822	; 0x822 <_Z41__static_initialization_and_destruction_0ii>
     88a:	08 95       	ret

0000088c <setup>:
		delay(750);
	}
}

void setup() {
	Serial.begin(9600);
     88c:	82 e8       	ldi	r24, 0x82	; 130
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	40 e8       	ldi	r20, 0x80	; 128
     892:	55 e2       	ldi	r21, 0x25	; 37
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN14HardwareSerial5beginEm>
}
     89c:	08 95       	ret

0000089e <_Z29test_SimpleFont_writeString_2v>:
// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
SimpleFont sFont(&dispBuff);

void test_SimpleFont_writeString_2() {
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	Color colorA(BLACK);
	Color colorB(WHITE);
	sFont.setColor(colorB);
     8a2:	80 ef       	ldi	r24, 0xF0	; 240
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN7Display4Font8setColorENS_5ColorE>
     8ae:	ca ef       	ldi	r28, 0xFA	; 250
     8b0:	df ef       	ldi	r29, 0xFF	; 255

	for (int yInd = -6; yInd < 11; yInd++) {
		dispBuff.clear(colorA);
     8b2:	86 ee       	ldi	r24, 0xE6	; 230
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 99 03 	call	0x732	; 0x732 <_ZN7Display6Buffer5clearENS_5ColorE>
		sFont.drawString(1, yInd, "ABC-123-/|\\");
     8be:	80 ef       	ldi	r24, 0xF0	; 240
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	ae 01       	movw	r20, r28
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	31 e0       	ldi	r19, 0x01	; 1
     8cc:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN7Display10SimpleFont10drawStringEiiPKc>
		dispBuff.printSerial('@', '.');
     8d0:	86 ee       	ldi	r24, 0xE6	; 230
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	60 e4       	ldi	r22, 0x40	; 64
     8d6:	4e e2       	ldi	r20, 0x2E	; 46
     8d8:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <_ZN7Display6Buffer11printSerialEcc>
		Serial.println("");
     8dc:	82 e8       	ldi	r24, 0x82	; 130
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	6d e0       	ldi	r22, 0x0D	; 13
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <_ZN5Print7printlnEPKc>

		delay(750);
     8e8:	6e ee       	ldi	r22, 0xEE	; 238
     8ea:	72 e0       	ldi	r23, 0x02	; 2
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <delay>
void test_SimpleFont_writeString_2() {
	Color colorA(BLACK);
	Color colorB(WHITE);
	sFont.setColor(colorB);

	for (int yInd = -6; yInd < 11; yInd++) {
     8f4:	21 96       	adiw	r28, 0x01	; 1
     8f6:	cb 30       	cpi	r28, 0x0B	; 11
     8f8:	d1 05       	cpc	r29, r1
     8fa:	d9 f6       	brne	.-74     	; 0x8b2 <_Z29test_SimpleFont_writeString_2v+0x14>
		dispBuff.printSerial('@', '.');
		Serial.println("");

		delay(750);
	}
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <loop>:
void setup() {
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeString_2();
     902:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z29test_SimpleFont_writeString_2v>
}
     906:	08 95       	ret

00000908 <_ZN7Display4FontC2EPNS_6BufferE>:
     908:	fc 01       	movw	r30, r24
     90a:	88 e1       	ldi	r24, 0x18	; 24
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	91 83       	std	Z+1, r25	; 0x01
     910:	80 83       	st	Z, r24
     912:	73 83       	std	Z+3, r23	; 0x03
     914:	62 83       	std	Z+2, r22	; 0x02
     916:	14 82       	std	Z+4, r1	; 0x04
     918:	15 82       	std	Z+5, r1	; 0x05
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	97 83       	std	Z+7, r25	; 0x07
     920:	86 83       	std	Z+6, r24	; 0x06
     922:	11 86       	std	Z+9, r1	; 0x09
     924:	10 86       	std	Z+8, r1	; 0x08
     926:	08 95       	ret

00000928 <_ZN7Display4FontD2Ev>:

Font::~Font() {}
     928:	fc 01       	movw	r30, r24
     92a:	88 e1       	ldi	r24, 0x18	; 24
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	91 83       	std	Z+1, r25	; 0x01
     930:	80 83       	st	Z, r24
     932:	08 95       	ret

00000934 <_ZN7Display4FontD1Ev>:
     934:	fc 01       	movw	r30, r24
     936:	88 e1       	ldi	r24, 0x18	; 24
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	91 83       	std	Z+1, r25	; 0x01
     93c:	80 83       	st	Z, r24
     93e:	08 95       	ret

00000940 <_ZN7Display4Font10getSpacingEv>:

uint8_t Font::getSpacing() {
	return _spacing;
}
     940:	fc 01       	movw	r30, r24
     942:	84 81       	ldd	r24, Z+4	; 0x04
     944:	08 95       	ret

00000946 <_ZN7Display4Font10setSpacingEh>:

void Font::setSpacing(uint8_t spacing) {
	_spacing = spacing;
     946:	fc 01       	movw	r30, r24
     948:	64 83       	std	Z+4, r22	; 0x04
}
     94a:	08 95       	ret

0000094c <_ZN7Display4Font8setColorENS_5ColorE>:

void Font::setColor(Color color){
	_color = color;
     94c:	fc 01       	movw	r30, r24
     94e:	77 83       	std	Z+7, r23	; 0x07
     950:	66 83       	std	Z+6, r22	; 0x06
}
     952:	08 95       	ret

00000954 <_ZN7Display4Font8getColorEv>:

Color Display::Font::getColor() {
     954:	fc 01       	movw	r30, r24
	return _color;
}
     956:	86 81       	ldd	r24, Z+6	; 0x06
     958:	97 81       	ldd	r25, Z+7	; 0x07
     95a:	08 95       	ret

0000095c <_ZN7Display4Font8setStyleENS_9FontStyleE>:

void Display::Font::setStyle(FontStyle style) {
	_style = style;
     95c:	fc 01       	movw	r30, r24
     95e:	71 87       	std	Z+9, r23	; 0x09
     960:	60 87       	std	Z+8, r22	; 0x08
}
     962:	08 95       	ret

00000964 <_ZN7Display4Font10getKerningEv>:

uint8_t Display::Font::getKerning() {
	return _kerning;
}
     964:	fc 01       	movw	r30, r24
     966:	85 81       	ldd	r24, Z+5	; 0x05
     968:	08 95       	ret

0000096a <_ZN7Display4Font10setKerningEh>:

void Display::Font::setKerning(uint8_t kerning) {
	_kerning = kerning;
     96a:	fc 01       	movw	r30, r24
     96c:	65 83       	std	Z+5, r22	; 0x05
}
     96e:	08 95       	ret

00000970 <_ZN7Display4Font8getStyleEv>:

FontStyle Display::Font::getStyle() {
     970:	fc 01       	movw	r30, r24
	return _style;
}
     972:	80 85       	ldd	r24, Z+8	; 0x08
     974:	91 85       	ldd	r25, Z+9	; 0x09
     976:	08 95       	ret

00000978 <_ZN7Display4FontD0Ev>:
#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _spacing(0), _kerning(0), _color(WHITE), _style(NOSTYLE){}

Font::~Font() {}
     978:	fc 01       	movw	r30, r24
     97a:	88 e1       	ldi	r24, 0x18	; 24
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
     982:	cf 01       	movw	r24, r30
     984:	0e 94 87 08 	call	0x110e	; 0x110e <_ZdlPv>
     988:	08 95       	ret

0000098a <_ZN7Display10SimpleFont10drawStringEiiPKc>:
			bitmap >>= 1;
		}
	}
}

void SimpleFont::drawString(int x, int y, const char* string) {
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	8c 01       	movw	r16, r24
     99c:	7b 01       	movw	r14, r22
     99e:	6a 01       	movw	r12, r20
     9a0:	e9 01       	movw	r28, r18
     9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <_ZN7Display10SimpleFont10drawStringEiiPKc+0x3c>

	// Write one line
	while (*string != 0) {
		drawChar(x, y, *string);
     9a4:	d8 01       	movw	r26, r16
     9a6:	ed 91       	ld	r30, X+
     9a8:	fc 91       	ld	r31, X
     9aa:	04 80       	ldd	r0, Z+4	; 0x04
     9ac:	f5 81       	ldd	r31, Z+5	; 0x05
     9ae:	e0 2d       	mov	r30, r0
     9b0:	c8 01       	movw	r24, r16
     9b2:	b7 01       	movw	r22, r14
     9b4:	a6 01       	movw	r20, r12
     9b6:	09 95       	icall
		string++;
     9b8:	21 96       	adiw	r28, 0x01	; 1
		x += (_width + _kerning);
     9ba:	f8 01       	movw	r30, r16
     9bc:	85 81       	ldd	r24, Z+5	; 0x05
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	04 96       	adiw	r24, 0x04	; 4
     9c2:	e8 0e       	add	r14, r24
     9c4:	f9 1e       	adc	r15, r25
}

void SimpleFont::drawString(int x, int y, const char* string) {

	// Write one line
	while (*string != 0) {
     9c6:	28 81       	ld	r18, Y
     9c8:	22 23       	and	r18, r18
     9ca:	61 f7       	brne	.-40     	; 0x9a4 <_ZN7Display10SimpleFont10drawStringEiiPKc+0x1a>
		drawChar(x, y, *string);
		string++;
		x += (_width + _kerning);
	}
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	08 95       	ret

000009de <_ZN7Display10SimpleFont9getHeightEv>:

uint8_t SimpleFont::getHeight() {
	return _height;
}
     9de:	85 e0       	ldi	r24, 0x05	; 5
     9e0:	08 95       	ret

000009e2 <_ZN7Display10SimpleFont8getWidthEv>:

uint8_t SimpleFont::getWidth() {
	return _width;
}
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	08 95       	ret

000009e6 <_ZN7Display10SimpleFont9getBitmapEc>:

//see http://ascii-table.com/
uint32_t SimpleFont::getBitmap(char c) {
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	ec 01       	movw	r28, r24
     9ec:	86 2f       	mov	r24, r22
     9ee:	99 27       	eor	r25, r25
     9f0:	87 fd       	sbrc	r24, 7
     9f2:	90 95       	com	r25

	// Get digit bitmap
#ifdef _SF_DIGIT
	if (c >= '0' && c <= '9')
     9f4:	60 53       	subi	r22, 0x30	; 48
     9f6:	6a 30       	cpi	r22, 0x0A	; 10
     9f8:	40 f4       	brcc	.+16     	; 0xa0a <_ZN7Display10SimpleFont9getBitmapEc+0x24>
     9fa:	fc 01       	movw	r30, r24
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	ee 0f       	add	r30, r30
     a02:	ff 1f       	adc	r31, r31
     a04:	e4 51       	subi	r30, 0x14	; 20
     a06:	f0 40       	sbci	r31, 0x00	; 0
     a08:	5b c0       	rjmp	.+182    	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>


// Converts the letter c to upper case, if possible.
inline int toUpperCase(int c)
{
  return toupper (c);
     a0a:	0e 94 b5 09 	call	0x136a	; 0x136a <toupper>
     a0e:	28 2f       	mov	r18, r24
#endif

	c = toUpperCase(c);

	// Get alpha bitmap
	if (c >= 'A' && c <= 'Z') {
     a10:	81 54       	subi	r24, 0x41	; 65
     a12:	8a 31       	cpi	r24, 0x1A	; 26
     a14:	b8 f4       	brcc	.+46     	; 0xa44 <_ZN7Display10SimpleFont9getBitmapEc+0x5e>

		// Bold Style
#ifdef _SF_ALPHA_BOLD
		if (_style == BOLD)
     a16:	88 85       	ldd	r24, Y+8	; 0x08
     a18:	99 85       	ldd	r25, Y+9	; 0x09
     a1a:	33 27       	eor	r19, r19
     a1c:	27 fd       	sbrc	r18, 7
     a1e:	30 95       	com	r19
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	41 f4       	brne	.+16     	; 0xa34 <_ZN7Display10SimpleFont9getBitmapEc+0x4e>
     a24:	f9 01       	movw	r30, r18
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	e0 53       	subi	r30, 0x30	; 48
     a30:	f0 40       	sbci	r31, 0x00	; 0
     a32:	46 c0       	rjmp	.+140    	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
			return resolve(_alphaBold[c - 'A']);
     a34:	f9 01       	movw	r30, r18
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	e8 5c       	subi	r30, 0xC8	; 200
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	3e c0       	rjmp	.+124    	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
#endif
	}

	// Get punc1 bitmap
#ifdef _SF_PUNC1
	if (c >= ' ' && c <= '/')
     a44:	82 2f       	mov	r24, r18
     a46:	80 52       	subi	r24, 0x20	; 32
     a48:	80 31       	cpi	r24, 0x10	; 16
     a4a:	58 f4       	brcc	.+22     	; 0xa62 <_ZN7Display10SimpleFont9getBitmapEc+0x7c>
     a4c:	e2 2f       	mov	r30, r18
     a4e:	ff 27       	eor	r31, r31
     a50:	e7 fd       	sbrc	r30, 7
     a52:	f0 95       	com	r31
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ec 5d       	subi	r30, 0xDC	; 220
     a5e:	fe 4f       	sbci	r31, 0xFE	; 254
     a60:	2f c0       	rjmp	.+94     	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc1[c - ' ']);
#endif

	// Get punc2 bitmap
#ifdef _SF_PUNC2
	if (c >= ':' && c <= '@')
     a62:	82 2f       	mov	r24, r18
     a64:	8a 53       	subi	r24, 0x3A	; 58
     a66:	87 30       	cpi	r24, 0x07	; 7
     a68:	58 f4       	brcc	.+22     	; 0xa80 <_ZN7Display10SimpleFont9getBitmapEc+0x9a>
     a6a:	e2 2f       	mov	r30, r18
     a6c:	ff 27       	eor	r31, r31
     a6e:	e7 fd       	sbrc	r30, 7
     a70:	f0 95       	com	r31
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e0 58       	subi	r30, 0x80	; 128
     a7c:	f0 40       	sbci	r31, 0x00	; 0
     a7e:	20 c0       	rjmp	.+64     	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc2[c - ':']);
#endif

	// Get punc3 bitmap
#ifdef _SF_PUNC3
	if (c >= '[' && c <= '`')
     a80:	82 2f       	mov	r24, r18
     a82:	8b 55       	subi	r24, 0x5B	; 91
     a84:	86 30       	cpi	r24, 0x06	; 6
     a86:	58 f4       	brcc	.+22     	; 0xa9e <_ZN7Display10SimpleFont9getBitmapEc+0xb8>
     a88:	e2 2f       	mov	r30, r18
     a8a:	ff 27       	eor	r31, r31
     a8c:	e7 fd       	sbrc	r30, 7
     a8e:	f0 95       	com	r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	e8 5e       	subi	r30, 0xE8	; 232
     a9a:	f0 40       	sbci	r31, 0x00	; 0
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc3[c - '[']);
#endif

	// Get punc4 bitmap
#ifdef _SF_PUNC4
	if (c >= '{' && c <= '~')
     a9e:	82 2f       	mov	r24, r18
     aa0:	8b 57       	subi	r24, 0x7B	; 123
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	58 f4       	brcc	.+22     	; 0xabc <_ZN7Display10SimpleFont9getBitmapEc+0xd6>
     aa6:	e2 2f       	mov	r30, r18
     aa8:	ff 27       	eor	r31, r31
     aaa:	e7 fd       	sbrc	r30, 7
     aac:	f0 95       	com	r31
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	e0 55       	subi	r30, 0x50	; 80
     ab8:	f1 40       	sbci	r31, 0x01	; 1
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <_ZN7Display10SimpleFont9getBitmapEc+0xda>
		return resolve(_punc4[c - '{']);
     abc:	e4 ee       	ldi	r30, 0xE4	; 228
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	25 91       	lpm	r18, Z+
     ac2:	35 91       	lpm	r19, Z+
     ac4:	45 91       	lpm	r20, Z+
     ac6:	54 91       	lpm	r21, Z+
#endif

	// Return the "error" bitmap
	return resolve(_errBitmap);
}
     ac8:	b9 01       	movw	r22, r18
     aca:	ca 01       	movw	r24, r20
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <_ZN7Display10SimpleFont8drawCharEiic>:
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}

void SimpleFont::drawChar(int x, int y, char c) {
     ad2:	4f 92       	push	r4
     ad4:	5f 92       	push	r5
     ad6:	6f 92       	push	r6
     ad8:	7f 92       	push	r7
     ada:	8f 92       	push	r8
     adc:	9f 92       	push	r9
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	5c 01       	movw	r10, r24
     af4:	2b 01       	movw	r4, r22
     af6:	3a 01       	movw	r6, r20
	uint32_t bitmap;
	bitmap = getBitmap(c);
     af8:	62 2f       	mov	r22, r18
     afa:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <_ZN7Display10SimpleFont9getBitmapEc>
     afe:	7b 01       	movw	r14, r22
     b00:	8c 01       	movw	r16, r24
     b02:	e4 e0       	ldi	r30, 0x04	; 4
     b04:	ce 2e       	mov	r12, r30
     b06:	d1 2c       	mov	r13, r1
     b08:	1e c0       	rjmp	.+60     	; 0xb46 <_ZN7Display10SimpleFont8drawCharEiic+0x74>

		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
     b0a:	e0 fe       	sbrs	r14, 0
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <_ZN7Display10SimpleFont8drawCharEiic+0x52>
				_buff->setBit(x + w, y + h, _color);
     b0e:	be 01       	movw	r22, r28
     b10:	64 0d       	add	r22, r4
     b12:	75 1d       	adc	r23, r5
     b14:	f5 01       	movw	r30, r10
     b16:	26 81       	ldd	r18, Z+6	; 0x06
     b18:	37 81       	ldd	r19, Z+7	; 0x07
     b1a:	82 81       	ldd	r24, Z+2	; 0x02
     b1c:	93 81       	ldd	r25, Z+3	; 0x03
     b1e:	a4 01       	movw	r20, r8
     b20:	0e 94 2a 02 	call	0x454	; 0x454 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>

			// Shift out a bit
			bitmap >>= 1;
     b24:	16 95       	lsr	r17
     b26:	07 95       	ror	r16
     b28:	f7 94       	ror	r15
     b2a:	e7 94       	ror	r14

	// Loop across the height
	for (int h = _height - 1; h >= 0; h--) {

		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {
     b2c:	21 97       	sbiw	r28, 0x01	; 1
     b2e:	ff ef       	ldi	r31, 0xFF	; 255
     b30:	cf 3f       	cpi	r28, 0xFF	; 255
     b32:	df 07       	cpc	r29, r31
     b34:	51 f7       	brne	.-44     	; 0xb0a <_ZN7Display10SimpleFont8drawCharEiic+0x38>
void SimpleFont::drawChar(int x, int y, char c) {
	uint32_t bitmap;
	bitmap = getBitmap(c);

	// Loop across the height
	for (int h = _height - 1; h >= 0; h--) {
     b36:	08 94       	sec
     b38:	c1 08       	sbc	r12, r1
     b3a:	d1 08       	sbc	r13, r1
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	c8 16       	cp	r12, r24
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	d8 06       	cpc	r13, r24
     b44:	31 f0       	breq	.+12     	; 0xb52 <_ZN7Display10SimpleFont8drawCharEiic+0x80>
     b46:	c3 e0       	ldi	r28, 0x03	; 3
     b48:	d0 e0       	ldi	r29, 0x00	; 0
		// loop across the width
		for (int w = _width - 1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
				_buff->setBit(x + w, y + h, _color);
     b4a:	46 01       	movw	r8, r12
     b4c:	86 0c       	add	r8, r6
     b4e:	97 1c       	adc	r9, r7
     b50:	dc cf       	rjmp	.-72     	; 0xb0a <_ZN7Display10SimpleFont8drawCharEiic+0x38>

			// Shift out a bit
			bitmap >>= 1;
		}
	}
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	9f 90       	pop	r9
     b68:	8f 90       	pop	r8
     b6a:	7f 90       	pop	r7
     b6c:	6f 90       	pop	r6
     b6e:	5f 90       	pop	r5
     b70:	4f 90       	pop	r4
     b72:	08 95       	ret

00000b74 <_ZN7Display10SimpleFontD1Ev>:
		Font(buff) {
	_spacing = _height + 1;
	_kerning = 2;
}

SimpleFont::~SimpleFont() {}
     b74:	fc 01       	movw	r30, r24
     b76:	88 e3       	ldi	r24, 0x38	; 56
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	91 83       	std	Z+1, r25	; 0x01
     b7c:	80 83       	st	Z, r24
     b7e:	cf 01       	movw	r24, r30
     b80:	0e 94 94 04 	call	0x928	; 0x928 <_ZN7Display4FontD2Ev>
     b84:	08 95       	ret

00000b86 <_ZN7Display10SimpleFontD0Ev>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	8c 01       	movw	r16, r24
     b8c:	88 e3       	ldi	r24, 0x38	; 56
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	f8 01       	movw	r30, r16
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	80 83       	st	Z, r24
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 94 04 	call	0x928	; 0x928 <_ZN7Display4FontD2Ev>
     b9c:	c8 01       	movw	r24, r16
     b9e:	0e 94 87 08 	call	0x110e	; 0x110e <_ZdlPv>
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <_ZN7Display10SimpleFontC1EPNS_6BufferE>:
#include "SimpleFont.h"
#include "SimpleFont_data.h"

using namespace Display;

SimpleFont::SimpleFont(Buffer* buff) :
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	8c 01       	movw	r16, r24
		Font(buff) {
     bae:	0e 94 84 04 	call	0x908	; 0x908 <_ZN7Display4FontC2EPNS_6BufferE>
     bb2:	88 e3       	ldi	r24, 0x38	; 56
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	f8 01       	movw	r30, r16
     bb8:	91 83       	std	Z+1, r25	; 0x01
     bba:	80 83       	st	Z, r24
	_spacing = _height + 1;
     bbc:	86 e0       	ldi	r24, 0x06	; 6
     bbe:	84 83       	std	Z+4, r24	; 0x04
	_kerning = 2;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	85 83       	std	Z+5, r24	; 0x05
}
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     bca:	08 95       	ret

00000bcc <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     be4:	80 91 c0 00 	lds	r24, 0x00C0
     be8:	82 fd       	sbrc	r24, 2
     bea:	1d c0       	rjmp	.+58     	; 0xc26 <__vector_18+0x5a>
      unsigned char c = UDR0;
     bec:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     bf0:	20 91 3a 02 	lds	r18, 0x023A
     bf4:	30 91 3b 02 	lds	r19, 0x023B

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     bf8:	2f 5f       	subi	r18, 0xFF	; 255
     bfa:	3f 4f       	sbci	r19, 0xFF	; 255
     bfc:	2f 73       	andi	r18, 0x3F	; 63
     bfe:	30 70       	andi	r19, 0x00	; 0
     c00:	80 91 3c 02 	lds	r24, 0x023C
     c04:	90 91 3d 02 	lds	r25, 0x023D
     c08:	28 17       	cp	r18, r24
     c0a:	39 07       	cpc	r19, r25
     c0c:	71 f0       	breq	.+28     	; 0xc2a <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     c0e:	e0 91 3a 02 	lds	r30, 0x023A
     c12:	f0 91 3b 02 	lds	r31, 0x023B
     c16:	e6 50       	subi	r30, 0x06	; 6
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	40 83       	st	Z, r20
    buffer->head = i;
     c1c:	30 93 3b 02 	sts	0x023B, r19
     c20:	20 93 3a 02 	sts	0x023A, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     c26:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     c42:	e0 91 8e 02 	lds	r30, 0x028E
     c46:	f0 91 8f 02 	lds	r31, 0x028F
     c4a:	e0 5c       	subi	r30, 0xC0	; 192
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	81 91       	ld	r24, Z+
     c50:	91 91       	ld	r25, Z+
     c52:	20 81       	ld	r18, Z
     c54:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     c56:	82 1b       	sub	r24, r18
     c58:	93 0b       	sbc	r25, r19
     c5a:	8f 73       	andi	r24, 0x3F	; 63
     c5c:	90 70       	andi	r25, 0x00	; 0
     c5e:	89 2b       	or	r24, r25
     c60:	11 f0       	breq	.+4      	; 0xc66 <_Z14serialEventRunv+0x24>
     c62:	0e 94 e5 05 	call	0xbca	; 0xbca <_Z11serialEventv>
     c66:	08 95       	ret

00000c68 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	2f 93       	push	r18
     c74:	3f 93       	push	r19
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     c7e:	20 91 7e 02 	lds	r18, 0x027E
     c82:	30 91 7f 02 	lds	r19, 0x027F
     c86:	80 91 80 02 	lds	r24, 0x0280
     c8a:	90 91 81 02 	lds	r25, 0x0281
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	31 f4       	brne	.+12     	; 0xca0 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     c94:	80 91 c1 00 	lds	r24, 0x00C1
     c98:	8f 7d       	andi	r24, 0xDF	; 223
     c9a:	80 93 c1 00 	sts	0x00C1, r24
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     ca0:	e0 91 80 02 	lds	r30, 0x0280
     ca4:	f0 91 81 02 	lds	r31, 0x0281
     ca8:	e2 5c       	subi	r30, 0xC2	; 194
     caa:	fd 4f       	sbci	r31, 0xFD	; 253
     cac:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     cae:	80 91 80 02 	lds	r24, 0x0280
     cb2:	90 91 81 02 	lds	r25, 0x0281
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	8f 73       	andi	r24, 0x3F	; 63
     cba:	90 70       	andi	r25, 0x00	; 0
     cbc:	90 93 81 02 	sts	0x0281, r25
     cc0:	80 93 80 02 	sts	0x0280, r24
	
  #if defined(UDR0)
    UDR0 = c;
     cc4:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	7a 01       	movw	r14, r20
     cf4:	8b 01       	movw	r16, r22
     cf6:	dd 24       	eor	r13, r13
     cf8:	40 30       	cpi	r20, 0x00	; 0
     cfa:	81 ee       	ldi	r24, 0xE1	; 225
     cfc:	58 07       	cpc	r21, r24
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	68 07       	cpc	r22, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	78 07       	cpc	r23, r24
     d06:	11 f0       	breq	.+4      	; 0xd0c <_ZN14HardwareSerial5beginEm+0x2e>
     d08:	dd 24       	eor	r13, r13
     d0a:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	a9 2e       	mov	r10, r25
     d10:	b1 2c       	mov	r11, r1
     d12:	ec 89       	ldd	r30, Y+20	; 0x14
     d14:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     d16:	dd 20       	and	r13, r13
     d18:	69 f0       	breq	.+26     	; 0xd34 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     d1a:	c5 01       	movw	r24, r10
     d1c:	08 a0       	ldd	r0, Y+32	; 0x20
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <_ZN14HardwareSerial5beginEm+0x46>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <_ZN14HardwareSerial5beginEm+0x42>
     d28:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	79 e0       	ldi	r23, 0x09	; 9
     d2e:	8d e3       	ldi	r24, 0x3D	; 61
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     d34:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d36:	60 e8       	ldi	r22, 0x80	; 128
     d38:	74 e8       	ldi	r23, 0x84	; 132
     d3a:	8e e1       	ldi	r24, 0x1E	; 30
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a8 01       	movw	r20, r16
     d40:	97 01       	movw	r18, r14
     d42:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__udivmodsi4>
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	30 40       	sbci	r19, 0x00	; 0
     d4a:	40 40       	sbci	r20, 0x00	; 0
     d4c:	50 40       	sbci	r21, 0x00	; 0
     d4e:	56 95       	lsr	r21
     d50:	47 95       	ror	r20
     d52:	37 95       	ror	r19
     d54:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     d56:	80 e1       	ldi	r24, 0x10	; 16
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	38 07       	cpc	r19, r24
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <_ZN14HardwareSerial5beginEm+0x88>
     d5e:	dd 20       	and	r13, r13
     d60:	11 f0       	breq	.+4      	; 0xd66 <_ZN14HardwareSerial5beginEm+0x88>
     d62:	dd 24       	eor	r13, r13
     d64:	d6 cf       	rjmp	.-84     	; 0xd12 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     d66:	e8 89       	ldd	r30, Y+16	; 0x10
     d68:	f9 89       	ldd	r31, Y+17	; 0x11
     d6a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     d6c:	ea 89       	ldd	r30, Y+18	; 0x12
     d6e:	fb 89       	ldd	r31, Y+19	; 0x13
     d70:	20 83       	st	Z, r18

  transmitting = false;
     d72:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     d74:	ee 89       	ldd	r30, Y+22	; 0x16
     d76:	ff 89       	ldd	r31, Y+23	; 0x17
     d78:	40 81       	ld	r20, Z
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	c9 01       	movw	r24, r18
     d80:	0c 8c       	ldd	r0, Y+28	; 0x1c
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <_ZN14HardwareSerial5beginEm+0xaa>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <_ZN14HardwareSerial5beginEm+0xa6>
     d8c:	48 2b       	or	r20, r24
     d8e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     d90:	ee 89       	ldd	r30, Y+22	; 0x16
     d92:	ff 89       	ldd	r31, Y+23	; 0x17
     d94:	40 81       	ld	r20, Z
     d96:	c9 01       	movw	r24, r18
     d98:	0d 8c       	ldd	r0, Y+29	; 0x1d
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <_ZN14HardwareSerial5beginEm+0xc2>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <_ZN14HardwareSerial5beginEm+0xbe>
     da4:	48 2b       	or	r20, r24
     da6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     da8:	ee 89       	ldd	r30, Y+22	; 0x16
     daa:	ff 89       	ldd	r31, Y+23	; 0x17
     dac:	40 81       	ld	r20, Z
     dae:	c9 01       	movw	r24, r18
     db0:	0e 8c       	ldd	r0, Y+30	; 0x1e
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <_ZN14HardwareSerial5beginEm+0xda>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <_ZN14HardwareSerial5beginEm+0xd6>
     dbc:	48 2b       	or	r20, r24
     dbe:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     dc0:	ee 89       	ldd	r30, Y+22	; 0x16
     dc2:	ff 89       	ldd	r31, Y+23	; 0x17
     dc4:	80 81       	ld	r24, Z
     dc6:	0f 8c       	ldd	r0, Y+31	; 0x1f
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <_ZN14HardwareSerial5beginEm+0xf0>
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	0a 94       	dec	r0
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <_ZN14HardwareSerial5beginEm+0xec>
     dd2:	20 95       	com	r18
     dd4:	28 23       	and	r18, r24
     dd6:	20 83       	st	Z, r18
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	08 95       	ret

00000dec <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     dec:	dc 01       	movw	r26, r24
     dee:	1c 96       	adiw	r26, 0x0c	; 12
     df0:	ed 91       	ld	r30, X+
     df2:	fc 91       	ld	r31, X
     df4:	1d 97       	sbiw	r26, 0x0d	; 13
     df6:	e0 5c       	subi	r30, 0xC0	; 192
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	21 91       	ld	r18, Z+
     dfc:	31 91       	ld	r19, Z+
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	28 1b       	sub	r18, r24
     e04:	39 0b       	sbc	r19, r25
     e06:	2f 73       	andi	r18, 0x3F	; 63
     e08:	30 70       	andi	r19, 0x00	; 0
}
     e0a:	c9 01       	movw	r24, r18
     e0c:	08 95       	ret

00000e0e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     e0e:	dc 01       	movw	r26, r24
     e10:	1c 96       	adiw	r26, 0x0c	; 12
     e12:	ed 91       	ld	r30, X+
     e14:	fc 91       	ld	r31, X
     e16:	1d 97       	sbiw	r26, 0x0d	; 13
     e18:	e0 5c       	subi	r30, 0xC0	; 192
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	20 81       	ld	r18, Z
     e1e:	31 81       	ldd	r19, Z+1	; 0x01
     e20:	e0 54       	subi	r30, 0x40	; 64
     e22:	f0 40       	sbci	r31, 0x00	; 0
     e24:	df 01       	movw	r26, r30
     e26:	ae 5b       	subi	r26, 0xBE	; 190
     e28:	bf 4f       	sbci	r27, 0xFF	; 255
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	11 97       	sbiw	r26, 0x01	; 1
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	19 f4       	brne	.+6      	; 0xe3c <_ZN14HardwareSerial4peekEv+0x2e>
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     e3c:	8d 91       	ld	r24, X+
     e3e:	9c 91       	ld	r25, X
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	80 81       	ld	r24, Z
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     e4a:	c9 01       	movw	r24, r18
     e4c:	08 95       	ret

00000e4e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     e4e:	dc 01       	movw	r26, r24
     e50:	1c 96       	adiw	r26, 0x0c	; 12
     e52:	ed 91       	ld	r30, X+
     e54:	fc 91       	ld	r31, X
     e56:	1d 97       	sbiw	r26, 0x0d	; 13
     e58:	e0 5c       	subi	r30, 0xC0	; 192
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	20 81       	ld	r18, Z
     e5e:	31 81       	ldd	r19, Z+1	; 0x01
     e60:	e0 54       	subi	r30, 0x40	; 64
     e62:	f0 40       	sbci	r31, 0x00	; 0
     e64:	df 01       	movw	r26, r30
     e66:	ae 5b       	subi	r26, 0xBE	; 190
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	8d 91       	ld	r24, X+
     e6c:	9c 91       	ld	r25, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	28 17       	cp	r18, r24
     e72:	39 07       	cpc	r19, r25
     e74:	19 f4       	brne	.+6      	; 0xe7c <_ZN14HardwareSerial4readEv+0x2e>
     e76:	2f ef       	ldi	r18, 0xFF	; 255
     e78:	3f ef       	ldi	r19, 0xFF	; 255
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	11 97       	sbiw	r26, 0x01	; 1
     e82:	e8 0f       	add	r30, r24
     e84:	f9 1f       	adc	r31, r25
     e86:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     e88:	8d 91       	ld	r24, X+
     e8a:	9c 91       	ld	r25, X
     e8c:	11 97       	sbiw	r26, 0x01	; 1
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	8f 73       	andi	r24, 0x3F	; 63
     e92:	90 70       	andi	r25, 0x00	; 0
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
    return c;
     e9a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     e9c:	c9 01       	movw	r24, r18
     e9e:	08 95       	ret

00000ea0 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     ea0:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     ea2:	91 96       	adiw	r26, 0x21	; 33
     ea4:	8c 91       	ld	r24, X
     ea6:	91 97       	sbiw	r26, 0x21	; 33
     ea8:	88 23       	and	r24, r24
     eaa:	39 f0       	breq	.+14     	; 0xeba <_ZN14HardwareSerial5flushEv+0x1a>
     eac:	54 96       	adiw	r26, 0x14	; 20
     eae:	ed 91       	ld	r30, X+
     eb0:	fc 91       	ld	r31, X
     eb2:	55 97       	sbiw	r26, 0x15	; 21
     eb4:	80 81       	ld	r24, Z
     eb6:	86 ff       	sbrs	r24, 6
     eb8:	f9 cf       	rjmp	.-14     	; 0xeac <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     eba:	91 96       	adiw	r26, 0x21	; 33
     ebc:	1c 92       	st	X, r1
}
     ebe:	08 95       	ret

00000ec0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     ec6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ec8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eca:	e0 5c       	subi	r30, 0xC0	; 192
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	e0 54       	subi	r30, 0x40	; 64
     ed4:	f0 40       	sbci	r31, 0x00	; 0
     ed6:	2f 5f       	subi	r18, 0xFF	; 255
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	2f 73       	andi	r18, 0x3F	; 63
     edc:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     ede:	df 01       	movw	r26, r30
     ee0:	ae 5b       	subi	r26, 0xBE	; 190
     ee2:	bf 4f       	sbci	r27, 0xFF	; 255
     ee4:	8d 91       	ld	r24, X+
     ee6:	9c 91       	ld	r25, X
     ee8:	11 97       	sbiw	r26, 0x01	; 1
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	d1 f3       	breq	.-12     	; 0xee4 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     ef0:	e0 5c       	subi	r30, 0xC0	; 192
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	e0 54       	subi	r30, 0x40	; 64
     efa:	f0 40       	sbci	r31, 0x00	; 0
     efc:	e8 0f       	add	r30, r24
     efe:	f9 1f       	adc	r31, r25
     f00:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     f02:	ee 85       	ldd	r30, Y+14	; 0x0e
     f04:	ff 85       	ldd	r31, Y+15	; 0x0f
     f06:	e0 5c       	subi	r30, 0xC0	; 192
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	31 83       	std	Z+1, r19	; 0x01
     f0c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     f0e:	ee 89       	ldd	r30, Y+22	; 0x16
     f10:	ff 89       	ldd	r31, Y+23	; 0x17
     f12:	20 81       	ld	r18, Z
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0f 8c       	ldd	r0, Y+31	; 0x1f
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <_ZN14HardwareSerial5writeEh+0x60>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <_ZN14HardwareSerial5writeEh+0x5c>
     f24:	28 2b       	or	r18, r24
     f26:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     f2c:	ec 89       	ldd	r30, Y+20	; 0x14
     f2e:	fd 89       	ldd	r31, Y+21	; 0x15
     f30:	80 81       	ld	r24, Z
     f32:	80 64       	ori	r24, 0x40	; 64
     f34:	80 83       	st	Z, r24
  
  return 1;
}
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     f40:	10 92 85 02 	sts	0x0285, r1
     f44:	10 92 84 02 	sts	0x0284, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     f48:	88 ee       	ldi	r24, 0xE8	; 232
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	80 93 86 02 	sts	0x0286, r24
     f54:	90 93 87 02 	sts	0x0287, r25
     f58:	a0 93 88 02 	sts	0x0288, r26
     f5c:	b0 93 89 02 	sts	0x0289, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     f60:	88 e5       	ldi	r24, 0x58	; 88
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	90 93 83 02 	sts	0x0283, r25
     f68:	80 93 82 02 	sts	0x0282, r24
{
  _rx_buffer = rx_buffer;
     f6c:	8a ef       	ldi	r24, 0xFA	; 250
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	90 93 8f 02 	sts	0x028F, r25
     f74:	80 93 8e 02 	sts	0x028E, r24
  _tx_buffer = tx_buffer;
     f78:	8e e3       	ldi	r24, 0x3E	; 62
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	90 93 91 02 	sts	0x0291, r25
     f80:	80 93 90 02 	sts	0x0290, r24
  _ubrrh = ubrrh;
     f84:	85 ec       	ldi	r24, 0xC5	; 197
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	90 93 93 02 	sts	0x0293, r25
     f8c:	80 93 92 02 	sts	0x0292, r24
  _ubrrl = ubrrl;
     f90:	84 ec       	ldi	r24, 0xC4	; 196
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 95 02 	sts	0x0295, r25
     f98:	80 93 94 02 	sts	0x0294, r24
  _ucsra = ucsra;
     f9c:	80 ec       	ldi	r24, 0xC0	; 192
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 97 02 	sts	0x0297, r25
     fa4:	80 93 96 02 	sts	0x0296, r24
  _ucsrb = ucsrb;
     fa8:	81 ec       	ldi	r24, 0xC1	; 193
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	90 93 99 02 	sts	0x0299, r25
     fb0:	80 93 98 02 	sts	0x0298, r24
  _ucsrc = ucsrc;
     fb4:	82 ec       	ldi	r24, 0xC2	; 194
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 9b 02 	sts	0x029B, r25
     fbc:	80 93 9a 02 	sts	0x029A, r24
  _udr = udr;
     fc0:	86 ec       	ldi	r24, 0xC6	; 198
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 9d 02 	sts	0x029D, r25
     fc8:	80 93 9c 02 	sts	0x029C, r24
  _rxen = rxen;
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	80 93 9e 02 	sts	0x029E, r24
  _txen = txen;
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	80 93 9f 02 	sts	0x029F, r24
  _rxcie = rxcie;
     fd8:	87 e0       	ldi	r24, 0x07	; 7
     fda:	80 93 a0 02 	sts	0x02A0, r24
  _udrie = udrie;
     fde:	85 e0       	ldi	r24, 0x05	; 5
     fe0:	80 93 a1 02 	sts	0x02A1, r24
  _u2x = u2x;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 a2 02 	sts	0x02A2, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     fea:	08 95       	ret

00000fec <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	7c 01       	movw	r14, r24
     ffe:	6b 01       	movw	r12, r22
    1000:	8a 01       	movw	r16, r20
    1002:	c0 e0       	ldi	r28, 0x00	; 0
    1004:	d0 e0       	ldi	r29, 0x00	; 0
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1008:	d6 01       	movw	r26, r12
    100a:	6d 91       	ld	r22, X+
    100c:	6d 01       	movw	r12, r26
    100e:	d7 01       	movw	r26, r14
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	c7 01       	movw	r24, r14
    101c:	09 95       	icall
    101e:	c8 0f       	add	r28, r24
    1020:	d9 1f       	adc	r29, r25
    1022:	01 50       	subi	r16, 0x01	; 1
    1024:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1026:	01 15       	cp	r16, r1
    1028:	11 05       	cpc	r17, r1
    102a:	71 f7       	brne	.-36     	; 0x1008 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    102c:	ce 01       	movw	r24, r28
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    1040:	dc 01       	movw	r26, r24
{
  return write(c);
    1042:	ed 91       	ld	r30, X+
    1044:	fc 91       	ld	r31, X
    1046:	01 90       	ld	r0, Z+
    1048:	f0 81       	ld	r31, Z
    104a:	e0 2d       	mov	r30, r0
    104c:	09 95       	icall
}
    104e:	08 95       	ret

00001050 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    105a:	dc 01       	movw	r26, r24
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	01 90       	ld	r0, Z+
    1062:	f0 81       	ld	r31, Z
    1064:	e0 2d       	mov	r30, r0
    1066:	6d e0       	ldi	r22, 0x0D	; 13
    1068:	09 95       	icall
    106a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    106c:	d8 01       	movw	r26, r16
    106e:	ed 91       	ld	r30, X+
    1070:	fc 91       	ld	r31, X
    1072:	01 90       	ld	r0, Z+
    1074:	f0 81       	ld	r31, Z
    1076:	e0 2d       	mov	r30, r0
    1078:	c8 01       	movw	r24, r16
    107a:	6a e0       	ldi	r22, 0x0A	; 10
    107c:	09 95       	icall
    107e:	9c 01       	movw	r18, r24
    1080:	2e 0d       	add	r18, r14
    1082:	3f 1d       	adc	r19, r15
    1084:	c9 01       	movw	r24, r18
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    1096:	61 15       	cp	r22, r1
    1098:	71 05       	cpc	r23, r1
    109a:	19 f4       	brne	.+6      	; 0x10a2 <_ZN5Print5writeEPKc+0x12>
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    10a2:	db 01       	movw	r26, r22
    10a4:	0d 90       	ld	r0, X+
    10a6:	00 20       	and	r0, r0
    10a8:	e9 f7       	brne	.-6      	; 0x10a4 <_ZN5Print5writeEPKc+0x14>
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	a6 1b       	sub	r26, r22
    10ae:	b7 0b       	sbc	r27, r23
    10b0:	e8 81       	ld	r30, Y
    10b2:	f9 81       	ldd	r31, Y+1	; 0x01
    10b4:	02 80       	ldd	r0, Z+2	; 0x02
    10b6:	f3 81       	ldd	r31, Z+3	; 0x03
    10b8:	e0 2d       	mov	r30, r0
    10ba:	ad 01       	movw	r20, r26
    10bc:	09 95       	icall
    10be:	9c 01       	movw	r18, r24
    }
    10c0:	c9 01       	movw	r24, r18
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    10d2:	0e 94 48 08 	call	0x1090	; 0x1090 <_ZN5Print5writeEPKc>
    10d6:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    10d8:	c7 01       	movw	r24, r14
    10da:	0e 94 28 08 	call	0x1050	; 0x1050 <_ZN5Print7printlnEv>
    10de:	08 0f       	add	r16, r24
    10e0:	19 1f       	adc	r17, r25
  return n;
}
    10e2:	c8 01       	movw	r24, r16
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	08 95       	ret

000010ee <main>:
#include <Arduino.h>

int main(void)
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
{
	init();
    10f2:	0e 94 2b 09 	call	0x1256	; 0x1256 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    10f6:	0e 94 46 04 	call	0x88c	; 0x88c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    10fa:	c1 e2       	ldi	r28, 0x21	; 33
    10fc:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
    10fe:	0e 94 81 04 	call	0x902	; 0x902 <loop>
		if (serialEventRun) serialEventRun();
    1102:	20 97       	sbiw	r28, 0x00	; 0
    1104:	e1 f3       	breq	.-8      	; 0x10fe <main+0x10>
    1106:	0e 94 21 06 	call	0xc42	; 0xc42 <_Z14serialEventRunv>
    110a:	f9 cf       	rjmp	.-14     	; 0x10fe <main+0x10>

0000110c <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    110c:	08 95       	ret

0000110e <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    110e:	0e 94 cb 01 	call	0x396	; 0x396 <free>
} 
    1112:	08 95       	ret

00001114 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	3f 93       	push	r19
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    112a:	80 91 a8 02 	lds	r24, 0x02A8
    112e:	90 91 a9 02 	lds	r25, 0x02A9
    1132:	a0 91 aa 02 	lds	r26, 0x02AA
    1136:	b0 91 ab 02 	lds	r27, 0x02AB
	unsigned char f = timer0_fract;
    113a:	30 91 ac 02 	lds	r19, 0x02AC

	m += MILLIS_INC;
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	a1 1d       	adc	r26, r1
    1142:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1144:	23 2f       	mov	r18, r19
    1146:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1148:	2d 37       	cpi	r18, 0x7D	; 125
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__vector_16+0x40>
		f -= FRACT_MAX;
    114c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a1 1d       	adc	r26, r1
    1152:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1154:	20 93 ac 02 	sts	0x02AC, r18
	timer0_millis = m;
    1158:	80 93 a8 02 	sts	0x02A8, r24
    115c:	90 93 a9 02 	sts	0x02A9, r25
    1160:	a0 93 aa 02 	sts	0x02AA, r26
    1164:	b0 93 ab 02 	sts	0x02AB, r27
	timer0_overflow_count++;
    1168:	80 91 a4 02 	lds	r24, 0x02A4
    116c:	90 91 a5 02 	lds	r25, 0x02A5
    1170:	a0 91 a6 02 	lds	r26, 0x02A6
    1174:	b0 91 a7 02 	lds	r27, 0x02A7
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	a1 1d       	adc	r26, r1
    117c:	b1 1d       	adc	r27, r1
    117e:	80 93 a4 02 	sts	0x02A4, r24
    1182:	90 93 a5 02 	sts	0x02A5, r25
    1186:	a0 93 a6 02 	sts	0x02A6, r26
    118a:	b0 93 a7 02 	sts	0x02A7, r27
}
    118e:	bf 91       	pop	r27
    1190:	af 91       	pop	r26
    1192:	9f 91       	pop	r25
    1194:	8f 91       	pop	r24
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	0f 90       	pop	r0
    11a0:	1f 90       	pop	r1
    11a2:	18 95       	reti

000011a4 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11a8:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    11aa:	f8 94       	cli
	m = timer0_overflow_count;
    11ac:	80 91 a4 02 	lds	r24, 0x02A4
    11b0:	90 91 a5 02 	lds	r25, 0x02A5
    11b4:	a0 91 a6 02 	lds	r26, 0x02A6
    11b8:	b0 91 a7 02 	lds	r27, 0x02A7
#if defined(TCNT0)
	t = TCNT0;
    11bc:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11be:	a8 9b       	sbis	0x15, 0	; 21
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <delay+0x28>
    11c2:	6f 3f       	cpi	r22, 0xFF	; 255
    11c4:	19 f0       	breq	.+6      	; 0x11cc <delay+0x28>
		m++;
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	a1 1d       	adc	r26, r1
    11ca:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11cc:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    11ce:	ba 2f       	mov	r27, r26
    11d0:	a9 2f       	mov	r26, r25
    11d2:	98 2f       	mov	r25, r24
    11d4:	88 27       	eor	r24, r24
    11d6:	86 0f       	add	r24, r22
    11d8:	91 1d       	adc	r25, r1
    11da:	a1 1d       	adc	r26, r1
    11dc:	b1 1d       	adc	r27, r1
    11de:	62 e0       	ldi	r22, 0x02	; 2
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	6a 95       	dec	r22
    11ea:	d1 f7       	brne	.-12     	; 0x11e0 <delay+0x3c>
    11ec:	bc 01       	movw	r22, r24
    11ee:	2d c0       	rjmp	.+90     	; 0x124a <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11f0:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    11f2:	f8 94       	cli
	m = timer0_overflow_count;
    11f4:	80 91 a4 02 	lds	r24, 0x02A4
    11f8:	90 91 a5 02 	lds	r25, 0x02A5
    11fc:	a0 91 a6 02 	lds	r26, 0x02A6
    1200:	b0 91 a7 02 	lds	r27, 0x02A7
#if defined(TCNT0)
	t = TCNT0;
    1204:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1206:	a8 9b       	sbis	0x15, 0	; 21
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <delay+0x70>
    120a:	ef 3f       	cpi	r30, 0xFF	; 255
    120c:	19 f0       	breq	.+6      	; 0x1214 <delay+0x70>
		m++;
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	a1 1d       	adc	r26, r1
    1212:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1214:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1216:	ba 2f       	mov	r27, r26
    1218:	a9 2f       	mov	r26, r25
    121a:	98 2f       	mov	r25, r24
    121c:	88 27       	eor	r24, r24
    121e:	8e 0f       	add	r24, r30
    1220:	91 1d       	adc	r25, r1
    1222:	a1 1d       	adc	r26, r1
    1224:	b1 1d       	adc	r27, r1
    1226:	e2 e0       	ldi	r30, 0x02	; 2
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	aa 1f       	adc	r26, r26
    122e:	bb 1f       	adc	r27, r27
    1230:	ea 95       	dec	r30
    1232:	d1 f7       	brne	.-12     	; 0x1228 <delay+0x84>
    1234:	86 1b       	sub	r24, r22
    1236:	97 0b       	sbc	r25, r23
    1238:	88 5e       	subi	r24, 0xE8	; 232
    123a:	93 40       	sbci	r25, 0x03	; 3
    123c:	c8 f2       	brcs	.-78     	; 0x11f0 <delay+0x4c>
			ms--;
    123e:	21 50       	subi	r18, 0x01	; 1
    1240:	30 40       	sbci	r19, 0x00	; 0
    1242:	40 40       	sbci	r20, 0x00	; 0
    1244:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1246:	68 51       	subi	r22, 0x18	; 24
    1248:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	41 05       	cpc	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	71 f6       	brne	.-100    	; 0x11f0 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1254:	08 95       	ret

00001256 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1256:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1258:	84 b5       	in	r24, 0x24	; 36
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    125e:	84 b5       	in	r24, 0x24	; 36
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1264:	85 b5       	in	r24, 0x25	; 37
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    126a:	85 b5       	in	r24, 0x25	; 37
    126c:	81 60       	ori	r24, 0x01	; 1
    126e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1270:	ee e6       	ldi	r30, 0x6E	; 110
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    127a:	e1 e8       	ldi	r30, 0x81	; 129
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1280:	80 81       	ld	r24, Z
    1282:	82 60       	ori	r24, 0x02	; 2
    1284:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1286:	80 81       	ld	r24, Z
    1288:	81 60       	ori	r24, 0x01	; 1
    128a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    128c:	e0 e8       	ldi	r30, 0x80	; 128
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	81 60       	ori	r24, 0x01	; 1
    1294:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1296:	e1 eb       	ldi	r30, 0xB1	; 177
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12a0:	e0 eb       	ldi	r30, 0xB0	; 176
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	81 60       	ori	r24, 0x01	; 1
    12a8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    12aa:	ea e7       	ldi	r30, 0x7A	; 122
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	84 60       	ori	r24, 0x04	; 4
    12b2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    12b4:	80 81       	ld	r24, Z
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    12ba:	80 81       	ld	r24, Z
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12c0:	80 81       	ld	r24, Z
    12c2:	80 68       	ori	r24, 0x80	; 128
    12c4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12c6:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    12ca:	08 95       	ret

000012cc <__divmodhi4>:
    12cc:	97 fb       	bst	r25, 7
    12ce:	09 2e       	mov	r0, r25
    12d0:	07 26       	eor	r0, r23
    12d2:	0a d0       	rcall	.+20     	; 0x12e8 <__divmodhi4_neg1>
    12d4:	77 fd       	sbrc	r23, 7
    12d6:	04 d0       	rcall	.+8      	; 0x12e0 <__divmodhi4_neg2>
    12d8:	2e d0       	rcall	.+92     	; 0x1336 <__udivmodhi4>
    12da:	06 d0       	rcall	.+12     	; 0x12e8 <__divmodhi4_neg1>
    12dc:	00 20       	and	r0, r0
    12de:	1a f4       	brpl	.+6      	; 0x12e6 <__divmodhi4_exit>

000012e0 <__divmodhi4_neg2>:
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255

000012e6 <__divmodhi4_exit>:
    12e6:	08 95       	ret

000012e8 <__divmodhi4_neg1>:
    12e8:	f6 f7       	brtc	.-4      	; 0x12e6 <__divmodhi4_exit>
    12ea:	90 95       	com	r25
    12ec:	81 95       	neg	r24
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	08 95       	ret

000012f2 <__udivmodsi4>:
    12f2:	a1 e2       	ldi	r26, 0x21	; 33
    12f4:	1a 2e       	mov	r1, r26
    12f6:	aa 1b       	sub	r26, r26
    12f8:	bb 1b       	sub	r27, r27
    12fa:	fd 01       	movw	r30, r26
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <__udivmodsi4_ep>

000012fe <__udivmodsi4_loop>:
    12fe:	aa 1f       	adc	r26, r26
    1300:	bb 1f       	adc	r27, r27
    1302:	ee 1f       	adc	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	a2 17       	cp	r26, r18
    1308:	b3 07       	cpc	r27, r19
    130a:	e4 07       	cpc	r30, r20
    130c:	f5 07       	cpc	r31, r21
    130e:	20 f0       	brcs	.+8      	; 0x1318 <__udivmodsi4_ep>
    1310:	a2 1b       	sub	r26, r18
    1312:	b3 0b       	sbc	r27, r19
    1314:	e4 0b       	sbc	r30, r20
    1316:	f5 0b       	sbc	r31, r21

00001318 <__udivmodsi4_ep>:
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	1a 94       	dec	r1
    1322:	69 f7       	brne	.-38     	; 0x12fe <__udivmodsi4_loop>
    1324:	60 95       	com	r22
    1326:	70 95       	com	r23
    1328:	80 95       	com	r24
    132a:	90 95       	com	r25
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	bd 01       	movw	r22, r26
    1332:	cf 01       	movw	r24, r30
    1334:	08 95       	ret

00001336 <__udivmodhi4>:
    1336:	aa 1b       	sub	r26, r26
    1338:	bb 1b       	sub	r27, r27
    133a:	51 e1       	ldi	r21, 0x11	; 17
    133c:	07 c0       	rjmp	.+14     	; 0x134c <__udivmodhi4_ep>

0000133e <__udivmodhi4_loop>:
    133e:	aa 1f       	adc	r26, r26
    1340:	bb 1f       	adc	r27, r27
    1342:	a6 17       	cp	r26, r22
    1344:	b7 07       	cpc	r27, r23
    1346:	10 f0       	brcs	.+4      	; 0x134c <__udivmodhi4_ep>
    1348:	a6 1b       	sub	r26, r22
    134a:	b7 0b       	sbc	r27, r23

0000134c <__udivmodhi4_ep>:
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	5a 95       	dec	r21
    1352:	a9 f7       	brne	.-22     	; 0x133e <__udivmodhi4_loop>
    1354:	80 95       	com	r24
    1356:	90 95       	com	r25
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	08 95       	ret

0000135e <__tablejump2__>:
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31

00001362 <__tablejump__>:
    1362:	05 90       	lpm	r0, Z+
    1364:	f4 91       	lpm	r31, Z+
    1366:	e0 2d       	mov	r30, r0
    1368:	09 94       	ijmp

0000136a <toupper>:
    136a:	91 11       	cpse	r25, r1
    136c:	08 95       	ret
    136e:	81 56       	subi	r24, 0x61	; 97
    1370:	8a 51       	subi	r24, 0x1A	; 26
    1372:	08 f4       	brcc	.+2      	; 0x1376 <toupper+0xc>
    1374:	80 52       	subi	r24, 0x20	; 32
    1376:	85 58       	subi	r24, 0x85	; 133
    1378:	08 95       	ret

0000137a <__do_global_dtors>:
    137a:	11 e0       	ldi	r17, 0x01	; 1
    137c:	cc ee       	ldi	r28, 0xEC	; 236
    137e:	d1 e0       	ldi	r29, 0x01	; 1
    1380:	04 c0       	rjmp	.+8      	; 0x138a <.do_global_dtors_start>

00001382 <.do_global_dtors_loop>:
    1382:	fe 01       	movw	r30, r28
    1384:	0e 94 b1 09 	call	0x1362	; 0x1362 <__tablejump__>
    1388:	22 96       	adiw	r28, 0x02	; 2

0000138a <.do_global_dtors_start>:
    138a:	ce 3e       	cpi	r28, 0xEE	; 238
    138c:	d1 07       	cpc	r29, r17
    138e:	c9 f7       	brne	.-14     	; 0x1382 <.do_global_dtors_loop>
    1390:	f8 94       	cli

00001392 <__stop_program>:
    1392:	ff cf       	rjmp	.-2      	; 0x1392 <__stop_program>

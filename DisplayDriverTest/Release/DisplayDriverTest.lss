
DisplayDriverTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  0000110e  000011a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  00800174  00800174  00001216  2**0
                  ALLOC
  3 .debug_aranges 000006c0  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001147  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008415  00000000  00000000  00002a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018c9  00000000  00000000  0000ae32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003725  00000000  00000000  0000c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c20  00000000  00000000  0000fe20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d4f  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000045f9  00000000  00000000  0001278f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000698  00000000  00000000  00016d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	// Set data, if not over end of buffer
	if (i < getSize())
		retVal = _buff[i];

	return retVal;
}
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__dtors_end>
 */

#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _kerning(0), _spacing(0), _color(WHITE){}
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
SimpleFont::SimpleFont(Buffer* buff) : Font(buff) {
	_kerning = 1;
	_spacing = _height + 1;
}

SimpleFont::~SimpleFont() {}
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_16>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_18>
      4c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_19>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
      68:	7f 03       	fmul	r23, r23
      6a:	5d 06       	cpc	r5, r29

0000006c <__ctors_end>:
      6c:	78 03       	fmul	r23, r16

0000006e <__dtors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d4 e0       	ldi	r29, 0x04	; 4
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	ee e0       	ldi	r30, 0x0E	; 14
      82:	f1 e1       	ldi	r31, 0x11	; 17
      84:	02 c0       	rjmp	.+4      	; 0x8a <.do_copy_data_start>

00000086 <.do_copy_data_loop>:
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0

0000008a <.do_copy_data_start>:
      8a:	a4 37       	cpi	r26, 0x74	; 116
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <.do_copy_data_loop>

00000090 <__do_clear_bss>:
      90:	12 e0       	ldi	r17, 0x02	; 2
      92:	a4 e7       	ldi	r26, 0x74	; 116
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	ab 35       	cpi	r26, 0x5B	; 91
      9c:	b1 07       	cpc	r27, r17
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	cc e6       	ldi	r28, 0x6C	; 108
      a4:	d0 e0       	ldi	r29, 0x00	; 0
      a6:	04 c0       	rjmp	.+8      	; 0xb0 <.do_global_ctors_start>

000000a8 <.do_global_ctors_loop>:
      a8:	22 97       	sbiw	r28, 0x02	; 2
      aa:	fe 01       	movw	r30, r28
      ac:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__tablejump__>

000000b0 <.do_global_ctors_start>:
      b0:	c8 36       	cpi	r28, 0x68	; 104
      b2:	d1 07       	cpc	r29, r17
      b4:	c9 f7       	brne	.-14     	; 0xa8 <.do_global_ctors_loop>
      b6:	0e 94 34 07 	call	0xe68	; 0xe68 <main>
      ba:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__do_global_dtors>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <malloc>:
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	bc 01       	movw	r22, r24
      c8:	82 30       	cpi	r24, 0x02	; 2
      ca:	91 05       	cpc	r25, r1
      cc:	10 f4       	brcc	.+4      	; 0xd2 <malloc+0x10>
      ce:	62 e0       	ldi	r22, 0x02	; 2
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	a0 91 59 02 	lds	r26, 0x0259
      d6:	b0 91 5a 02 	lds	r27, 0x025A
      da:	ed 01       	movw	r28, r26
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	40 e0       	ldi	r20, 0x00	; 0
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	21 c0       	rjmp	.+66     	; 0x128 <malloc+0x66>
      e6:	88 81       	ld	r24, Y
      e8:	99 81       	ldd	r25, Y+1	; 0x01
      ea:	86 17       	cp	r24, r22
      ec:	97 07       	cpc	r25, r23
      ee:	69 f4       	brne	.+26     	; 0x10a <malloc+0x48>
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	9b 81       	ldd	r25, Y+3	; 0x03
      f4:	30 97       	sbiw	r30, 0x00	; 0
      f6:	19 f0       	breq	.+6      	; 0xfe <malloc+0x3c>
      f8:	93 83       	std	Z+3, r25	; 0x03
      fa:	82 83       	std	Z+2, r24	; 0x02
      fc:	04 c0       	rjmp	.+8      	; 0x106 <malloc+0x44>
      fe:	90 93 5a 02 	sts	0x025A, r25
     102:	80 93 59 02 	sts	0x0259, r24
     106:	fe 01       	movw	r30, r28
     108:	34 c0       	rjmp	.+104    	; 0x172 <malloc+0xb0>
     10a:	68 17       	cp	r22, r24
     10c:	79 07       	cpc	r23, r25
     10e:	38 f4       	brcc	.+14     	; 0x11e <malloc+0x5c>
     110:	41 15       	cp	r20, r1
     112:	51 05       	cpc	r21, r1
     114:	19 f0       	breq	.+6      	; 0x11c <malloc+0x5a>
     116:	84 17       	cp	r24, r20
     118:	95 07       	cpc	r25, r21
     11a:	08 f4       	brcc	.+2      	; 0x11e <malloc+0x5c>
     11c:	ac 01       	movw	r20, r24
     11e:	fe 01       	movw	r30, r28
     120:	8a 81       	ldd	r24, Y+2	; 0x02
     122:	9b 81       	ldd	r25, Y+3	; 0x03
     124:	9c 01       	movw	r18, r24
     126:	e9 01       	movw	r28, r18
     128:	20 97       	sbiw	r28, 0x00	; 0
     12a:	e9 f6       	brne	.-70     	; 0xe6 <malloc+0x24>
     12c:	41 15       	cp	r20, r1
     12e:	51 05       	cpc	r21, r1
     130:	a9 f1       	breq	.+106    	; 0x19c <malloc+0xda>
     132:	ca 01       	movw	r24, r20
     134:	86 1b       	sub	r24, r22
     136:	97 0b       	sbc	r25, r23
     138:	04 97       	sbiw	r24, 0x04	; 4
     13a:	08 f4       	brcc	.+2      	; 0x13e <malloc+0x7c>
     13c:	ba 01       	movw	r22, r20
     13e:	e0 e0       	ldi	r30, 0x00	; 0
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	2a c0       	rjmp	.+84     	; 0x198 <malloc+0xd6>
     144:	8d 91       	ld	r24, X+
     146:	9c 91       	ld	r25, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	84 17       	cp	r24, r20
     14c:	95 07       	cpc	r25, r21
     14e:	f9 f4       	brne	.+62     	; 0x18e <malloc+0xcc>
     150:	64 17       	cp	r22, r20
     152:	75 07       	cpc	r23, r21
     154:	81 f4       	brne	.+32     	; 0x176 <malloc+0xb4>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	8d 91       	ld	r24, X+
     15a:	9c 91       	ld	r25, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	30 97       	sbiw	r30, 0x00	; 0
     160:	19 f0       	breq	.+6      	; 0x168 <malloc+0xa6>
     162:	93 83       	std	Z+3, r25	; 0x03
     164:	82 83       	std	Z+2, r24	; 0x02
     166:	04 c0       	rjmp	.+8      	; 0x170 <malloc+0xae>
     168:	90 93 5a 02 	sts	0x025A, r25
     16c:	80 93 59 02 	sts	0x0259, r24
     170:	fd 01       	movw	r30, r26
     172:	32 96       	adiw	r30, 0x02	; 2
     174:	4c c0       	rjmp	.+152    	; 0x20e <malloc+0x14c>
     176:	ca 01       	movw	r24, r20
     178:	86 1b       	sub	r24, r22
     17a:	97 0b       	sbc	r25, r23
     17c:	fd 01       	movw	r30, r26
     17e:	e8 0f       	add	r30, r24
     180:	f9 1f       	adc	r31, r25
     182:	61 93       	st	Z+, r22
     184:	71 93       	st	Z+, r23
     186:	02 97       	sbiw	r24, 0x02	; 2
     188:	8d 93       	st	X+, r24
     18a:	9c 93       	st	X, r25
     18c:	40 c0       	rjmp	.+128    	; 0x20e <malloc+0x14c>
     18e:	fd 01       	movw	r30, r26
     190:	82 81       	ldd	r24, Z+2	; 0x02
     192:	93 81       	ldd	r25, Z+3	; 0x03
     194:	9c 01       	movw	r18, r24
     196:	d9 01       	movw	r26, r18
     198:	10 97       	sbiw	r26, 0x00	; 0
     19a:	a1 f6       	brne	.-88     	; 0x144 <malloc+0x82>
     19c:	80 91 57 02 	lds	r24, 0x0257
     1a0:	90 91 58 02 	lds	r25, 0x0258
     1a4:	89 2b       	or	r24, r25
     1a6:	41 f4       	brne	.+16     	; 0x1b8 <malloc+0xf6>
     1a8:	80 91 03 01 	lds	r24, 0x0103
     1ac:	90 91 04 01 	lds	r25, 0x0104
     1b0:	90 93 58 02 	sts	0x0258, r25
     1b4:	80 93 57 02 	sts	0x0257, r24
     1b8:	40 91 05 01 	lds	r20, 0x0105
     1bc:	50 91 06 01 	lds	r21, 0x0106
     1c0:	41 15       	cp	r20, r1
     1c2:	51 05       	cpc	r21, r1
     1c4:	41 f4       	brne	.+16     	; 0x1d6 <malloc+0x114>
     1c6:	4d b7       	in	r20, 0x3d	; 61
     1c8:	5e b7       	in	r21, 0x3e	; 62
     1ca:	80 91 01 01 	lds	r24, 0x0101
     1ce:	90 91 02 01 	lds	r25, 0x0102
     1d2:	48 1b       	sub	r20, r24
     1d4:	59 0b       	sbc	r21, r25
     1d6:	20 91 57 02 	lds	r18, 0x0257
     1da:	30 91 58 02 	lds	r19, 0x0258
     1de:	ca 01       	movw	r24, r20
     1e0:	82 1b       	sub	r24, r18
     1e2:	93 0b       	sbc	r25, r19
     1e4:	86 17       	cp	r24, r22
     1e6:	97 07       	cpc	r25, r23
     1e8:	80 f0       	brcs	.+32     	; 0x20a <malloc+0x148>
     1ea:	ab 01       	movw	r20, r22
     1ec:	4e 5f       	subi	r20, 0xFE	; 254
     1ee:	5f 4f       	sbci	r21, 0xFF	; 255
     1f0:	84 17       	cp	r24, r20
     1f2:	95 07       	cpc	r25, r21
     1f4:	50 f0       	brcs	.+20     	; 0x20a <malloc+0x148>
     1f6:	42 0f       	add	r20, r18
     1f8:	53 1f       	adc	r21, r19
     1fa:	50 93 58 02 	sts	0x0258, r21
     1fe:	40 93 57 02 	sts	0x0257, r20
     202:	f9 01       	movw	r30, r18
     204:	61 93       	st	Z+, r22
     206:	71 93       	st	Z+, r23
     208:	02 c0       	rjmp	.+4      	; 0x20e <malloc+0x14c>
     20a:	e0 e0       	ldi	r30, 0x00	; 0
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	cf 01       	movw	r24, r30
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <free>:
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	09 f4       	brne	.+2      	; 0x220 <free+0xa>
     21e:	50 c0       	rjmp	.+160    	; 0x2c0 <free+0xaa>
     220:	ec 01       	movw	r28, r24
     222:	22 97       	sbiw	r28, 0x02	; 2
     224:	1b 82       	std	Y+3, r1	; 0x03
     226:	1a 82       	std	Y+2, r1	; 0x02
     228:	a0 91 59 02 	lds	r26, 0x0259
     22c:	b0 91 5a 02 	lds	r27, 0x025A
     230:	10 97       	sbiw	r26, 0x00	; 0
     232:	09 f1       	breq	.+66     	; 0x276 <free+0x60>
     234:	40 e0       	ldi	r20, 0x00	; 0
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	ac 17       	cp	r26, r28
     23a:	bd 07       	cpc	r27, r29
     23c:	08 f1       	brcs	.+66     	; 0x280 <free+0x6a>
     23e:	bb 83       	std	Y+3, r27	; 0x03
     240:	aa 83       	std	Y+2, r26	; 0x02
     242:	fe 01       	movw	r30, r28
     244:	21 91       	ld	r18, Z+
     246:	31 91       	ld	r19, Z+
     248:	e2 0f       	add	r30, r18
     24a:	f3 1f       	adc	r31, r19
     24c:	ae 17       	cp	r26, r30
     24e:	bf 07       	cpc	r27, r31
     250:	79 f4       	brne	.+30     	; 0x270 <free+0x5a>
     252:	8d 91       	ld	r24, X+
     254:	9c 91       	ld	r25, X
     256:	11 97       	sbiw	r26, 0x01	; 1
     258:	28 0f       	add	r18, r24
     25a:	39 1f       	adc	r19, r25
     25c:	2e 5f       	subi	r18, 0xFE	; 254
     25e:	3f 4f       	sbci	r19, 0xFF	; 255
     260:	39 83       	std	Y+1, r19	; 0x01
     262:	28 83       	st	Y, r18
     264:	12 96       	adiw	r26, 0x02	; 2
     266:	8d 91       	ld	r24, X+
     268:	9c 91       	ld	r25, X
     26a:	13 97       	sbiw	r26, 0x03	; 3
     26c:	9b 83       	std	Y+3, r25	; 0x03
     26e:	8a 83       	std	Y+2, r24	; 0x02
     270:	41 15       	cp	r20, r1
     272:	51 05       	cpc	r21, r1
     274:	71 f4       	brne	.+28     	; 0x292 <free+0x7c>
     276:	d0 93 5a 02 	sts	0x025A, r29
     27a:	c0 93 59 02 	sts	0x0259, r28
     27e:	20 c0       	rjmp	.+64     	; 0x2c0 <free+0xaa>
     280:	12 96       	adiw	r26, 0x02	; 2
     282:	8d 91       	ld	r24, X+
     284:	9c 91       	ld	r25, X
     286:	13 97       	sbiw	r26, 0x03	; 3
     288:	ad 01       	movw	r20, r26
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	11 f0       	breq	.+4      	; 0x292 <free+0x7c>
     28e:	dc 01       	movw	r26, r24
     290:	d3 cf       	rjmp	.-90     	; 0x238 <free+0x22>
     292:	fa 01       	movw	r30, r20
     294:	d3 83       	std	Z+3, r29	; 0x03
     296:	c2 83       	std	Z+2, r28	; 0x02
     298:	21 91       	ld	r18, Z+
     29a:	31 91       	ld	r19, Z+
     29c:	e2 0f       	add	r30, r18
     29e:	f3 1f       	adc	r31, r19
     2a0:	ce 17       	cp	r28, r30
     2a2:	df 07       	cpc	r29, r31
     2a4:	69 f4       	brne	.+26     	; 0x2c0 <free+0xaa>
     2a6:	88 81       	ld	r24, Y
     2a8:	99 81       	ldd	r25, Y+1	; 0x01
     2aa:	28 0f       	add	r18, r24
     2ac:	39 1f       	adc	r19, r25
     2ae:	2e 5f       	subi	r18, 0xFE	; 254
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	fa 01       	movw	r30, r20
     2b4:	31 83       	std	Z+1, r19	; 0x01
     2b6:	20 83       	st	Z, r18
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ba:	9b 81       	ldd	r25, Y+3	; 0x03
     2bc:	93 83       	std	Z+3, r25	; 0x03
     2be:	82 83       	std	Z+2, r24	; 0x02
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <memset>:
     2c6:	dc 01       	movw	r26, r24
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <memset+0x6>
     2ca:	6d 93       	st	X+, r22
     2cc:	41 50       	subi	r20, 0x01	; 1
     2ce:	50 40       	sbci	r21, 0x00	; 0
     2d0:	e0 f7       	brcc	.-8      	; 0x2ca <memset+0x4>
     2d2:	08 95       	ret

000002d4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>:
		// Print an end-line for each row
		Serial.println("");
	}
}

void Buffer::setBit(int x, int y, Color color) {
     2d4:	fc 01       	movw	r30, r24
     2d6:	d9 01       	movw	r26, r18

	// Check input variables
	if (x > _width || x < 0 || y > _height || y < 0)
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	86 17       	cp	r24, r22
     2de:	97 07       	cpc	r25, r23
     2e0:	a4 f1       	brlt	.+104    	; 0x34a <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     2e2:	77 fd       	sbrc	r23, 7
     2e4:	32 c0       	rjmp	.+100    	; 0x34a <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     2e6:	82 81       	ldd	r24, Z+2	; 0x02
     2e8:	93 81       	ldd	r25, Z+3	; 0x03
     2ea:	84 17       	cp	r24, r20
     2ec:	95 07       	cpc	r25, r21
     2ee:	6c f1       	brlt	.+90     	; 0x34a <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
     2f0:	57 fd       	sbrc	r21, 7
     2f2:	2b c0       	rjmp	.+86     	; 0x34a <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x76>
		return;

	// Get byte pointer that contains the bit
	uint8_t* bitBytePtr = _buff + (_pitchBytes * y) + (x / 8);
     2f4:	84 81       	ldd	r24, Z+4	; 0x04
     2f6:	95 81       	ldd	r25, Z+5	; 0x05
     2f8:	9c 01       	movw	r18, r24
     2fa:	42 9f       	mul	r20, r18
     2fc:	c0 01       	movw	r24, r0
     2fe:	43 9f       	mul	r20, r19
     300:	90 0d       	add	r25, r0
     302:	52 9f       	mul	r21, r18
     304:	90 0d       	add	r25, r0
     306:	11 24       	eor	r1, r1
     308:	9b 01       	movw	r18, r22
     30a:	43 e0       	ldi	r20, 0x03	; 3
     30c:	35 95       	asr	r19
     30e:	27 95       	ror	r18
     310:	4a 95       	dec	r20
     312:	e1 f7       	brne	.-8      	; 0x30c <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x38>
     314:	82 0f       	add	r24, r18
     316:	93 1f       	adc	r25, r19
     318:	06 80       	ldd	r0, Z+6	; 0x06
     31a:	f7 81       	ldd	r31, Z+7	; 0x07
     31c:	e0 2d       	mov	r30, r0
     31e:	e8 0f       	add	r30, r24
     320:	f9 1f       	adc	r31, r25

	// Shift over the bit to change
	uint8_t bit = 0x01 << (7 - (x % 8));
     322:	60 95       	com	r22
     324:	70 95       	com	r23
     326:	67 70       	andi	r22, 0x07	; 7
     328:	70 70       	andi	r23, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	02 c0       	rjmp	.+4      	; 0x334 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x60>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	6a 95       	dec	r22
     336:	e2 f7       	brpl	.-8      	; 0x330 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x5c>
     338:	20 81       	ld	r18, Z

	if (color == WHITE) {
     33a:	11 97       	sbiw	r26, 0x01	; 1
     33c:	19 f4       	brne	.+6      	; 0x344 <_ZN7Display6Buffer6setBitEiiNS_5ColorE+0x70>
		*bitBytePtr |= bit;  // set the bit
     33e:	28 2b       	or	r18, r24
     340:	20 83       	st	Z, r18
     342:	08 95       	ret
	} else {
		*bitBytePtr &= ~bit; // clear the bit
     344:	80 95       	com	r24
     346:	28 23       	and	r18, r24
     348:	20 83       	st	Z, r18
     34a:	08 95       	ret

0000034c <_ZN7Display6Buffer6getBitEii>:
	}
}

Color Buffer::getBit(int x, int y) {
     34c:	fc 01       	movw	r30, r24

	// Check input variables
	if (x > _width || x < 0 || y > _height || y < 0)
     34e:	80 81       	ld	r24, Z
     350:	91 81       	ldd	r25, Z+1	; 0x01
     352:	86 17       	cp	r24, r22
     354:	97 07       	cpc	r25, r23
     356:	4c f0       	brlt	.+18     	; 0x36a <_ZN7Display6Buffer6getBitEii+0x1e>
     358:	77 fd       	sbrc	r23, 7
     35a:	07 c0       	rjmp	.+14     	; 0x36a <_ZN7Display6Buffer6getBitEii+0x1e>
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	84 17       	cp	r24, r20
     362:	95 07       	cpc	r25, r21
     364:	14 f0       	brlt	.+4      	; 0x36a <_ZN7Display6Buffer6getBitEii+0x1e>
     366:	57 ff       	sbrs	r21, 7
     368:	03 c0       	rjmp	.+6      	; 0x370 <_ZN7Display6Buffer6getBitEii+0x24>
		return _color;
     36a:	80 85       	ldd	r24, Z+8	; 0x08
     36c:	91 85       	ldd	r25, Z+9	; 0x09
     36e:	08 95       	ret
     370:	84 81       	ldd	r24, Z+4	; 0x04
     372:	95 81       	ldd	r25, Z+5	; 0x05
     374:	9c 01       	movw	r18, r24
     376:	42 9f       	mul	r20, r18
     378:	c0 01       	movw	r24, r0
     37a:	43 9f       	mul	r20, r19
     37c:	90 0d       	add	r25, r0
     37e:	52 9f       	mul	r21, r18
     380:	90 0d       	add	r25, r0
     382:	11 24       	eor	r1, r1
     384:	9b 01       	movw	r18, r22
     386:	53 e0       	ldi	r21, 0x03	; 3
     388:	35 95       	asr	r19
     38a:	27 95       	ror	r18
     38c:	5a 95       	dec	r21
     38e:	e1 f7       	brne	.-8      	; 0x388 <_ZN7Display6Buffer6getBitEii+0x3c>
     390:	06 80       	ldd	r0, Z+6	; 0x06
     392:	f7 81       	ldd	r31, Z+7	; 0x07
     394:	e0 2d       	mov	r30, r0
     396:	e8 0f       	add	r30, r24
     398:	f9 1f       	adc	r31, r25
     39a:	e2 0f       	add	r30, r18
     39c:	f3 1f       	adc	r31, r19
     39e:	80 81       	ld	r24, Z
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	67 70       	andi	r22, 0x07	; 7
     3a4:	70 70       	andi	r23, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <_ZN7Display6Buffer6getBitEii+0x60>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	6a 95       	dec	r22
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <_ZN7Display6Buffer6getBitEii+0x5c>
     3b0:	88 1f       	adc	r24, r24
     3b2:	88 27       	eor	r24, r24
     3b4:	88 1f       	adc	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0

	// Shift the byte to extract the desired bit
	uint8_t bit = (bitByte << (x % 8)) & 0x80;

	return bit ? WHITE : BLACK;
}
     3b8:	08 95       	ret

000003ba <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj>:
			setBit(lastBitsX + i, y, color);
	}
}

void Buffer::memsetColor(uint8_t* buff, Color color, size_t bytes) {
	uint8_t writeVal = (color == WHITE) ? 0xFF : 0x00;
     3ba:	41 30       	cpi	r20, 0x01	; 1
     3bc:	51 05       	cpc	r21, r1
     3be:	11 f0       	breq	.+4      	; 0x3c4 <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj+0xa>
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj+0xc>
     3c4:	4f ef       	ldi	r20, 0xFF	; 255
	memset(buff, writeVal, bytes);
     3c6:	cb 01       	movw	r24, r22
     3c8:	64 2f       	mov	r22, r20
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	a9 01       	movw	r20, r18
     3ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <memset>
}
     3d2:	08 95       	ret

000003d4 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE>:
	}

	return bits1 | bits2;
}

void Buffer::fastHLine(int x, int y, int width, Color color) {
     3d4:	2f 92       	push	r2
     3d6:	3f 92       	push	r3
     3d8:	4f 92       	push	r4
     3da:	5f 92       	push	r5
     3dc:	6f 92       	push	r6
     3de:	7f 92       	push	r7
     3e0:	8f 92       	push	r8
     3e2:	9f 92       	push	r9
     3e4:	af 92       	push	r10
     3e6:	bf 92       	push	r11
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	df 93       	push	r29
     3f6:	cf 93       	push	r28
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x26>
     3fa:	0f 92       	push	r0
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	5c 01       	movw	r10, r24
     402:	7b 83       	std	Y+3, r23	; 0x03
     404:	6a 83       	std	Y+2, r22	; 0x02
     406:	2a 01       	movw	r4, r20
     408:	79 01       	movw	r14, r18
     40a:	18 01       	movw	r2, r16

	// Handle out-of-bounds X
	if (x > _width)
     40c:	dc 01       	movw	r26, r24
     40e:	ed 91       	ld	r30, X+
     410:	fc 91       	ld	r31, X
     412:	11 97       	sbiw	r26, 0x01	; 1
     414:	e6 17       	cp	r30, r22
     416:	f7 07       	cpc	r31, r23
     418:	0c f4       	brge	.+2      	; 0x41c <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x48>
     41a:	b5 c0       	rjmp	.+362    	; 0x586 <__stack+0x87>
		return;

	// Handle out-of-bounds Y
	if (y < 0 || y >= _height)
     41c:	57 fd       	sbrc	r21, 7
     41e:	b3 c0       	rjmp	.+358    	; 0x586 <__stack+0x87>
     420:	12 96       	adiw	r26, 0x02	; 2
     422:	8d 91       	ld	r24, X+
     424:	9c 91       	ld	r25, X
     426:	13 97       	sbiw	r26, 0x03	; 3
     428:	48 17       	cp	r20, r24
     42a:	59 07       	cpc	r21, r25
     42c:	0c f0       	brlt	.+2      	; 0x430 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x5c>
     42e:	ab c0       	rjmp	.+342    	; 0x586 <__stack+0x87>
		return;

	// Handle 0-width
	if (width == 0)
     430:	21 15       	cp	r18, r1
     432:	31 05       	cpc	r19, r1
     434:	09 f4       	brne	.+2      	; 0x438 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x64>
     436:	a7 c0       	rjmp	.+334    	; 0x586 <__stack+0x87>
		return;

	// Handle negative width
	if (width < 0) {
     438:	37 ff       	sbrs	r19, 7
     43a:	09 c0       	rjmp	.+18     	; 0x44e <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x7a>
		width = abs(width);
     43c:	f0 94       	com	r15
     43e:	e1 94       	neg	r14
     440:	f1 08       	sbc	r15, r1
     442:	f3 94       	inc	r15
		x -= width;
     444:	ab 01       	movw	r20, r22
     446:	4e 19       	sub	r20, r14
     448:	5f 09       	sbc	r21, r15
     44a:	5b 83       	std	Y+3, r21	; 0x03
     44c:	4a 83       	std	Y+2, r20	; 0x02
	}

	// Handle negative X
	if (x < 0) {
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	9b 81       	ldd	r25, Y+3	; 0x03
     452:	97 ff       	sbrs	r25, 7
     454:	06 c0       	rjmp	.+12     	; 0x462 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x8e>
		if (x + width < 0)
     456:	e8 0e       	add	r14, r24
     458:	f9 1e       	adc	r15, r25
     45a:	f7 fc       	sbrc	r15, 7
     45c:	94 c0       	rjmp	.+296    	; 0x586 <__stack+0x87>
			return;
     45e:	1b 82       	std	Y+3, r1	; 0x03
     460:	1a 82       	std	Y+2, r1	; 0x02
		width = x + width;
		x = 0;
	}

	// Handle out-of-bounds width
	if (x + width > _width)
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	9b 81       	ldd	r25, Y+3	; 0x03
     466:	8e 0d       	add	r24, r14
     468:	9f 1d       	adc	r25, r15
     46a:	e8 17       	cp	r30, r24
     46c:	f9 07       	cpc	r31, r25
     46e:	2c f4       	brge	.+10     	; 0x47a <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xa6>
		width = _width - x;
     470:	7f 01       	movw	r14, r30
     472:	aa 81       	ldd	r26, Y+2	; 0x02
     474:	bb 81       	ldd	r27, Y+3	; 0x03
     476:	ea 1a       	sub	r14, r26
     478:	fb 0a       	sbc	r15, r27

	// Calculate indexes
	uint8_t startRem = x % 8;
     47a:	2a 81       	ldd	r18, Y+2	; 0x02
     47c:	3b 81       	ldd	r19, Y+3	; 0x03
     47e:	27 70       	andi	r18, 0x07	; 7
     480:	30 70       	andi	r19, 0x00	; 0
     482:	62 2e       	mov	r6, r18
	uint8_t endRem = (x + width) % 8;
     484:	8a 80       	ldd	r8, Y+2	; 0x02
     486:	9b 80       	ldd	r9, Y+3	; 0x03
     488:	8e 0c       	add	r8, r14
     48a:	9f 1c       	adc	r9, r15
     48c:	c4 01       	movw	r24, r8
     48e:	68 e0       	ldi	r22, 0x08	; 8
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	0e 94 23 08 	call	0x1046	; 0x1046 <__divmodhi4>
     496:	89 83       	std	Y+1, r24	; 0x01

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
     498:	22 23       	and	r18, r18
     49a:	59 f4       	brne	.+22     	; 0x4b2 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xde>
     49c:	b8 e0       	ldi	r27, 0x08	; 8
     49e:	eb 16       	cp	r14, r27
     4a0:	f1 04       	cpc	r15, r1
     4a2:	3c f0       	brlt	.+14     	; 0x4b2 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xde>
     4a4:	77 24       	eor	r7, r7
     4a6:	e8 15       	cp	r30, r8
     4a8:	f9 05       	cpc	r31, r9
     4aa:	24 f0       	brlt	.+8      	; 0x4b4 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xe0>
     4ac:	77 24       	eor	r7, r7
     4ae:	73 94       	inc	r7
     4b0:	1a c0       	rjmp	.+52     	; 0x4e6 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x112>
     4b2:	77 24       	eor	r7, r7
	if (!fullByte1) {
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
		for (int i = 0; (i < width) && (i < 8-startRem); i++)
     4b8:	b8 e0       	ldi	r27, 0x08	; 8
     4ba:	cb 2e       	mov	r12, r27
     4bc:	d1 2c       	mov	r13, r1
     4be:	c6 18       	sub	r12, r6
     4c0:	d1 08       	sbc	r13, r1
     4c2:	0b c0       	rjmp	.+22     	; 0x4da <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x106>
			setBit(x + i, y, color);
     4c4:	6a 81       	ldd	r22, Y+2	; 0x02
     4c6:	7b 81       	ldd	r23, Y+3	; 0x03
     4c8:	60 0f       	add	r22, r16
     4ca:	71 1f       	adc	r23, r17
     4cc:	c5 01       	movw	r24, r10
     4ce:	a2 01       	movw	r20, r4
     4d0:	91 01       	movw	r18, r2
     4d2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>
	uint8_t endRem = (x + width) % 8;

	// Write first non-byte-aligned bits (slow)
	uint8_t fullByte1 = (startRem == 0) && (width >= 8) && (x + width <= _width);
	if (!fullByte1) {
		for (int i = 0; (i < width) && (i < 8-startRem); i++)
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	0e 15       	cp	r16, r14
     4dc:	1f 05       	cpc	r17, r15
     4de:	1c f4       	brge	.+6      	; 0x4e6 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0x112>
     4e0:	0c 15       	cp	r16, r12
     4e2:	1d 05       	cpc	r17, r13
     4e4:	7c f3       	brlt	.-34     	; 0x4c4 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE+0xf0>
			setBit(x + i, y, color);
	}

	// Write the middle byte-aligned 8-bit blocks (fast)
	uint8_t nMiddleBytes = (width - (8-startRem) - endRem) / 8 + fullByte1;
     4e6:	06 2d       	mov	r16, r6
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	e9 81       	ldd	r30, Y+1	; 0x01
     4ec:	ce 2e       	mov	r12, r30
     4ee:	dd 24       	eor	r13, r13
     4f0:	c8 01       	movw	r24, r16
     4f2:	08 97       	sbiw	r24, 0x08	; 8
     4f4:	8e 0d       	add	r24, r14
     4f6:	9f 1d       	adc	r25, r15
     4f8:	8c 19       	sub	r24, r12
     4fa:	9d 09       	sbc	r25, r13
     4fc:	68 e0       	ldi	r22, 0x08	; 8
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 23 08 	call	0x1046	; 0x1046 <__divmodhi4>
     504:	26 2f       	mov	r18, r22
     506:	27 0d       	add	r18, r7
	if (nMiddleBytes > 0) {
     508:	19 f1       	breq	.+70     	; 0x550 <__stack+0x51>
		uint8_t* middleByte = _buff + (y * _pitchBytes) + ((x + 7) / 8);
		memsetColor(middleByte, color, nMiddleBytes);
     50a:	4a 81       	ldd	r20, Y+2	; 0x02
     50c:	5b 81       	ldd	r21, Y+3	; 0x03
     50e:	49 5f       	subi	r20, 0xF9	; 249
     510:	5f 4f       	sbci	r21, 0xFF	; 255
     512:	a3 e0       	ldi	r26, 0x03	; 3
     514:	55 95       	asr	r21
     516:	47 95       	ror	r20
     518:	aa 95       	dec	r26
     51a:	e1 f7       	brne	.-8      	; 0x514 <__stack+0x15>
     51c:	d5 01       	movw	r26, r10
     51e:	14 96       	adiw	r26, 0x04	; 4
     520:	8d 91       	ld	r24, X+
     522:	9c 91       	ld	r25, X
     524:	15 97       	sbiw	r26, 0x05	; 5
     526:	fc 01       	movw	r30, r24
     528:	4e 9e       	mul	r4, r30
     52a:	c0 01       	movw	r24, r0
     52c:	4f 9e       	mul	r4, r31
     52e:	90 0d       	add	r25, r0
     530:	5e 9e       	mul	r5, r30
     532:	90 0d       	add	r25, r0
     534:	11 24       	eor	r1, r1
     536:	84 0f       	add	r24, r20
     538:	95 1f       	adc	r25, r21
     53a:	16 96       	adiw	r26, 0x06	; 6
     53c:	6d 91       	ld	r22, X+
     53e:	7c 91       	ld	r23, X
     540:	17 97       	sbiw	r26, 0x07	; 7
     542:	68 0f       	add	r22, r24
     544:	79 1f       	adc	r23, r25
     546:	c5 01       	movw	r24, r10
     548:	a1 01       	movw	r20, r2
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_ZN7Display6Buffer11memsetColorEPhNS_5ColorEj>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
     550:	f9 81       	ldd	r31, Y+1	; 0x01
     552:	ff 23       	and	r31, r31
     554:	c1 f0       	breq	.+48     	; 0x586 <__stack+0x87>
     556:	0e 0d       	add	r16, r14
     558:	1f 1d       	adc	r17, r15
     55a:	09 30       	cpi	r16, 0x09	; 9
     55c:	11 05       	cpc	r17, r1
     55e:	9c f0       	brlt	.+38     	; 0x586 <__stack+0x87>
		int lastBitsX = x + width - endRem;
     560:	74 01       	movw	r14, r8
     562:	ec 18       	sub	r14, r12
     564:	fd 08       	sbc	r15, r13
     566:	00 e0       	ldi	r16, 0x00	; 0
     568:	10 e0       	ldi	r17, 0x00	; 0
     56a:	0a c0       	rjmp	.+20     	; 0x580 <__stack+0x81>
		for (int i = 0; i < endRem; i++)
			setBit(lastBitsX + i, y, color);
     56c:	b8 01       	movw	r22, r16
     56e:	6e 0d       	add	r22, r14
     570:	7f 1d       	adc	r23, r15
     572:	c5 01       	movw	r24, r10
     574:	a2 01       	movw	r20, r4
     576:	91 01       	movw	r18, r2
     578:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>
	}

	// Write last non-byte-aligned bits (slow)
	if (endRem > 0 && (startRem + width) > 8) {
		int lastBitsX = x + width - endRem;
		for (int i = 0; i < endRem; i++)
     57c:	0f 5f       	subi	r16, 0xFF	; 255
     57e:	1f 4f       	sbci	r17, 0xFF	; 255
     580:	0c 15       	cp	r16, r12
     582:	1d 05       	cpc	r17, r13
     584:	9c f3       	brlt	.-26     	; 0x56c <__stack+0x6d>
			setBit(lastBitsX + i, y, color);
	}
}
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	cf 91       	pop	r28
     58e:	df 91       	pop	r29
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	bf 90       	pop	r11
     59e:	af 90       	pop	r10
     5a0:	9f 90       	pop	r9
     5a2:	8f 90       	pop	r8
     5a4:	7f 90       	pop	r7
     5a6:	6f 90       	pop	r6
     5a8:	5f 90       	pop	r5
     5aa:	4f 90       	pop	r4
     5ac:	3f 90       	pop	r3
     5ae:	2f 90       	pop	r2
     5b0:	08 95       	ret

000005b2 <_ZN7Display6Buffer5clearENS_5ColorE>:

void Buffer::clear() {
	clear(_color);
}

void Buffer::clear(Color color) {
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	7c 01       	movw	r14, r24
     5c4:	6b 01       	movw	r12, r22
     5c6:	c0 e0       	ldi	r28, 0x00	; 0
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_ZN7Display6Buffer5clearENS_5ColorE+0x30>

	for (int y = 0; y < _height; y++)
		fastHLine(0, y, _width, color);
     5cc:	f7 01       	movw	r30, r14
     5ce:	20 81       	ld	r18, Z
     5d0:	31 81       	ldd	r19, Z+1	; 0x01
     5d2:	c7 01       	movw	r24, r14
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	ae 01       	movw	r20, r28
     5da:	86 01       	movw	r16, r12
     5dc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_ZN7Display6Buffer9fastHLineEiiiNS_5ColorE>
	clear(_color);
}

void Buffer::clear(Color color) {

	for (int y = 0; y < _height; y++)
     5e0:	21 96       	adiw	r28, 0x01	; 1
     5e2:	f7 01       	movw	r30, r14
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	c8 17       	cp	r28, r24
     5ea:	d9 07       	cpc	r29, r25
     5ec:	7c f3       	brlt	.-34     	; 0x5cc <_ZN7Display6Buffer5clearENS_5ColorE+0x1a>
		fastHLine(0, y, _width, color);
}
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <_ZN7Display6BufferC1EiiiPh>:
 *  \param pitchBytes The number of bytes provided for each row.
 *  	This must be at least floor( (width + 7)/8 ) bytes
 *  \param buff pointer to the display buffer array
 */
Buffer::Buffer(const int width, const int height, const int pitchBytes,
		uint8_t* buff) :
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	fc 01       	movw	r30, r24
		_width(width), _height(height), _pitchBytes(pitchBytes), _buff(buff), _color(BLACK) {
     606:	71 83       	std	Z+1, r23	; 0x01
     608:	60 83       	st	Z, r22
     60a:	53 83       	std	Z+3, r21	; 0x03
     60c:	42 83       	std	Z+2, r20	; 0x02
     60e:	35 83       	std	Z+5, r19	; 0x05
     610:	24 83       	std	Z+4, r18	; 0x04
     612:	17 83       	std	Z+7, r17	; 0x07
     614:	06 83       	std	Z+6, r16	; 0x06
     616:	11 86       	std	Z+9, r1	; 0x09
     618:	10 86       	std	Z+8, r1	; 0x08
	clear(_color);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN7Display6Buffer5clearENS_5ColorE>
}
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <_ZN7Display6Buffer11printSerialEcc>:

/**
 * Prints out the buffer to the serial port.  Note that the
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	7c 01       	movw	r14, r24
     63a:	c6 2e       	mov	r12, r22
     63c:	d4 2e       	mov	r13, r20
     63e:	00 e0       	ldi	r16, 0x00	; 0
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	1d c0       	rjmp	.+58     	; 0x67e <_ZN7Display6Buffer11printSerialEcc+0x56>

		// Loop across the bits
		for (int w = 0; w < _width; w++) {

			// Get the bit
			Color color = getBit(w, h);
     644:	c7 01       	movw	r24, r14
     646:	be 01       	movw	r22, r28
     648:	a8 01       	movw	r20, r16
     64a:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN7Display6Buffer6getBitEii>

			// Print the bit
			char bitChar = (color == WHITE) ? ones : zeros;
     64e:	01 97       	sbiw	r24, 0x01	; 1
     650:	11 f0       	breq	.+4      	; 0x656 <_ZN7Display6Buffer11printSerialEcc+0x2e>
     652:	6d 2d       	mov	r22, r13
     654:	01 c0       	rjmp	.+2      	; 0x658 <_ZN7Display6Buffer11printSerialEcc+0x30>
     656:	6c 2d       	mov	r22, r12
			Serial.print(bitChar);
     658:	8c e2       	ldi	r24, 0x2C	; 44
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN5Print5printEc>

	// Loop over the height
	for (int h = 0; h < _height; h++) {

		// Loop across the bits
		for (int w = 0; w < _width; w++) {
     660:	21 96       	adiw	r28, 0x01	; 1
     662:	f7 01       	movw	r30, r14
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	c8 17       	cp	r28, r24
     66a:	d9 07       	cpc	r29, r25
     66c:	5c f3       	brlt	.-42     	; 0x644 <_ZN7Display6Buffer11printSerialEcc+0x1c>
			char bitChar = (color == WHITE) ? ones : zeros;
			Serial.print(bitChar);
		}

		// Print an end-line for each row
		Serial.println("");
     66e:	8c e2       	ldi	r24, 0x2C	; 44
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN5Print7printlnEPKc>
 *  serial port must be opened before using this function.
 */
void Buffer::printSerial(char ones, char zeros) {

	// Loop over the height
	for (int h = 0; h < _height; h++) {
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	f7 01       	movw	r30, r14
     680:	82 81       	ldd	r24, Z+2	; 0x02
     682:	93 81       	ldd	r25, Z+3	; 0x03
     684:	08 17       	cp	r16, r24
     686:	19 07       	cpc	r17, r25
     688:	1c f4       	brge	.+6      	; 0x690 <_ZN7Display6Buffer11printSerialEcc+0x68>
     68a:	c0 e0       	ldi	r28, 0x00	; 0
     68c:	d0 e0       	ldi	r29, 0x00	; 0
     68e:	e9 cf       	rjmp	.-46     	; 0x662 <_ZN7Display6Buffer11printSerialEcc+0x3a>
		}

		// Print an end-line for each row
		Serial.println("");
	}
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	08 95       	ret

000006a2 <_Z41__static_initialization_and_destruction_0ii>:
		// Swap colors
		Color tmp(a);
		a = b;
		b = tmp;
	}
}
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	81 30       	cpi	r24, 0x01	; 1
     6a8:	91 05       	cpc	r25, r1
     6aa:	b1 f4       	brne	.+44     	; 0x6d8 <_Z41__static_initialization_and_destruction_0ii+0x36>
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	e1 f4       	brne	.+56     	; 0x6ea <_Z41__static_initialization_and_destruction_0ii+0x48>
const int WD_BYTES = (WD_PX + 7) / 8;
const int BUFF_LEN = WD_BYTES * HT_PX;

// Create LED display object
uint8_t rawDispBuff[BUFF_LEN];
Buffer dispBuff(WD_PX, HT_PX, WD_BYTES, rawDispBuff);
     6b2:	82 e9       	ldi	r24, 0x92	; 146
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	64 e1       	ldi	r22, 0x14	; 20
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	4a e0       	ldi	r20, 0x0A	; 10
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	23 e0       	ldi	r18, 0x03	; 3
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	04 e7       	ldi	r16, 0x74	; 116
     6c4:	11 e0       	ldi	r17, 0x01	; 1
     6c6:	0e 94 00 03 	call	0x600	; 0x600 <_ZN7Display6BufferC1EiiiPh>
SimpleFont sFont(&dispBuff);
     6ca:	8c e9       	ldi	r24, 0x9C	; 156
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	62 e9       	ldi	r22, 0x92	; 146
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	0e 94 91 04 	call	0x922	; 0x922 <_ZN7Display10SimpleFontC1EPNS_6BufferE>
     6d6:	09 c0       	rjmp	.+18     	; 0x6ea <_Z41__static_initialization_and_destruction_0ii+0x48>
     6d8:	89 2b       	or	r24, r25
     6da:	39 f4       	brne	.+14     	; 0x6ea <_Z41__static_initialization_and_destruction_0ii+0x48>
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	21 f4       	brne	.+8      	; 0x6ea <_Z41__static_initialization_and_destruction_0ii+0x48>
     6e2:	8c e9       	ldi	r24, 0x9C	; 156
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN7Display10SimpleFontD1Ev>
		// Swap colors
		Color tmp(a);
		a = b;
		b = tmp;
	}
}
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <_GLOBAL__D_rawDispBuff>:
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	6f ef       	ldi	r22, 0xFF	; 255
     6f6:	7f ef       	ldi	r23, 0xFF	; 255
     6f8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z41__static_initialization_and_destruction_0ii>
     6fc:	08 95       	ret

000006fe <_GLOBAL__I_rawDispBuff>:
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	6f ef       	ldi	r22, 0xFF	; 255
     704:	7f ef       	ldi	r23, 0xFF	; 255
     706:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Z41__static_initialization_and_destruction_0ii>
     70a:	08 95       	ret

0000070c <_Z25test_SimpleFont_writeCharv>:

void loop() {
	test_SimpleFont_writeChar();
}

void test_SimpleFont_writeChar() {
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	01 e0       	ldi	r16, 0x01	; 1
     71a:	10 e0       	ldi	r17, 0x00	; 0
	Color a(BLACK);
	Color b(WHITE);

	while (true) {

		dispBuff.clear(a);
     71c:	82 e9       	ldi	r24, 0x92	; 146
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	be 01       	movw	r22, r28
     722:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN7Display6Buffer5clearENS_5ColorE>
		sFont.setColor(b);
     726:	8c e9       	ldi	r24, 0x9C	; 156
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	b8 01       	movw	r22, r16
     72c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_ZN7Display4Font8setColorENS_5ColorE>
		sFont.drawChar(1, 1, '9');
     730:	8c e9       	ldi	r24, 0x9C	; 156
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	29 e3       	ldi	r18, 0x39	; 57
     73e:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN7Display10SimpleFont8drawCharEiic>
		sFont.drawChar(6, 1, '2');
     742:	8c e9       	ldi	r24, 0x9C	; 156
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	22 e3       	ldi	r18, 0x32	; 50
     750:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN7Display10SimpleFont8drawCharEiic>
		sFont.drawChar(11, 1, '5');
     754:	8c e9       	ldi	r24, 0x9C	; 156
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	6b e0       	ldi	r22, 0x0B	; 11
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	25 e3       	ldi	r18, 0x35	; 53
     762:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN7Display10SimpleFont8drawCharEiic>
		dispBuff.printSerial('#', '-');
     766:	82 e9       	ldi	r24, 0x92	; 146
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	63 e2       	ldi	r22, 0x23	; 35
     76c:	4d e2       	ldi	r20, 0x2D	; 45
     76e:	0e 94 14 03 	call	0x628	; 0x628 <_ZN7Display6Buffer11printSerialEcc>
		delay(5000);
     772:	68 e8       	ldi	r22, 0x88	; 136
     774:	73 e1       	ldi	r23, 0x13	; 19
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <delay>
     77e:	ce 01       	movw	r24, r28
     780:	e8 01       	movw	r28, r16
     782:	8c 01       	movw	r16, r24
     784:	cb cf       	rjmp	.-106    	; 0x71c <_Z25test_SimpleFont_writeCharv+0x10>

00000786 <loop>:
void setup() {
	Serial.begin(9600);
}

void loop() {
	test_SimpleFont_writeChar();
     786:	0e 94 86 03 	call	0x70c	; 0x70c <_Z25test_SimpleFont_writeCharv>
}
     78a:	08 95       	ret

0000078c <setup>:

// Prototypes
void test_SimpleFont_writeChar();

void setup() {
	Serial.begin(9600);
     78c:	8c e2       	ldi	r24, 0x2C	; 44
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	40 e8       	ldi	r20, 0x80	; 128
     792:	55 e2       	ldi	r21, 0x25	; 37
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN14HardwareSerial5beginEm>
}
     79c:	08 95       	ret

0000079e <_ZN7Display4FontC2EPNS_6BufferE>:
     79e:	fc 01       	movw	r30, r24
     7a0:	83 e3       	ldi	r24, 0x33	; 51
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
     7a8:	73 83       	std	Z+3, r23	; 0x03
     7aa:	62 83       	std	Z+2, r22	; 0x02
     7ac:	14 82       	std	Z+4, r1	; 0x04
     7ae:	15 82       	std	Z+5, r1	; 0x05
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	97 83       	std	Z+7, r25	; 0x07
     7b6:	86 83       	std	Z+6, r24	; 0x06
     7b8:	08 95       	ret

000007ba <_ZN7Display4FontD2Ev>:

Font::~Font() {}
     7ba:	fc 01       	movw	r30, r24
     7bc:	83 e3       	ldi	r24, 0x33	; 51
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	91 83       	std	Z+1, r25	; 0x01
     7c2:	80 83       	st	Z, r24
     7c4:	08 95       	ret

000007c6 <_ZN7Display4FontD1Ev>:
     7c6:	fc 01       	movw	r30, r24
     7c8:	83 e3       	ldi	r24, 0x33	; 51
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
     7d0:	08 95       	ret

000007d2 <_ZN7Display4Font10getKerningEv>:

uint8_t Font::getKerning() {
	return _kerning;
}
     7d2:	fc 01       	movw	r30, r24
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	08 95       	ret

000007d8 <_ZN7Display4Font10setKerningEh>:

void Font::setKerning(uint8_t width) {
	_kerning = width;
     7d8:	fc 01       	movw	r30, r24
     7da:	64 83       	std	Z+4, r22	; 0x04
}
     7dc:	08 95       	ret

000007de <_ZN7Display4Font10getSpacingEv>:

uint8_t Font::getSpacing() {
	return _spacing;
}
     7de:	fc 01       	movw	r30, r24
     7e0:	85 81       	ldd	r24, Z+5	; 0x05
     7e2:	08 95       	ret

000007e4 <_ZN7Display4Font10setSpacingEh>:

void Font::setSpacing(uint8_t spacing) {
	_spacing = spacing;
     7e4:	fc 01       	movw	r30, r24
     7e6:	65 83       	std	Z+5, r22	; 0x05
}
     7e8:	08 95       	ret

000007ea <_ZN7Display4Font8setColorENS_5ColorE>:

void Font::setColor(Color color){
	_color = color;
     7ea:	fc 01       	movw	r30, r24
     7ec:	77 83       	std	Z+7, r23	; 0x07
     7ee:	66 83       	std	Z+6, r22	; 0x06
}
     7f0:	08 95       	ret

000007f2 <_ZN7Display4FontD0Ev>:
#include "Font.h"
using namespace Display;

Font::Font(Buffer* buff) : _buff(buff), _kerning(0), _spacing(0), _color(WHITE){}

Font::~Font() {}
     7f2:	fc 01       	movw	r30, r24
     7f4:	83 e3       	ldi	r24, 0x33	; 51
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	80 83       	st	Z, r24
     7fc:	cf 01       	movw	r24, r30
     7fe:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZdlPv>
     802:	08 95       	ret

00000804 <_ZN7Display10SimpleFont10drawStringEiiPc>:
	}
}

void SimpleFont::drawString(int x, int y, char* string) {
	// TODO implement this using writeChar!
}
     804:	08 95       	ret

00000806 <_ZN7Display10SimpleFont9getHeightEv>:

uint8_t SimpleFont::getHeight() {
	return _height;
}
     806:	85 e0       	ldi	r24, 0x05	; 5
     808:	08 95       	ret

0000080a <_ZN7Display10SimpleFont8getWidthEv>:

uint8_t SimpleFont::getWidth() {
	return _width;
}
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	08 95       	ret

0000080e <_ZN7Display10SimpleFont9getBitmapEc>:

uint32_t SimpleFont::getBitmap(char c) {
     80e:	86 2f       	mov	r24, r22


// Converts the letter c to upper case, if possible.
inline int toUpperCase(int c)
{
  return toupper (c);
     810:	99 27       	eor	r25, r25
     812:	87 fd       	sbrc	r24, 7
     814:	90 95       	com	r25
     816:	0e 94 72 08 	call	0x10e4	; 0x10e4 <toupper>
     81a:	e8 2f       	mov	r30, r24
	// convert character to upper case
	c = toUpperCase(c);

	// Get the bitmap from the font array
	//   see http://ascii-table.com/
	if (c >= '0' && c <= '9'){
     81c:	80 53       	subi	r24, 0x30	; 48
     81e:	8a 30       	cpi	r24, 0x0A	; 10
     820:	28 f0       	brcs	.+10     	; 0x82c <_ZN7Display10SimpleFont9getBitmapEc+0x1e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	0d c0       	rjmp	.+26     	; 0x846 <_ZN7Display10SimpleFont9getBitmapEc+0x38>
		bitmap = fontArray[c - '0'];
     82c:	ff 27       	eor	r31, r31
     82e:	e7 fd       	sbrc	r30, 7
     830:	f0 95       	com	r31
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e9 5b       	subi	r30, 0xB9	; 185
     83c:	ff 4f       	sbci	r31, 0xFF	; 255
     83e:	20 81       	ld	r18, Z
     840:	31 81       	ldd	r19, Z+1	; 0x01
     842:	42 81       	ldd	r20, Z+2	; 0x02
     844:	53 81       	ldd	r21, Z+3	; 0x03
	}

	return bitmap;
}
     846:	b9 01       	movw	r22, r18
     848:	ca 01       	movw	r24, r20
     84a:	08 95       	ret

0000084c <_ZN7Display10SimpleFont8drawCharEiic>:
	_spacing = _height + 1;
}

SimpleFont::~SimpleFont() {}

void SimpleFont::drawChar(int x, int y, char c) {
     84c:	4f 92       	push	r4
     84e:	5f 92       	push	r5
     850:	6f 92       	push	r6
     852:	7f 92       	push	r7
     854:	8f 92       	push	r8
     856:	9f 92       	push	r9
     858:	af 92       	push	r10
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	5c 01       	movw	r10, r24
     86e:	2b 01       	movw	r4, r22
     870:	3a 01       	movw	r6, r20
	uint32_t bitmap;
	bitmap = getBitmap(c);
     872:	62 2f       	mov	r22, r18
     874:	0e 94 07 04 	call	0x80e	; 0x80e <_ZN7Display10SimpleFont9getBitmapEc>
     878:	7b 01       	movw	r14, r22
     87a:	8c 01       	movw	r16, r24
     87c:	24 e0       	ldi	r18, 0x04	; 4
     87e:	c2 2e       	mov	r12, r18
     880:	d1 2c       	mov	r13, r1
     882:	1e c0       	rjmp	.+60     	; 0x8c0 <_ZN7Display10SimpleFont8drawCharEiic+0x74>

		// loop across the width
		for (int w = _width-1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
     884:	e0 fe       	sbrs	r14, 0
     886:	0b c0       	rjmp	.+22     	; 0x89e <_ZN7Display10SimpleFont8drawCharEiic+0x52>
				_buff->setBit(x+w, y+h, _color);
     888:	be 01       	movw	r22, r28
     88a:	64 0d       	add	r22, r4
     88c:	75 1d       	adc	r23, r5
     88e:	f5 01       	movw	r30, r10
     890:	26 81       	ldd	r18, Z+6	; 0x06
     892:	37 81       	ldd	r19, Z+7	; 0x07
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	a4 01       	movw	r20, r8
     89a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN7Display6Buffer6setBitEiiNS_5ColorE>

			// Shift out a bit
			bitmap >>= 1;
     89e:	16 95       	lsr	r17
     8a0:	07 95       	ror	r16
     8a2:	f7 94       	ror	r15
     8a4:	e7 94       	ror	r14

	// Loop across the height
	for (int h = _height-1; h >= 0; h--) {

		// loop across the width
		for (int w = _width-1; w >= 0; w--) {
     8a6:	21 97       	sbiw	r28, 0x01	; 1
     8a8:	ff ef       	ldi	r31, 0xFF	; 255
     8aa:	cf 3f       	cpi	r28, 0xFF	; 255
     8ac:	df 07       	cpc	r29, r31
     8ae:	51 f7       	brne	.-44     	; 0x884 <_ZN7Display10SimpleFont8drawCharEiic+0x38>
void SimpleFont::drawChar(int x, int y, char c) {
	uint32_t bitmap;
	bitmap = getBitmap(c);

	// Loop across the height
	for (int h = _height-1; h >= 0; h--) {
     8b0:	08 94       	sec
     8b2:	c1 08       	sbc	r12, r1
     8b4:	d1 08       	sbc	r13, r1
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	c8 16       	cp	r12, r24
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	d8 06       	cpc	r13, r24
     8be:	31 f0       	breq	.+12     	; 0x8cc <_ZN7Display10SimpleFont8drawCharEiic+0x80>
     8c0:	c3 e0       	ldi	r28, 0x03	; 3
     8c2:	d0 e0       	ldi	r29, 0x00	; 0
		// loop across the width
		for (int w = _width-1; w >= 0; w--) {

			// Set only bits that are 1's
			if (bitmap & 0x01)
				_buff->setBit(x+w, y+h, _color);
     8c4:	46 01       	movw	r8, r12
     8c6:	86 0c       	add	r8, r6
     8c8:	97 1c       	adc	r9, r7
     8ca:	dc cf       	rjmp	.-72     	; 0x884 <_ZN7Display10SimpleFont8drawCharEiic+0x38>

			// Shift out a bit
			bitmap >>= 1;
		}
	}
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	cf 90       	pop	r12
     8dc:	bf 90       	pop	r11
     8de:	af 90       	pop	r10
     8e0:	9f 90       	pop	r9
     8e2:	8f 90       	pop	r8
     8e4:	7f 90       	pop	r7
     8e6:	6f 90       	pop	r6
     8e8:	5f 90       	pop	r5
     8ea:	4f 90       	pop	r4
     8ec:	08 95       	ret

000008ee <_ZN7Display10SimpleFontD1Ev>:
SimpleFont::SimpleFont(Buffer* buff) : Font(buff) {
	_kerning = 1;
	_spacing = _height + 1;
}

SimpleFont::~SimpleFont() {}
     8ee:	fc 01       	movw	r30, r24
     8f0:	8d e4       	ldi	r24, 0x4D	; 77
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	91 83       	std	Z+1, r25	; 0x01
     8f6:	80 83       	st	Z, r24
     8f8:	cf 01       	movw	r24, r30
     8fa:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN7Display4FontD2Ev>
     8fe:	08 95       	ret

00000900 <_ZN7Display10SimpleFontD0Ev>:
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	8c 01       	movw	r16, r24
     906:	8d e4       	ldi	r24, 0x4D	; 77
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	f8 01       	movw	r30, r16
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	80 83       	st	Z, r24
     910:	c8 01       	movw	r24, r16
     912:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN7Display4FontD2Ev>
     916:	c8 01       	movw	r24, r16
     918:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZdlPv>
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <_ZN7Display10SimpleFontC1EPNS_6BufferE>:
	0x0f1224, // '7'
	0x0f969f, // '8'
	0x0f9f11  // '9'
};

SimpleFont::SimpleFont(Buffer* buff) : Font(buff) {
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	8c 01       	movw	r16, r24
     928:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN7Display4FontC2EPNS_6BufferE>
     92c:	8d e4       	ldi	r24, 0x4D	; 77
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	f8 01       	movw	r30, r16
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
	_kerning = 1;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	84 83       	std	Z+4, r24	; 0x04
	_spacing = _height + 1;
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	85 83       	std	Z+5, r24	; 0x05
}
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     944:	08 95       	ret

00000946 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	8f 93       	push	r24
     958:	9f 93       	push	r25
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     95e:	80 91 c0 00 	lds	r24, 0x00C0
     962:	82 fd       	sbrc	r24, 2
     964:	1d c0       	rjmp	.+58     	; 0x9a0 <__vector_18+0x5a>
      unsigned char c = UDR0;
     966:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     96a:	20 91 e4 01 	lds	r18, 0x01E4
     96e:	30 91 e5 01 	lds	r19, 0x01E5

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     972:	2f 5f       	subi	r18, 0xFF	; 255
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	2f 73       	andi	r18, 0x3F	; 63
     978:	30 70       	andi	r19, 0x00	; 0
     97a:	80 91 e6 01 	lds	r24, 0x01E6
     97e:	90 91 e7 01 	lds	r25, 0x01E7
     982:	28 17       	cp	r18, r24
     984:	39 07       	cpc	r19, r25
     986:	71 f0       	breq	.+28     	; 0x9a4 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
     988:	e0 91 e4 01 	lds	r30, 0x01E4
     98c:	f0 91 e5 01 	lds	r31, 0x01E5
     990:	ec 55       	subi	r30, 0x5C	; 92
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	40 83       	st	Z, r20
    buffer->head = i;
     996:	30 93 e5 01 	sts	0x01E5, r19
     99a:	20 93 e4 01 	sts	0x01E4, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     9a0:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     9bc:	e0 91 38 02 	lds	r30, 0x0238
     9c0:	f0 91 39 02 	lds	r31, 0x0239
     9c4:	e0 5c       	subi	r30, 0xC0	; 192
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	81 91       	ld	r24, Z+
     9ca:	91 91       	ld	r25, Z+
     9cc:	20 81       	ld	r18, Z
     9ce:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     9d0:	82 1b       	sub	r24, r18
     9d2:	93 0b       	sbc	r25, r19
     9d4:	8f 73       	andi	r24, 0x3F	; 63
     9d6:	90 70       	andi	r25, 0x00	; 0
     9d8:	89 2b       	or	r24, r25
     9da:	11 f0       	breq	.+4      	; 0x9e0 <_Z14serialEventRunv+0x24>
     9dc:	0e 94 a2 04 	call	0x944	; 0x944 <_Z11serialEventv>
     9e0:	08 95       	ret

000009e2 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     9f8:	20 91 28 02 	lds	r18, 0x0228
     9fc:	30 91 29 02 	lds	r19, 0x0229
     a00:	80 91 2a 02 	lds	r24, 0x022A
     a04:	90 91 2b 02 	lds	r25, 0x022B
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	31 f4       	brne	.+12     	; 0xa1a <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     a0e:	80 91 c1 00 	lds	r24, 0x00C1
     a12:	8f 7d       	andi	r24, 0xDF	; 223
     a14:	80 93 c1 00 	sts	0x00C1, r24
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     a1a:	e0 91 2a 02 	lds	r30, 0x022A
     a1e:	f0 91 2b 02 	lds	r31, 0x022B
     a22:	e8 51       	subi	r30, 0x18	; 24
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     a28:	80 91 2a 02 	lds	r24, 0x022A
     a2c:	90 91 2b 02 	lds	r25, 0x022B
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	8f 73       	andi	r24, 0x3F	; 63
     a34:	90 70       	andi	r25, 0x00	; 0
     a36:	90 93 2b 02 	sts	0x022B, r25
     a3a:	80 93 2a 02 	sts	0x022A, r24
	
  #if defined(UDR0)
    UDR0 = c;
     a3e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	3f 91       	pop	r19
     a4c:	2f 91       	pop	r18
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	ec 01       	movw	r28, r24
     a6c:	7a 01       	movw	r14, r20
     a6e:	8b 01       	movw	r16, r22
     a70:	dd 24       	eor	r13, r13
     a72:	40 30       	cpi	r20, 0x00	; 0
     a74:	81 ee       	ldi	r24, 0xE1	; 225
     a76:	58 07       	cpc	r21, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	68 07       	cpc	r22, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	78 07       	cpc	r23, r24
     a80:	11 f0       	breq	.+4      	; 0xa86 <_ZN14HardwareSerial5beginEm+0x2e>
     a82:	dd 24       	eor	r13, r13
     a84:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	a9 2e       	mov	r10, r25
     a8a:	b1 2c       	mov	r11, r1
     a8c:	ec 89       	ldd	r30, Y+20	; 0x14
     a8e:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     a90:	dd 20       	and	r13, r13
     a92:	69 f0       	breq	.+26     	; 0xaae <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     a94:	c5 01       	movw	r24, r10
     a96:	08 a0       	ldd	r0, Y+32	; 0x20
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <_ZN14HardwareSerial5beginEm+0x46>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <_ZN14HardwareSerial5beginEm+0x42>
     aa2:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	79 e0       	ldi	r23, 0x09	; 9
     aa8:	8d e3       	ldi	r24, 0x3D	; 61
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	05 c0       	rjmp	.+10     	; 0xab8 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     aae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ab0:	60 e8       	ldi	r22, 0x80	; 128
     ab2:	74 e8       	ldi	r23, 0x84	; 132
     ab4:	8e e1       	ldi	r24, 0x1E	; 30
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a8 01       	movw	r20, r16
     aba:	97 01       	movw	r18, r14
     abc:	0e 94 36 08 	call	0x106c	; 0x106c <__udivmodsi4>
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	30 40       	sbci	r19, 0x00	; 0
     ac4:	40 40       	sbci	r20, 0x00	; 0
     ac6:	50 40       	sbci	r21, 0x00	; 0
     ac8:	56 95       	lsr	r21
     aca:	47 95       	ror	r20
     acc:	37 95       	ror	r19
     ace:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	20 30       	cpi	r18, 0x00	; 0
     ad4:	38 07       	cpc	r19, r24
     ad6:	20 f0       	brcs	.+8      	; 0xae0 <_ZN14HardwareSerial5beginEm+0x88>
     ad8:	dd 20       	and	r13, r13
     ada:	11 f0       	breq	.+4      	; 0xae0 <_ZN14HardwareSerial5beginEm+0x88>
     adc:	dd 24       	eor	r13, r13
     ade:	d6 cf       	rjmp	.-84     	; 0xa8c <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     ae0:	e8 89       	ldd	r30, Y+16	; 0x10
     ae2:	f9 89       	ldd	r31, Y+17	; 0x11
     ae4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ae6:	ea 89       	ldd	r30, Y+18	; 0x12
     ae8:	fb 89       	ldd	r31, Y+19	; 0x13
     aea:	20 83       	st	Z, r18

  transmitting = false;
     aec:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     aee:	ee 89       	ldd	r30, Y+22	; 0x16
     af0:	ff 89       	ldd	r31, Y+23	; 0x17
     af2:	40 81       	ld	r20, Z
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	c9 01       	movw	r24, r18
     afa:	0c 8c       	ldd	r0, Y+28	; 0x1c
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <_ZN14HardwareSerial5beginEm+0xaa>
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	0a 94       	dec	r0
     b04:	e2 f7       	brpl	.-8      	; 0xafe <_ZN14HardwareSerial5beginEm+0xa6>
     b06:	48 2b       	or	r20, r24
     b08:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     b0a:	ee 89       	ldd	r30, Y+22	; 0x16
     b0c:	ff 89       	ldd	r31, Y+23	; 0x17
     b0e:	40 81       	ld	r20, Z
     b10:	c9 01       	movw	r24, r18
     b12:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <_ZN14HardwareSerial5beginEm+0xc2>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	0a 94       	dec	r0
     b1c:	e2 f7       	brpl	.-8      	; 0xb16 <_ZN14HardwareSerial5beginEm+0xbe>
     b1e:	48 2b       	or	r20, r24
     b20:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     b22:	ee 89       	ldd	r30, Y+22	; 0x16
     b24:	ff 89       	ldd	r31, Y+23	; 0x17
     b26:	40 81       	ld	r20, Z
     b28:	c9 01       	movw	r24, r18
     b2a:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <_ZN14HardwareSerial5beginEm+0xda>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	0a 94       	dec	r0
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <_ZN14HardwareSerial5beginEm+0xd6>
     b36:	48 2b       	or	r20, r24
     b38:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     b3a:	ee 89       	ldd	r30, Y+22	; 0x16
     b3c:	ff 89       	ldd	r31, Y+23	; 0x17
     b3e:	80 81       	ld	r24, Z
     b40:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <_ZN14HardwareSerial5beginEm+0xf0>
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	0a 94       	dec	r0
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <_ZN14HardwareSerial5beginEm+0xec>
     b4c:	20 95       	com	r18
     b4e:	28 23       	and	r18, r24
     b50:	20 83       	st	Z, r18
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	08 95       	ret

00000b66 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     b66:	dc 01       	movw	r26, r24
     b68:	1c 96       	adiw	r26, 0x0c	; 12
     b6a:	ed 91       	ld	r30, X+
     b6c:	fc 91       	ld	r31, X
     b6e:	1d 97       	sbiw	r26, 0x0d	; 13
     b70:	e0 5c       	subi	r30, 0xC0	; 192
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	21 91       	ld	r18, Z+
     b76:	31 91       	ld	r19, Z+
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	28 1b       	sub	r18, r24
     b7e:	39 0b       	sbc	r19, r25
     b80:	2f 73       	andi	r18, 0x3F	; 63
     b82:	30 70       	andi	r19, 0x00	; 0
}
     b84:	c9 01       	movw	r24, r18
     b86:	08 95       	ret

00000b88 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     b88:	dc 01       	movw	r26, r24
     b8a:	1c 96       	adiw	r26, 0x0c	; 12
     b8c:	ed 91       	ld	r30, X+
     b8e:	fc 91       	ld	r31, X
     b90:	1d 97       	sbiw	r26, 0x0d	; 13
     b92:	e0 5c       	subi	r30, 0xC0	; 192
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	20 81       	ld	r18, Z
     b98:	31 81       	ldd	r19, Z+1	; 0x01
     b9a:	e0 54       	subi	r30, 0x40	; 64
     b9c:	f0 40       	sbci	r31, 0x00	; 0
     b9e:	df 01       	movw	r26, r30
     ba0:	ae 5b       	subi	r26, 0xBE	; 190
     ba2:	bf 4f       	sbci	r27, 0xFF	; 255
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	11 97       	sbiw	r26, 0x01	; 1
     baa:	28 17       	cp	r18, r24
     bac:	39 07       	cpc	r19, r25
     bae:	19 f4       	brne	.+6      	; 0xbb6 <_ZN14HardwareSerial4peekEv+0x2e>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     bb6:	8d 91       	ld	r24, X+
     bb8:	9c 91       	ld	r25, X
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	80 81       	ld	r24, Z
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     bc4:	c9 01       	movw	r24, r18
     bc6:	08 95       	ret

00000bc8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     bc8:	dc 01       	movw	r26, r24
     bca:	1c 96       	adiw	r26, 0x0c	; 12
     bcc:	ed 91       	ld	r30, X+
     bce:	fc 91       	ld	r31, X
     bd0:	1d 97       	sbiw	r26, 0x0d	; 13
     bd2:	e0 5c       	subi	r30, 0xC0	; 192
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	20 81       	ld	r18, Z
     bd8:	31 81       	ldd	r19, Z+1	; 0x01
     bda:	e0 54       	subi	r30, 0x40	; 64
     bdc:	f0 40       	sbci	r31, 0x00	; 0
     bde:	df 01       	movw	r26, r30
     be0:	ae 5b       	subi	r26, 0xBE	; 190
     be2:	bf 4f       	sbci	r27, 0xFF	; 255
     be4:	8d 91       	ld	r24, X+
     be6:	9c 91       	ld	r25, X
     be8:	11 97       	sbiw	r26, 0x01	; 1
     bea:	28 17       	cp	r18, r24
     bec:	39 07       	cpc	r19, r25
     bee:	19 f4       	brne	.+6      	; 0xbf6 <_ZN14HardwareSerial4readEv+0x2e>
     bf0:	2f ef       	ldi	r18, 0xFF	; 255
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     bf6:	8d 91       	ld	r24, X+
     bf8:	9c 91       	ld	r25, X
     bfa:	11 97       	sbiw	r26, 0x01	; 1
     bfc:	e8 0f       	add	r30, r24
     bfe:	f9 1f       	adc	r31, r25
     c00:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     c02:	8d 91       	ld	r24, X+
     c04:	9c 91       	ld	r25, X
     c06:	11 97       	sbiw	r26, 0x01	; 1
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	8f 73       	andi	r24, 0x3F	; 63
     c0c:	90 70       	andi	r25, 0x00	; 0
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
    return c;
     c14:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     c16:	c9 01       	movw	r24, r18
     c18:	08 95       	ret

00000c1a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
     c1a:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     c1c:	91 96       	adiw	r26, 0x21	; 33
     c1e:	8c 91       	ld	r24, X
     c20:	91 97       	sbiw	r26, 0x21	; 33
     c22:	88 23       	and	r24, r24
     c24:	39 f0       	breq	.+14     	; 0xc34 <_ZN14HardwareSerial5flushEv+0x1a>
     c26:	54 96       	adiw	r26, 0x14	; 20
     c28:	ed 91       	ld	r30, X+
     c2a:	fc 91       	ld	r31, X
     c2c:	55 97       	sbiw	r26, 0x15	; 21
     c2e:	80 81       	ld	r24, Z
     c30:	86 ff       	sbrs	r24, 6
     c32:	f9 cf       	rjmp	.-14     	; 0xc26 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
     c34:	91 96       	adiw	r26, 0x21	; 33
     c36:	1c 92       	st	X, r1
}
     c38:	08 95       	ret

00000c3a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     c40:	ee 85       	ldd	r30, Y+14	; 0x0e
     c42:	ff 85       	ldd	r31, Y+15	; 0x0f
     c44:	e0 5c       	subi	r30, 0xC0	; 192
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	20 81       	ld	r18, Z
     c4a:	31 81       	ldd	r19, Z+1	; 0x01
     c4c:	e0 54       	subi	r30, 0x40	; 64
     c4e:	f0 40       	sbci	r31, 0x00	; 0
     c50:	2f 5f       	subi	r18, 0xFF	; 255
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	2f 73       	andi	r18, 0x3F	; 63
     c56:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     c58:	df 01       	movw	r26, r30
     c5a:	ae 5b       	subi	r26, 0xBE	; 190
     c5c:	bf 4f       	sbci	r27, 0xFF	; 255
     c5e:	8d 91       	ld	r24, X+
     c60:	9c 91       	ld	r25, X
     c62:	11 97       	sbiw	r26, 0x01	; 1
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	d1 f3       	breq	.-12     	; 0xc5e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     c6a:	e0 5c       	subi	r30, 0xC0	; 192
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	e0 54       	subi	r30, 0x40	; 64
     c74:	f0 40       	sbci	r31, 0x00	; 0
     c76:	e8 0f       	add	r30, r24
     c78:	f9 1f       	adc	r31, r25
     c7a:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     c7c:	ee 85       	ldd	r30, Y+14	; 0x0e
     c7e:	ff 85       	ldd	r31, Y+15	; 0x0f
     c80:	e0 5c       	subi	r30, 0xC0	; 192
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     c88:	ee 89       	ldd	r30, Y+22	; 0x16
     c8a:	ff 89       	ldd	r31, Y+23	; 0x17
     c8c:	20 81       	ld	r18, Z
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0f 8c       	ldd	r0, Y+31	; 0x1f
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <_ZN14HardwareSerial5writeEh+0x60>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <_ZN14HardwareSerial5writeEh+0x5c>
     c9e:	28 2b       	or	r18, r24
     ca0:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     ca6:	ec 89       	ldd	r30, Y+20	; 0x14
     ca8:	fd 89       	ldd	r31, Y+21	; 0x15
     caa:	80 81       	ld	r24, Z
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	80 83       	st	Z, r24
  
  return 1;
}
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     cba:	10 92 2f 02 	sts	0x022F, r1
     cbe:	10 92 2e 02 	sts	0x022E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	80 93 30 02 	sts	0x0230, r24
     cce:	90 93 31 02 	sts	0x0231, r25
     cd2:	a0 93 32 02 	sts	0x0232, r26
     cd6:	b0 93 33 02 	sts	0x0233, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     cda:	87 e6       	ldi	r24, 0x67	; 103
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	90 93 2d 02 	sts	0x022D, r25
     ce2:	80 93 2c 02 	sts	0x022C, r24
{
  _rx_buffer = rx_buffer;
     ce6:	84 ea       	ldi	r24, 0xA4	; 164
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	90 93 39 02 	sts	0x0239, r25
     cee:	80 93 38 02 	sts	0x0238, r24
  _tx_buffer = tx_buffer;
     cf2:	88 ee       	ldi	r24, 0xE8	; 232
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	90 93 3b 02 	sts	0x023B, r25
     cfa:	80 93 3a 02 	sts	0x023A, r24
  _ubrrh = ubrrh;
     cfe:	85 ec       	ldi	r24, 0xC5	; 197
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	90 93 3d 02 	sts	0x023D, r25
     d06:	80 93 3c 02 	sts	0x023C, r24
  _ubrrl = ubrrl;
     d0a:	84 ec       	ldi	r24, 0xC4	; 196
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	90 93 3f 02 	sts	0x023F, r25
     d12:	80 93 3e 02 	sts	0x023E, r24
  _ucsra = ucsra;
     d16:	80 ec       	ldi	r24, 0xC0	; 192
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	90 93 41 02 	sts	0x0241, r25
     d1e:	80 93 40 02 	sts	0x0240, r24
  _ucsrb = ucsrb;
     d22:	81 ec       	ldi	r24, 0xC1	; 193
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	90 93 43 02 	sts	0x0243, r25
     d2a:	80 93 42 02 	sts	0x0242, r24
  _ucsrc = ucsrc;
     d2e:	82 ec       	ldi	r24, 0xC2	; 194
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	90 93 45 02 	sts	0x0245, r25
     d36:	80 93 44 02 	sts	0x0244, r24
  _udr = udr;
     d3a:	86 ec       	ldi	r24, 0xC6	; 198
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	90 93 47 02 	sts	0x0247, r25
     d42:	80 93 46 02 	sts	0x0246, r24
  _rxen = rxen;
     d46:	84 e0       	ldi	r24, 0x04	; 4
     d48:	80 93 48 02 	sts	0x0248, r24
  _txen = txen;
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	80 93 49 02 	sts	0x0249, r24
  _rxcie = rxcie;
     d52:	87 e0       	ldi	r24, 0x07	; 7
     d54:	80 93 4a 02 	sts	0x024A, r24
  _udrie = udrie;
     d58:	85 e0       	ldi	r24, 0x05	; 5
     d5a:	80 93 4b 02 	sts	0x024B, r24
  _u2x = u2x;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 4c 02 	sts	0x024C, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     d64:	08 95       	ret

00000d66 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	7c 01       	movw	r14, r24
     d78:	6b 01       	movw	r12, r22
     d7a:	8a 01       	movw	r16, r20
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	d0 e0       	ldi	r29, 0x00	; 0
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     d82:	d6 01       	movw	r26, r12
     d84:	6d 91       	ld	r22, X+
     d86:	6d 01       	movw	r12, r26
     d88:	d7 01       	movw	r26, r14
     d8a:	ed 91       	ld	r30, X+
     d8c:	fc 91       	ld	r31, X
     d8e:	01 90       	ld	r0, Z+
     d90:	f0 81       	ld	r31, Z
     d92:	e0 2d       	mov	r30, r0
     d94:	c7 01       	movw	r24, r14
     d96:	09 95       	icall
     d98:	c8 0f       	add	r28, r24
     d9a:	d9 1f       	adc	r29, r25
     d9c:	01 50       	subi	r16, 0x01	; 1
     d9e:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     da0:	01 15       	cp	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	71 f7       	brne	.-36     	; 0xd82 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     da6:	ce 01       	movw	r24, r28
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	08 95       	ret

00000dba <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
     dba:	dc 01       	movw	r26, r24
{
  return write(c);
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	09 95       	icall
}
     dc8:	08 95       	ret

00000dca <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     dd4:	dc 01       	movw	r26, r24
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	01 90       	ld	r0, Z+
     ddc:	f0 81       	ld	r31, Z
     dde:	e0 2d       	mov	r30, r0
     de0:	6d e0       	ldi	r22, 0x0D	; 13
     de2:	09 95       	icall
     de4:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     de6:	d8 01       	movw	r26, r16
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	01 90       	ld	r0, Z+
     dee:	f0 81       	ld	r31, Z
     df0:	e0 2d       	mov	r30, r0
     df2:	c8 01       	movw	r24, r16
     df4:	6a e0       	ldi	r22, 0x0A	; 10
     df6:	09 95       	icall
     df8:	9c 01       	movw	r18, r24
     dfa:	2e 0d       	add	r18, r14
     dfc:	3f 1d       	adc	r19, r15
     dfe:	c9 01       	movw	r24, r18
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret

00000e0a <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	19 f4       	brne	.+6      	; 0xe1c <_ZN5Print5writeEPKc+0x12>
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	0f c0       	rjmp	.+30     	; 0xe3a <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
     e1c:	db 01       	movw	r26, r22
     e1e:	0d 90       	ld	r0, X+
     e20:	00 20       	and	r0, r0
     e22:	e9 f7       	brne	.-6      	; 0xe1e <_ZN5Print5writeEPKc+0x14>
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	a6 1b       	sub	r26, r22
     e28:	b7 0b       	sbc	r27, r23
     e2a:	e8 81       	ld	r30, Y
     e2c:	f9 81       	ldd	r31, Y+1	; 0x01
     e2e:	02 80       	ldd	r0, Z+2	; 0x02
     e30:	f3 81       	ldd	r31, Z+3	; 0x03
     e32:	e0 2d       	mov	r30, r0
     e34:	ad 01       	movw	r20, r26
     e36:	09 95       	icall
     e38:	9c 01       	movw	r18, r24
    }
     e3a:	c9 01       	movw	r24, r18
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     e4c:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN5Print5writeEPKc>
     e50:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     e52:	c7 01       	movw	r24, r14
     e54:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN5Print7printlnEv>
     e58:	08 0f       	add	r16, r24
     e5a:	19 1f       	adc	r17, r25
  return n;
}
     e5c:	c8 01       	movw	r24, r16
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <main>:
#include <Arduino.h>

int main(void)
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
{
	init();
     e6c:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e70:	0e 94 c6 03 	call	0x78c	; 0x78c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e74:	ce ed       	ldi	r28, 0xDE	; 222
     e76:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     e78:	0e 94 c3 03 	call	0x786	; 0x786 <loop>
		if (serialEventRun) serialEventRun();
     e7c:	20 97       	sbiw	r28, 0x00	; 0
     e7e:	e1 f3       	breq	.-8      	; 0xe78 <main+0x10>
     e80:	0e 94 de 04 	call	0x9bc	; 0x9bc <_Z14serialEventRunv>
     e84:	f9 cf       	rjmp	.-14     	; 0xe78 <main+0x10>

00000e86 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
     e86:	08 95       	ret

00000e88 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
     e88:	0e 94 0b 01 	call	0x216	; 0x216 <free>
} 
     e8c:	08 95       	ret

00000e8e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     ea4:	80 91 52 02 	lds	r24, 0x0252
     ea8:	90 91 53 02 	lds	r25, 0x0253
     eac:	a0 91 54 02 	lds	r26, 0x0254
     eb0:	b0 91 55 02 	lds	r27, 0x0255
	unsigned char f = timer0_fract;
     eb4:	30 91 56 02 	lds	r19, 0x0256

	m += MILLIS_INC;
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	a1 1d       	adc	r26, r1
     ebc:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     ebe:	23 2f       	mov	r18, r19
     ec0:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     ec2:	2d 37       	cpi	r18, 0x7D	; 125
     ec4:	20 f0       	brcs	.+8      	; 0xece <__vector_16+0x40>
		f -= FRACT_MAX;
     ec6:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	a1 1d       	adc	r26, r1
     ecc:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     ece:	20 93 56 02 	sts	0x0256, r18
	timer0_millis = m;
     ed2:	80 93 52 02 	sts	0x0252, r24
     ed6:	90 93 53 02 	sts	0x0253, r25
     eda:	a0 93 54 02 	sts	0x0254, r26
     ede:	b0 93 55 02 	sts	0x0255, r27
	timer0_overflow_count++;
     ee2:	80 91 4e 02 	lds	r24, 0x024E
     ee6:	90 91 4f 02 	lds	r25, 0x024F
     eea:	a0 91 50 02 	lds	r26, 0x0250
     eee:	b0 91 51 02 	lds	r27, 0x0251
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	a1 1d       	adc	r26, r1
     ef6:	b1 1d       	adc	r27, r1
     ef8:	80 93 4e 02 	sts	0x024E, r24
     efc:	90 93 4f 02 	sts	0x024F, r25
     f00:	a0 93 50 02 	sts	0x0250, r26
     f04:	b0 93 51 02 	sts	0x0251, r27
}
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f22:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     f24:	f8 94       	cli
	m = timer0_overflow_count;
     f26:	80 91 4e 02 	lds	r24, 0x024E
     f2a:	90 91 4f 02 	lds	r25, 0x024F
     f2e:	a0 91 50 02 	lds	r26, 0x0250
     f32:	b0 91 51 02 	lds	r27, 0x0251
#if defined(TCNT0)
	t = TCNT0;
     f36:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f38:	a8 9b       	sbis	0x15, 0	; 21
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <delay+0x28>
     f3c:	6f 3f       	cpi	r22, 0xFF	; 255
     f3e:	19 f0       	breq	.+6      	; 0xf46 <delay+0x28>
		m++;
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	a1 1d       	adc	r26, r1
     f44:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f46:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     f48:	ba 2f       	mov	r27, r26
     f4a:	a9 2f       	mov	r26, r25
     f4c:	98 2f       	mov	r25, r24
     f4e:	88 27       	eor	r24, r24
     f50:	86 0f       	add	r24, r22
     f52:	91 1d       	adc	r25, r1
     f54:	a1 1d       	adc	r26, r1
     f56:	b1 1d       	adc	r27, r1
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	aa 1f       	adc	r26, r26
     f60:	bb 1f       	adc	r27, r27
     f62:	6a 95       	dec	r22
     f64:	d1 f7       	brne	.-12     	; 0xf5a <delay+0x3c>
     f66:	bc 01       	movw	r22, r24
     f68:	2d c0       	rjmp	.+90     	; 0xfc4 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f6a:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     f6c:	f8 94       	cli
	m = timer0_overflow_count;
     f6e:	80 91 4e 02 	lds	r24, 0x024E
     f72:	90 91 4f 02 	lds	r25, 0x024F
     f76:	a0 91 50 02 	lds	r26, 0x0250
     f7a:	b0 91 51 02 	lds	r27, 0x0251
#if defined(TCNT0)
	t = TCNT0;
     f7e:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f80:	a8 9b       	sbis	0x15, 0	; 21
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <delay+0x70>
     f84:	ef 3f       	cpi	r30, 0xFF	; 255
     f86:	19 f0       	breq	.+6      	; 0xf8e <delay+0x70>
		m++;
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	a1 1d       	adc	r26, r1
     f8c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f8e:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     f90:	ba 2f       	mov	r27, r26
     f92:	a9 2f       	mov	r26, r25
     f94:	98 2f       	mov	r25, r24
     f96:	88 27       	eor	r24, r24
     f98:	8e 0f       	add	r24, r30
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	b1 1d       	adc	r27, r1
     fa0:	e2 e0       	ldi	r30, 0x02	; 2
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	ea 95       	dec	r30
     fac:	d1 f7       	brne	.-12     	; 0xfa2 <delay+0x84>
     fae:	86 1b       	sub	r24, r22
     fb0:	97 0b       	sbc	r25, r23
     fb2:	88 5e       	subi	r24, 0xE8	; 232
     fb4:	93 40       	sbci	r25, 0x03	; 3
     fb6:	c8 f2       	brcs	.-78     	; 0xf6a <delay+0x4c>
			ms--;
     fb8:	21 50       	subi	r18, 0x01	; 1
     fba:	30 40       	sbci	r19, 0x00	; 0
     fbc:	40 40       	sbci	r20, 0x00	; 0
     fbe:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
     fc0:	68 51       	subi	r22, 0x18	; 24
     fc2:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	41 05       	cpc	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	71 f6       	brne	.-100    	; 0xf6a <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     fce:	08 95       	ret

00000fd0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     fd0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     fd2:	84 b5       	in	r24, 0x24	; 36
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     fd8:	84 b5       	in	r24, 0x24	; 36
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     fde:	85 b5       	in	r24, 0x25	; 37
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     fe4:	85 b5       	in	r24, 0x25	; 37
     fe6:	81 60       	ori	r24, 0x01	; 1
     fe8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     fea:	ee e6       	ldi	r30, 0x6E	; 110
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ff4:	e1 e8       	ldi	r30, 0x81	; 129
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ffa:	80 81       	ld	r24, Z
     ffc:	82 60       	ori	r24, 0x02	; 2
     ffe:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1000:	80 81       	ld	r24, Z
    1002:	81 60       	ori	r24, 0x01	; 1
    1004:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1006:	e0 e8       	ldi	r30, 0x80	; 128
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1010:	e1 eb       	ldi	r30, 0xB1	; 177
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    101a:	e0 eb       	ldi	r30, 0xB0	; 176
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1024:	ea e7       	ldi	r30, 0x7A	; 122
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	84 60       	ori	r24, 0x04	; 4
    102c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    102e:	80 81       	ld	r24, Z
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    103a:	80 81       	ld	r24, Z
    103c:	80 68       	ori	r24, 0x80	; 128
    103e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1040:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1044:	08 95       	ret

00001046 <__divmodhi4>:
    1046:	97 fb       	bst	r25, 7
    1048:	09 2e       	mov	r0, r25
    104a:	07 26       	eor	r0, r23
    104c:	0a d0       	rcall	.+20     	; 0x1062 <__divmodhi4_neg1>
    104e:	77 fd       	sbrc	r23, 7
    1050:	04 d0       	rcall	.+8      	; 0x105a <__divmodhi4_neg2>
    1052:	2e d0       	rcall	.+92     	; 0x10b0 <__udivmodhi4>
    1054:	06 d0       	rcall	.+12     	; 0x1062 <__divmodhi4_neg1>
    1056:	00 20       	and	r0, r0
    1058:	1a f4       	brpl	.+6      	; 0x1060 <__divmodhi4_exit>

0000105a <__divmodhi4_neg2>:
    105a:	70 95       	com	r23
    105c:	61 95       	neg	r22
    105e:	7f 4f       	sbci	r23, 0xFF	; 255

00001060 <__divmodhi4_exit>:
    1060:	08 95       	ret

00001062 <__divmodhi4_neg1>:
    1062:	f6 f7       	brtc	.-4      	; 0x1060 <__divmodhi4_exit>
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__udivmodsi4>:
    106c:	a1 e2       	ldi	r26, 0x21	; 33
    106e:	1a 2e       	mov	r1, r26
    1070:	aa 1b       	sub	r26, r26
    1072:	bb 1b       	sub	r27, r27
    1074:	fd 01       	movw	r30, r26
    1076:	0d c0       	rjmp	.+26     	; 0x1092 <__udivmodsi4_ep>

00001078 <__udivmodsi4_loop>:
    1078:	aa 1f       	adc	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	ee 1f       	adc	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	a2 17       	cp	r26, r18
    1082:	b3 07       	cpc	r27, r19
    1084:	e4 07       	cpc	r30, r20
    1086:	f5 07       	cpc	r31, r21
    1088:	20 f0       	brcs	.+8      	; 0x1092 <__udivmodsi4_ep>
    108a:	a2 1b       	sub	r26, r18
    108c:	b3 0b       	sbc	r27, r19
    108e:	e4 0b       	sbc	r30, r20
    1090:	f5 0b       	sbc	r31, r21

00001092 <__udivmodsi4_ep>:
    1092:	66 1f       	adc	r22, r22
    1094:	77 1f       	adc	r23, r23
    1096:	88 1f       	adc	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	1a 94       	dec	r1
    109c:	69 f7       	brne	.-38     	; 0x1078 <__udivmodsi4_loop>
    109e:	60 95       	com	r22
    10a0:	70 95       	com	r23
    10a2:	80 95       	com	r24
    10a4:	90 95       	com	r25
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	bd 01       	movw	r22, r26
    10ac:	cf 01       	movw	r24, r30
    10ae:	08 95       	ret

000010b0 <__udivmodhi4>:
    10b0:	aa 1b       	sub	r26, r26
    10b2:	bb 1b       	sub	r27, r27
    10b4:	51 e1       	ldi	r21, 0x11	; 17
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <__udivmodhi4_ep>

000010b8 <__udivmodhi4_loop>:
    10b8:	aa 1f       	adc	r26, r26
    10ba:	bb 1f       	adc	r27, r27
    10bc:	a6 17       	cp	r26, r22
    10be:	b7 07       	cpc	r27, r23
    10c0:	10 f0       	brcs	.+4      	; 0x10c6 <__udivmodhi4_ep>
    10c2:	a6 1b       	sub	r26, r22
    10c4:	b7 0b       	sbc	r27, r23

000010c6 <__udivmodhi4_ep>:
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	5a 95       	dec	r21
    10cc:	a9 f7       	brne	.-22     	; 0x10b8 <__udivmodhi4_loop>
    10ce:	80 95       	com	r24
    10d0:	90 95       	com	r25
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	08 95       	ret

000010d8 <__tablejump2__>:
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31

000010dc <__tablejump__>:
    10dc:	05 90       	lpm	r0, Z+
    10de:	f4 91       	lpm	r31, Z+
    10e0:	e0 2d       	mov	r30, r0
    10e2:	09 94       	ijmp

000010e4 <toupper>:
    10e4:	91 11       	cpse	r25, r1
    10e6:	08 95       	ret
    10e8:	81 56       	subi	r24, 0x61	; 97
    10ea:	8a 51       	subi	r24, 0x1A	; 26
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <toupper+0xc>
    10ee:	80 52       	subi	r24, 0x20	; 32
    10f0:	85 58       	subi	r24, 0x85	; 133
    10f2:	08 95       	ret

000010f4 <__do_global_dtors>:
    10f4:	10 e0       	ldi	r17, 0x00	; 0
    10f6:	cc e6       	ldi	r28, 0x6C	; 108
    10f8:	d0 e0       	ldi	r29, 0x00	; 0
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <.do_global_dtors_start>

000010fc <.do_global_dtors_loop>:
    10fc:	fe 01       	movw	r30, r28
    10fe:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__tablejump__>
    1102:	22 96       	adiw	r28, 0x02	; 2

00001104 <.do_global_dtors_start>:
    1104:	ce 36       	cpi	r28, 0x6E	; 110
    1106:	d1 07       	cpc	r29, r17
    1108:	c9 f7       	brne	.-14     	; 0x10fc <.do_global_dtors_loop>
    110a:	f8 94       	cli

0000110c <__stop_program>:
    110c:	ff cf       	rjmp	.-2      	; 0x110c <__stop_program>
